{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","Feature","Target","Typeinfo","TypeinfoFlags","x","DiagnosticCategory","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","code","message","range","relatedRange","arg0","arg1","arg2","replace","DiagnosticMessage","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","DiagnosticEmitter","Token","Range","NodeKind","kind","LITERAL","NULL","TRUE","FALSE","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","createTypeName","typeName","TypeName","identifier","next","createSimpleTypeName","Node","createIdentifierExpression","createNamedType","typeArguments","isNullable","type","NamedTypeNode","createFunctionType","parameters","returnType","explicitThisType","FunctionTypeNode","createOmittedType","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","DecoratorKind","fromNode","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","flags","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","localName","exportedName","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","foreignName","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","arrowKind","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","hasGenericComponent","typeParameterNodes","NAMEDTYPE","typeArgumentNodes","k","FUNCTIONTYPE","parameterNodes","TypeNode","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","is","flag","isAny","set","nameNode","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","BINARY","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","SOURCE","parent","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","Source","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","clone","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","decorator","OperatorKind","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","pathLiteral","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","ElementKind","DecoratorFlags","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","nativeFile","File","internalName","resolver","Resolver","getSource","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","makeNativeTypeDeclaration","makeNativeFunctionDeclaration","makeNativeNamespaceDeclaration","makeNativeFunction","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","USER_ENTRY","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","setType","className","classReference","classElement","wrappedType","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","requireGlobal","lookupExport","fileQueuedExports","checkDecorators","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeProperty","initializeMethod","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","QueuedExportStar","Export_declaration_conflicts_with_exported_declaration_of_0","QueuedExport","initializeImport","QueuedImport","validDecorators","AMBIENT","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Program","program","shadowType","FILE","current","unset","originalDeclaration","actual","isBound","Element","declaredElements","typedElements","RESOLVED","TypedElement","startFunction","Signature","isImport","lookup","includes","memberName","TYPEDEFINITION","mangleInternalName","NAMESPACE","ENUM","ConstantValueKind","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","VariableLikeElement","ENUMVALUE","isImmutable","Parameter","index","LOCAL","Local","instances","boundPrototypes","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","__s","FUNCTION_TARGET","toSignatureString","FunctionTarget","FIELD_PROTOTYPE","memoryOffset","Field","firstDeclaration","getterInstance","setterInstance","Property","INDEXSIGNATURE","getGetterInstance","isUnchecked","lookupOverload","getSetterInstance","IndexSignature","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","base","INTERFACE","currentMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","baseName","baseType","isBuiltinArray","lengthField","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","Class","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","Interface","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeAnyref","_BinaryenTypeExnref","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureMVP","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenFeatureTailCall","_BinaryenFeatureReferenceTypes","_BinaryenFeatureAll","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenAtomicFenceId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDTernaryId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","_BinaryenTryId","_BinaryenThrowId","_BinaryenRethrowId","_BinaryenBrOnExnId","_BinaryenPushId","_BinaryenPopId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenTruncSatSFloat32ToInt32","_BinaryenTruncSatUFloat32ToInt32","_BinaryenTruncSatSFloat64ToInt32","_BinaryenTruncSatUFloat64ToInt32","_BinaryenTruncSatSFloat32ToInt64","_BinaryenTruncSatUFloat32ToInt64","_BinaryenTruncSatSFloat64ToInt64","_BinaryenTruncSatUFloat64ToInt64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","_BinaryenWidenLowSVecI8x16ToVecI16x8","_BinaryenWidenLowUVecI8x16ToVecI16x8","_BinaryenWidenHighSVecI8x16ToVecI16x8","_BinaryenWidenHighUVecI8x16ToVecI16x8","_BinaryenWidenLowSVecI16x8ToVecI32x4","_BinaryenWidenLowUVecI16x8ToVecI32x4","_BinaryenWidenHighSVecI16x8ToVecI32x4","_BinaryenWidenHighUVecI16x8ToVecI32x4","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","_BinaryenNarrowSVecI16x8ToVecI8x16","_BinaryenNarrowUVecI16x8ToVecI8x16","_BinaryenNarrowSVecI32x4ToVecI16x8","_BinaryenNarrowUVecI32x4ToVecI16x8","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","SIMDTernaryOp","_BinaryenBitselectVec128","_BinaryenQFMAVecF32x4","_BinaryenQFMSVecF32x4","_BinaryenQFMAVecF64x2","_BinaryenQFMSVecF64x2","segment","MemorySegment","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","Module","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","_BinaryenUnary","binary","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","atomic_fence","_BinaryenAtomicFence","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","children","_BinaryenBlock","br","_BinaryenBreak","drop","_BinaryenDrop","loop","_BinaryenLoop","if","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","defaultName","numNames","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","return_call","call_indirect","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","return_call_indirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","try","catchBody","_BinaryenTry","throw","eventName","_BinaryenThrow","rethrow","exnref","_BinaryenRethrow","br_on_exn","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","pop","_BinaryenPop","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_ternary","a","b","_BinaryenSIMDTernary","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addEvent","attribute","_BinaryenAddEvent","addFunction","varTypes","_BinaryenAddFunction","getFunction","_BinaryenGetFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","addEventExport","_BinaryenAddEventExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","addEventImport","eventType","_BinaryenAddEventImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","Throw","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","Push","_BinaryenPushGetValue","Pop","Select","Drop","Host","Nop","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","types","numTypes","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","Tokenizer","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveType","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","inferGenericType","exprNode","ctxFlow","typeParameterNames","resolveExpression","SWALLOW","propagateInferredGenericTypes","actualFunction","currentType","getTypeOfElement","ensureResolvedLazyGlobal","isTypedElement","getElementOfType","lookupExpression","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","targetNode","propertyName","indexedGet","resolvedType","targetExpression","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","i64_sub","i64_zero","intType","leftType","rightType","commonType","Operator_0_cannot_be_applied_to_types_1_and_2","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","actualParent","typesToString","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","functionTypeNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","isPowerOf2","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","Type_0_is_not_assignable_to_type_1","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","unsetLocalFlag","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","isLocalTee","getLocalSetIndex","getLocalGetIndex","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","canOverflow","WRAPPED","canConversionOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","importMemory","sharedMemory","importTable","explicitStart","features","noUnsafe","feature","Options","Constraints","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","currentInlineFunctions","currentEnum","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","compile","Compiler","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","typesToNativeTypes","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","initializeInStart","Mutable_value_cannot_be_inlined","findDecorator","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysFalse","terminates","continues","breaks","fallsThrough","alwaysTrue","incrExpr","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","constraints","ANY_RETAINED","numCases","context","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","contextualType","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","tempIndex","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueI8x16","EqI8x16","AnyTrueI8x16","NeI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","argumentNodes","argumentExpression","inferredType","Type_argument_expected","compileCallIndirect","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","Expression_is_unsafe","argumentExpressions","thisArg","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","findUsedLocals","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","nodeIsConstantValue","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","arrayType","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseCtor","allocExpr","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","fieldPrototype","makeInstanceOfClass","idTemp","idExpr","conditions","single","Auto","compileCall","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","nameof","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","v128_extract_lane","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","maxIdx","v128_replace_lane","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_narrow","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","DivF32x4","DivF64x2","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","MinF32x4","MinF64x2","MaxF32x4","MaxF64x2","EqI16x8","EqI32x4","EqF32x4","EqF64x2","NeI16x8","NeI32x4","NeF32x4","NeF64x2","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc_sat","v128_widen_low","v128_widen_high","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","AbsF32x4","AbsF64x2","SqrtF32x4","SqrtF64x2","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","v128_shl","v128_shr","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","v128_and","v128_or","v128_xor","AndV128","OrV128","XorV128","v128_not","NotV128","v128_bitselect","Bitselect","v128_any_true","v128_all_true","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","v128_qfma","v128_qfms","QFMAF32x4","QFMSF32x4","QFMAF64x2","QFMSF64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","abvPrototype","isAcyclic","functionId","decompile","decompiler","Decompiler","decompileFunction","getFunctionName","getFunctionBody","getFunctionParamCount","nativeTypeToType","getFunctionParamType","getFunctionResultType","decompileExpression","nested","getLoopName","getLoopBody","getBreakCondition","getBreakName","getLoadOffset","getLoadPtr","getStoreOffset","getStorePtr","getStoreValue","i64_to_string","getSelectCondition","getDropValue","getReturnValue","getHostOp","getHostOperand","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","indentLevel","build","IDLBuilder","indent","typeToString","visitInterface","ExportsWalker","unknown","TSDBuilder","numMembers","isInterface","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","parseFile","isEntry","indexOf","USER","currentSource","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","getDependee","dependent","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","nodeIsCallable","nodeIsGenericCallable","skipBlock","depth","Parser","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","clz32","round","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","Number","capacity","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","unmanaged","formatDiagnostic","formatDiagnosticMessage","parser","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","optimizeLevel","shrinkLevel","cls","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","cloned","v","overrides","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","valueI64"],"mappings":"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,KAAM,OAAO,EACxB,QAAS,OAAO,IA1UpB,SAAY3V,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYgqD,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAwKA,0BAwBA,uCAA4Cz2D,GAE1C,OADAuJ,OAAOvJ,EAAKsL,QACJtL,EAAK0L,WAAW,IACtB,KAAK,IAAY,MAAe,UAAR1L,EACxB,KAAK,IAAY,MAAe,OAARA,EACxB,KAAK,IAAY,MAAe,cAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EAE1B,OAAO,GAGT,iCAAsCilB,GACpC,OAAQA,GACN,KAAKxY,EAAMyqD,OAAQ,MAAO,SAC1B,KAAKzqD,EAAM+qD,GAAI,MAAO,KACtB,KAAK/qD,E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Co9G,EAAG,QACV5kH,EAAGE,KAAK,QACRF,EAAGE,KAAK0kH,EAAI/zF,UAAU3xB,YACtBc,EAAGE,KAAK,Q,iGAGV,OADAF,EAAGE,KAAK,YACDF,EAAGG,KAAK,KAIjB,WAAS,EAAA5J,eAAA,EAAAA,eAGT,QAEA,QACA,SACA,SACA,SACA,SACA,QACA,SACA,QACA,SACA,QACA,QACA,QACA,QACA,S,8ECxOA,oBAAyBsuH,EAAU94F,GAEjC,OADAnuB,OAAOmuB,GAAS,GAAKA,EAAQ,IACtBowF,OACLd,QACEwJ,EACA7yD,QACEqoD,QACA17F,QAAQoN,KAGZkuC,WAKJ,qBAA0B4qD,EAAU94F,EAAY+4F,GAE9C,OADAlnH,OAAOmuB,GAAS,GAAKA,EAAQ,IACtB+4F,EACHvJ,OACEsJ,EACA7yD,QACEqoD,QACA17F,QAAQoN,KAGZsvF,QACEwJ,EACA9I,QACE/pD,QACEqoD,QACA17F,QAAQoN,Q,8EC9BpB,SAAkBg5F,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4B5wH,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,OAAOA,GAAK,IAAcA,GAAK,KACxBA,GAAK,IAAcA,GAAK,IACnB,IAALA,GACK,IAALA,GACAA,EAAI,SAmLqBiK,EAnLYjK,GAoL9B,GAAKiK,EAAO,QACnB4mH,EAAmB5mH,EAAa6mH,IAFzC,IAAkC7mH,GA/KlC,8BAAmCjK,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,OAAOA,GAAK,IAAcA,GAAK,KACxBA,GAAK,IAAcA,GAAK,IACxBA,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoBiK,EAzKYjK,GA0K7B,GAAKiK,EAAO,QACnB4mH,EAAmB5mH,EAAa8mH,IAFzC,IAAiC9mH,GArKjC,IAAM6mH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASF,EAAmB5mH,EAAWymH,GACrC,GAAIzmH,EAAOymH,EAAI,GAAI,OAAO,EAO1B,IALA,IAEIM,EACAC,EAHA7K,EAAK,EACLC,EAAKqK,EAAIllH,OAIN46G,EAAK,EAAIC,GAAI,CAIlB,GAHA2K,EAAM5K,GAAOC,EAAKD,GAAO,IAEzB6K,EAASP,EADTM,GAAc,EAANA,KAEM/mH,GAAQA,GAAQymH,EAAIM,EAAM,GACtC,OAAO,EAEL/mH,EAAOgnH,EACT5K,EAAK2K,EAEL5K,EAAK4K,EAAM,EAGf,OAAO,I,gsBC9WT,qBAA6Bz7F,GAC3B,QAD2B,IAAAA,MAAA,MACvBA,EAAU,CAEZ,IADA,IAAI27F,EAAS,IAAIpqH,MAASyuB,EAAS/pB,QAC1B7L,EAAI,EAAGgc,EAAI4Z,EAAS/pB,OAAQ7L,EAAIgc,IAAKhc,EAAGw9B,UAAU+zF,EAAOvxH,GAAK41B,EAAS51B,IAChF,OAAOuxH,EAET,OAAO,IAAIpqH,OAGb,mBAA2ByuB,G,QACzB,QADyB,IAAAA,MAAA,MACrBA,EAAU,CACZ,IAAI27F,EAAS,IAAIlqH,I,IACjB,IAAc,QAAAuuB,GAAQ,+BAAjB,IAAI47F,EAAC,QAAcD,EAAO/mG,IAAIgnG,I,iGACnC,OAAOD,EAET,OAAO,IAAIlqH,KAGb,mBAA6BuuB,EAAkC67F,G,qBAAlC,IAAA77F,MAAA,WAAkC,IAAA67F,MAAA,MAC7D,IAAIF,EAAS,IAAIjqH,IACjB,GAAIsuB,EAAU,C,IACZ,IAAmB,QAAAA,GAAQ,+BAAlB,mBAAC5Z,EAAA,KAAGw1G,EAAA,KAAgBD,EAAO10G,IAAIb,EAAGw1G,I,iGAC3C,GAAIC,E,IAAW,IAAmB,QAAAA,GAAS,+BAAnB,mBAACz1G,EAAA,KAAGw1G,EAAA,KAAiBD,EAAO10G,IAAIb,EAAGw1G,I,uGACtD,GAAIC,E,IACT,IAAmB,QAAAA,GAAS,+BAAnB,mBAACz1G,EAAA,KAAGw1G,EAAA,KAAiBD,EAAO10G,IAAIb,EAAGw1G,I,iGAE9C,OAAOD,I,8ECpBT,WAIMG,EAAY,GAMlB,SAAgBx6G,EAAcH,GAK5B,IAJA,IAiBI+xD,EAjBA5oD,EAAM,EACNtU,EAAMmL,EAAKlL,OAGRqU,EAAM,EAAItU,GACS,IAAxBmL,EAAK9K,WAAWiU,IAChBnJ,EAAK9K,WAAWiU,EAAM,IAAMwxG,GAE5BxxG,GAAO,EAUT,KAPIA,EAAM,GAAKtU,EAAMmL,EAAKlL,UACxBkL,EAAOA,EAAK5K,UAAU+T,EAAKtU,GAC3BA,GAAOsU,EACPA,EAAM,GAIDA,EAAM,EAAItU,GAAK,CAIpB,GAHAk9D,GAAQ,EAIN/xD,EAAK9K,WAAWiU,IAAQwxG,GACI,IAA5B36G,EAAK9K,WAAWiU,EAAM,GACtB,CAGA,IADA4oD,EAAQ5oD,EAAM,GAAKtU,IAEjBsU,EAAM,EAAItU,GACVmL,EAAK9K,WAAWiU,EAAM,IAAMwxG,EAC5B,CACA36G,EAAO+xD,EACH/xD,EAAK5K,UAAU,EAAG+T,GAClBnJ,EAAK5K,UAAU,EAAG+T,GAAOnJ,EAAK5K,UAAU+T,EAAM,GAClDtU,GAAO,EACP,SAKF,IADAk9D,EAAQ5oD,EAAM,GAAKtU,IACsB,IAA5BmL,EAAK9K,WAAWiU,EAAM,IACjCA,EAAM,EAAItU,GACkB,IAA5BmL,EAAK9K,WAAWiU,EAAM,IACtBnJ,EAAK9K,WAAWiU,EAAM,IAAMwxG,EAC5B,CAGA,IADA,IAAIC,EAAOzxG,IACFyxG,GAAQ,GACf,GAAI56G,EAAK9K,WAAW0lH,IAASD,EAAW,CAClCxxG,EAAMyxG,GAAQ,GACa,IAA7B56G,EAAK9K,WAAW0lH,EAAO,IACM,IAA7B56G,EAAK9K,WAAW0lH,EAAO,KAEvB56G,EAAO+xD,EACH/xD,EAAK5K,UAAU,EAAGwlH,GAClB56G,EAAK5K,UAAU,EAAGwlH,GAAQ56G,EAAK5K,UAAU+T,EAAM,GACnDtU,GAAOsU,EAAM,EAAIyxG,EACjBzxG,EAAMyxG,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAKzxG,EAAM,IACT,GAAPA,GACoB,IAAtBnJ,EAAK9K,WAAW,IACM,IAAtB8K,EAAK9K,WAAW,IAChB,CAEAL,GADAmL,EAAOA,EAAK5K,UAAU+T,EAAM,IACjBrU,OACX,WAKRqU,IAEF,OAAOtU,EAAM,EAAImL,EAAO,IAc1B,SAAgB66G,EAAQtmH,GACtB,IAAI4U,EAAM5U,EAAeO,OACzB,GAAIqU,GAAO,EAAG,CACZ,GAAW,GAAPA,EAAU,MAAO,IACrB,GAAI5U,EAAeW,WAAW,IAAMylH,EAClC,OAAOpmH,EAGX,OAAS4U,EAAM,GACb,GAAI5U,EAAeW,WAAWiU,IAAQwxG,EACpC,OAAOpmH,EAAea,UAAU,EAAG+T,GAGvC,MAAO,IA3GT,kBAoFA,uBAA4B5U,EAAwBumH,GAClD,OAAIvmH,EAAe6L,WAAW,QACrB7L,EAEF4L,EACL06G,EAAQC,GAAU,EAAA5vH,eAAiBqJ,IAKvC,a,8EC5GA,IAAMwmH,EAAW,KACXC,EAAW,OACXC,EAAW,WAGjB,kBAAuB9lH,EAAc24C,GACnC,KAAOA,GAAS,GACd34C,EAAGE,KAAK4lH,GACRntE,GAAS,EAEPA,GAAS,IACX34C,EAAGE,KAAK2lH,GACRltE,GAAS,GAEPA,GACF34C,EAAGE,KAAK0lH,K,6BCQZ,SAAgBG,EAAQhpG,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,EACtBD,EAAOC,EAAS,IAAM,GACtBD,EAAOC,EAAS,IAAM,GAI/B,SAAgBG,EAASpoB,EAAYgoB,EAAoBC,GACvDD,EAAOC,GAAcjoB,EACrBgoB,EAAOC,EAAS,GAAKjoB,IAAU,EAC/BgoB,EAAOC,EAAS,GAAKjoB,IAAU,GAC/BgoB,EAAOC,EAAS,GAAKjoB,IAAU,GAIjC,SAAgBixH,EAAQjpG,EAAoBC,GAC1C,IAAIu9F,EAAKwL,EAAQhpG,EAAQC,GACrBw9F,EAAKuL,EAAQhpG,EAAQC,EAAS,GAClC,OAAO2B,QAAQ47F,EAAIC,G,iDAzCrB,kBAAuBz9F,EAAoBC,GACzC,OAAOD,EAAOC,IAIhB,mBAAwBjoB,EAAYgoB,EAAoBC,GACtDD,EAAOC,GAAUjoB,GAInB,mBAAwBgoB,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,GAI/B,oBAAyBjoB,EAAYgoB,EAAoBC,GACvDD,EAAOC,GAAcjoB,EACrBgoB,EAAOC,EAAS,GAAKjoB,IAAU,GAIjC,YAQA,aAQA,YAOA,oBAAyBA,EAAYgoB,EAAoBC,GACvDG,EAASw6B,QAAQ5iD,GAAQgoB,EAAQC,GACjCG,EAASy6B,SAAS7iD,GAAQgoB,EAAQC,EAAS,IAI7C,mBAAwBD,EAAoBC,GAC1C,OAAOg9F,WAAW+L,EAAQhpG,EAAQC,KAIpC,oBAAyBjoB,EAAYgoB,EAAoBC,GACvDG,EAAS48F,WAAWhlH,GAAQgoB,EAAQC,IAItC,mBAAwBD,EAAoBC,GAC1C,OAAOk9F,WAAW8L,EAAQjpG,EAAQC,KAIpC,oBAAyBjoB,EAAYgoB,EAAoBC,GACvD,IAAIipG,EAAWhM,WAAWllH,GAC1BooB,EAASw6B,QAAQsuE,GAAWlpG,EAAQC,GACpCG,EAASy6B,SAASquE,GAAWlpG,EAAQC,EAAS","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\r\n  DEFINITE_ASSIGNMENT = 1 << 13,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 14,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 15,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 16,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 17,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is resolved. */\r\n  RESOLVED = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 26,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 27,\r\n\r\n  // Other\r\n\r\n  /** Is quoted. */\r\n  QUOTED = 1 << 28\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Path index suffix. */\r\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\r\n\r\n/** Common compiler symbols. */\r\nexport namespace CommonSymbols {\r\n  // special\r\n  export const EMPTY = \"\";\r\n  // types\r\n  export const i8 = \"i8\";\r\n  export const i16 = \"i16\";\r\n  export const i32 = \"i32\";\r\n  export const i64 = \"i64\";\r\n  export const isize = \"isize\";\r\n  export const u8 = \"u8\";\r\n  export const u16 = \"u16\";\r\n  export const u32 = \"u32\";\r\n  export const u64 = \"u64\";\r\n  export const usize = \"usize\";\r\n  export const bool = \"bool\";\r\n  export const f32 = \"f32\";\r\n  export const f64 = \"f64\";\r\n  export const v128 = \"v128\";\r\n  export const anyref = \"anyref\";\r\n  export const i8x16 = \"i8x16\";\r\n  export const u8x16 = \"u8x16\";\r\n  export const i16x8 = \"i16x8\";\r\n  export const u16x8 = \"u16x8\";\r\n  export const i32x4 = \"i32x4\";\r\n  export const u32x4 = \"u32x4\";\r\n  export const i64x2 = \"i64x2\";\r\n  export const u64x2 = \"u64x2\";\r\n  export const f32x4 = \"f32x4\";\r\n  export const f64x2 = \"f64x2\";\r\n  export const void_ = \"void\";\r\n  export const number = \"number\";\r\n  export const boolean = \"boolean\";\r\n  export const string = \"string\";\r\n  export const native = \"native\";\r\n  export const indexof = \"indexof\";\r\n  export const valueof = \"valueof\";\r\n  export const returnof = \"returnof\";\r\n  // aliases\r\n  export const null_ = \"null\";\r\n  export const true_ = \"true\";\r\n  export const false_ = \"false\";\r\n  // objects\r\n  export const this_ = \"this\";\r\n  export const super_ = \"super\";\r\n  export const constructor = \"constructor\";\r\n  // constants\r\n  export const ASC_TARGET = \"ASC_TARGET\";\r\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\r\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\r\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\r\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\r\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\r\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\r\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\r\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\r\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\r\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\r\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\r\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\r\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\r\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\r\n  // classes\r\n  export const I8 = \"I8\";\r\n  export const I16 = \"I16\";\r\n  export const I32 = \"I32\";\r\n  export const I64 = \"I64\";\r\n  export const Isize = \"Isize\";\r\n  export const U8 = \"U8\";\r\n  export const U16 = \"U16\";\r\n  export const U32 = \"U32\";\r\n  export const U64 = \"U64\";\r\n  export const Usize = \"Usize\";\r\n  export const Bool = \"Bool\";\r\n  export const F32 = \"F32\";\r\n  export const F64 = \"F64\";\r\n  export const V128 = \"V128\";\r\n  export const Anyref = \"Anyref\";\r\n  export const String = \"String\";\r\n  export const Array = \"Array\";\r\n  export const FixedArray = \"FixedArray\";\r\n  export const Set = \"Set\";\r\n  export const Map = \"Map\";\r\n  export const ArrayBufferView = \"ArrayBufferView\";\r\n  export const ArrayBuffer = \"ArrayBuffer\";\r\n  export const Math = \"Math\";\r\n  export const Mathf = \"Mathf\";\r\n  export const Int8Array = \"Int8Array\";\r\n  export const Int16Array = \"Int16Array\";\r\n  export const Int32Array = \"Int32Array\";\r\n  export const Int64Array = \"Int64Array\";\r\n  export const Uint8Array = \"Uint8Array\";\r\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\r\n  export const Uint16Array = \"Uint16Array\";\r\n  export const Uint32Array = \"Uint32Array\";\r\n  export const Uint64Array = \"Uint64Array\";\r\n  export const Float32Array = \"Float32Array\";\r\n  export const Float64Array = \"Float64Array\";\r\n  // runtime\r\n  export const abort = \"abort\";\r\n  export const pow = \"pow\";\r\n  export const mod = \"mod\";\r\n  export const alloc = \"__alloc\";\r\n  export const realloc = \"__realloc\";\r\n  export const free = \"__free\";\r\n  export const retain = \"__retain\";\r\n  export const release = \"__release\";\r\n  export const collect = \"__collect\";\r\n  export const typeinfo = \"__typeinfo\";\r\n  export const instanceof_ = \"__instanceof\";\r\n  export const visit = \"__visit\";\r\n  export const allocArray = \"__allocArray\";\r\n}\r\n\r\n// shared\r\nexport { Feature } from \"../std/assembly/shared/feature\";\r\nexport { Target } from \"../std/assembly/shared/target\";\r\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./bitset\";\r\nexport * from \"./charcode\";\r\nexport * from \"./collections\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n\r\n/** Tests if `x` is a power of two. */\r\nexport function isPowerOf2(x: i32): bool {\r\n  return x != 0 && (x & (x - 1)) == 0;\r\n}\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak, CharCode\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n  /** Related range, if any. */\r\n  relatedRange: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Adds a related source range to this message. */\r\n  withRelatedRange(range: Range): this {\r\n    this.relatedRange = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(range, useColors));\r\n    }\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n\r\n    let relatedRange = message.relatedRange;\r\n    if (relatedRange) {\r\n      if (showContext) {\r\n        sb.push(\"\\n\");\r\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\r\n      }\r\n      sb.push(\"\\n\");\r\n      sb.push(\" in \");\r\n      sb.push(range.source.normalizedPath);\r\n      sb.push(\"(\");\r\n      sb.push(range.line.toString(10));\r\n      sb.push(\",\");\r\n      sb.push(range.column.toString(10));\r\n      sb.push(\")\");\r\n    }\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) {\r\n      if (isLineBreak(text.charCodeAt(start))) {\r\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\r\n        break;\r\n      }\r\n      sb.push(\"~\");\r\n    }\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    relatedRange: Range | null,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    if (relatedRange) message.relatedRange = relatedRange;\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message with a related range. */\r\n  infoRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message with a related range. */\r\n  warningRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message with a related range. */\r\n  errorRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols,\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  NAMEDTYPE,\r\n  FUNCTIONTYPE,\r\n  TYPENAME,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTDEFAULT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INDEXSIGNATUREDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.ASSERTION: // if kind=NONNULL\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PARENTHESIZED:\r\n    case NodeKind.PROPERTYACCESS:\r\n    case NodeKind.SUPER: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n\r\n  // types\r\n\r\n  static createTypeName(\r\n    name: IdentifierExpression,\r\n    range: Range\r\n  ): TypeName {\r\n    var typeName = new TypeName();\r\n    typeName.range = range;\r\n    typeName.identifier = name;\r\n    typeName.next = null;\r\n    return typeName;\r\n  }\r\n\r\n  static createSimpleTypeName(\r\n    name: string,\r\n    range: Range\r\n  ): TypeName {\r\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\r\n  }\r\n\r\n  static createNamedType(\r\n    name: TypeName,\r\n    typeArguments: TypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): NamedTypeNode {\r\n    var type = new NamedTypeNode();\r\n    type.range = range;\r\n    type.name = name;\r\n    type.typeArguments = typeArguments;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createFunctionType(\r\n    parameters: ParameterNode[],\r\n    returnType: TypeNode,\r\n    explicitThisType: NamedTypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): FunctionTypeNode {\r\n    var type = new FunctionTypeNode();\r\n    type.range = range;\r\n    type.parameters = parameters;\r\n    type.returnType = returnType;\r\n    type.explicitThisType = explicitThisType;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): NamedTypeNode {\r\n    return Node.createNamedType(\r\n      Node.createSimpleTypeName(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: NamedTypeNode | null,\r\n    defaultType: NamedTypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.extendsType = extendsType;\r\n    elem.defaultType = defaultType;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: TypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.arguments = args;\r\n    stmt.decoratorKind = DecoratorKind.fromNode(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range,\r\n    isQuoted: bool = false\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name; // TODO: extract from range\r\n    expr.symbol = name; // TODO: Symbol.for(name)\r\n    expr.isQuoted = isQuoted;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements;\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: TypeNode | null,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression;\r\n    expr.toType = toType;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left;\r\n    expr.right = right;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: TypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions;\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.elementExpression = element;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: TypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.isType = isType;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: TypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.property = property;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition;\r\n    expr.ifThen = ifThen;\r\n    expr.ifElse = ifElse;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: NamedTypeNode | null, // can't be a function\r\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.implementsTypes = implementsTypes;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement;\r\n    stmt.condition = condition;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.values = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    isDeclare: bool,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.members = members;\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\r\n      } else { // absolute\r\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(normalizedPath);\r\n    } else {\r\n      stmt.internalPath = null;\r\n    }\r\n    stmt.isDeclare = isDeclare;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportDefaultStatement(\r\n    declaration: DeclarationStatement,\r\n    range: Range\r\n  ): ExportDefaultStatement {\r\n    var stmt = new ExportDefaultStatement();\r\n    stmt.declaration = declaration;\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.externalName = externalName;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.localName = name;\r\n    if (!externalName) externalName = name;\r\n    elem.exportedName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.ifTrue = ifTrue;\r\n    stmt.ifFalse = ifFalse;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls;\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) {\r\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\r\n    } else {\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    foreignName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.foreignName = foreignName;\r\n    if (!name) name = foreignName;\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: NamedTypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: TypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.type = type;\r\n    stmt.initializer = initializer;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer;\r\n    stmt.condition = condition;\r\n    stmt.incrementor = incrementor;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: FunctionTypeNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    arrowKind: ArrowKind,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    stmt.arrowKind = arrowKind;\r\n    return stmt;\r\n  }\r\n\r\n  static createIndexSignatureDeclaration(\r\n    keyType: NamedTypeNode,\r\n    valueType: TypeNode,\r\n    range: Range\r\n  ): IndexSignatureDeclaration {\r\n    var elem = new IndexSignatureDeclaration();\r\n    elem.range = range;\r\n    elem.keyType = keyType;\r\n    elem.valueType = valueType;\r\n    return elem;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: FunctionTypeNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.cases = cases;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label;\r\n    elem.statements = statements;\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    stmt.catchVariable = catchVariable;\r\n    stmt.catchStatements = catchStatements;\r\n    stmt.finallyStatements = finallyStatements;\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: TypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.type = alias;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = declarations;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: TypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class TypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n\r\n  /** Tests if this type has a generic component matching one of the given type parameters. */\r\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\r\n    var self = <TypeNode>this; // TS otherwise complains\r\n    if (this.kind == NodeKind.NAMEDTYPE) {\r\n      if (!(<NamedTypeNode>self).name.next) {\r\n        let typeArgumentNodes = (<NamedTypeNode>self).typeArguments;\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\r\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\r\n          }\r\n        } else {\r\n          let name = (<NamedTypeNode>self).name.identifier.text;\r\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\r\n            if (typeParameterNodes[i].name.text == name) return true;\r\n          }\r\n        }\r\n      }\r\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\r\n      let parameterNodes = (<FunctionTypeNode>self).parameters;\r\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\r\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\r\n      }\r\n      if ((<FunctionTypeNode>self).returnType.hasGenericComponent(typeParameterNodes)) return true;\r\n      let explicitThisType = (<FunctionTypeNode>self).explicitThisType;\r\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\r\n    } else {\r\n      assert(false);\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/** Represents a type name. */\r\nexport class TypeName extends Node {\r\n  kind = NodeKind.TYPENAME;\r\n\r\n  /** Identifier of this part. */\r\n  identifier: IdentifierExpression;\r\n  /** Next part of the type name or `null` if this is the last part. */\r\n  next: TypeName | null;\r\n}\r\n\r\n/** Represents a named type. */\r\nexport class NamedTypeNode extends TypeNode {\r\n  kind = NodeKind.NAMEDTYPE;\r\n\r\n  /** Type name. */\r\n  name: TypeName;\r\n  /** Type argument references. */\r\n  typeArguments: TypeNode[] | null;\r\n}\r\n\r\n/** Represents a function type. */\r\nexport class FunctionTypeNode extends TypeNode {\r\n  kind = NodeKind.FUNCTIONTYPE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: TypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: NamedTypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: NamedTypeNode | null; // can't be a function\r\n  /** Default type if omitted, if any. */\r\n  defaultType: NamedTypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: TypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN,\r\n  LAZY,\r\n  UNSAFE\r\n}\r\n\r\nexport namespace DecoratorKind {\r\n\r\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\r\n  export function fromNode(nameNode: Expression): DecoratorKind {\r\n    // @global, @inline, @operator, @sealed, @unmanaged\r\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\r\n      let nameStr = (<IdentifierExpression>nameNode).text;\r\n      assert(nameStr.length);\r\n      switch (nameStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n          break;\r\n        }\r\n        case CharCode.e: {\r\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n          break;\r\n        }\r\n        case CharCode.g: {\r\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n          break;\r\n        }\r\n        case CharCode.l: {\r\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\r\n          break;\r\n        }\r\n        case CharCode.o: {\r\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n          break;\r\n        }\r\n        case CharCode.s: {\r\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n          break;\r\n        }\r\n        case CharCode.u: {\r\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\r\n          break;\r\n        }\r\n      }\r\n    } else if (\r\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\r\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\r\n    ) {\r\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\r\n      assert(nameStr.length);\r\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\r\n      assert(propStr.length);\r\n      // @operator.binary, @operator.prefix, @operator.postfix\r\n      if (nameStr == \"operator\") {\r\n        switch (propStr.charCodeAt(0)) {\r\n          case CharCode.b: {\r\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n            break;\r\n          }\r\n          case CharCode.p: {\r\n            switch (propStr) {\r\n              case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n              case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return DecoratorKind.CUSTOM;\r\n  }\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n  /** Symbol. */\r\n  symbol: string; // TODO: symbol\r\n  /** Whether quoted or not. */\r\n  isQuoted: bool;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS,\r\n  NONNULL\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: TypeNode | null;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: TypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n\r\n  /** Gets the type arguments range for reporting. */\r\n  get typeArgumentsRange(): Range {\r\n    var typeArguments = this.typeArguments;\r\n    var numTypeArguments: i32;\r\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\r\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n\r\n  /** Gets the arguments range for reporting. */\r\n  get argumentsRange(): Range {\r\n    var args = this.arguments;\r\n    var numArguments = args.length;\r\n    if (numArguments) {\r\n      return Range.join(args[0].range, args[numArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n  symbol = CommonSymbols.constructor;\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: TypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n  symbol = CommonSymbols.null_;\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n  symbol = CommonSymbols.super_;\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n  symbol = CommonSymbols.this_;\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n  symbol = CommonSymbols.true_;\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n  symbol = CommonSymbols.false_;\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** User-provided file. */\r\n  USER = 0,\r\n  /** User-provided entry file. */\r\n  USER_ENTRY = 1,\r\n  /** Library-provided file. */\r\n  LIBRARY = 2,\r\n  /** Library-provided entry file. */\r\n  LIBRARY_ENTRY = 3\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path with file extension. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  get isLibrary(): bool {\r\n    var kind = this.sourceKind;\r\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\r\n  }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents an index signature declaration. */\r\nexport class IndexSignatureDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\r\n\r\n  /** Key type. */\r\n  keyType: NamedTypeNode;\r\n  /** Value type. */\r\n  valueType: TypeNode;\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: TypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Base class type being extended, if any. */\r\n  extendsType: NamedTypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Local identifier. */\r\n  localName: IdentifierExpression;\r\n  /** Exported identifier. */\r\n  exportedName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a file export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n  /** Whether this is a declared export. */\r\n  isDeclare: bool;\r\n}\r\n\r\n/** Represents an `export default` statement. */\r\nexport class ExportDefaultStatement extends Statement {\r\n  kind = NodeKind.EXPORTDEFAULT;\r\n\r\n  /** Declaration being exported as default. */\r\n  declaration: DeclarationStatement;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Indicates the kind of an array function. */\r\nexport const enum ArrowKind {\r\n  /** Not an arrow function. */\r\n  NONE,\r\n  /** Parenthesized parameter list. */\r\n  ARROW_PARENTHESIZED,\r\n  /** Single parameter without parenthesis. */\r\n  ARROW_SINGLE\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: FunctionTypeNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n  /** Arrow function kind, if applicable. */\r\n  arrowKind: ArrowKind;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n\r\n  /** Clones this function declaration. */\r\n  clone(): FunctionDeclaration {\r\n    return Node.createFunctionDeclaration(\r\n      this.name,\r\n      this.typeParameters,\r\n      this.signature,\r\n      this.body,\r\n      this.decorators,\r\n      this.flags,\r\n      this.arrowKind,\r\n      this.range\r\n    );\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  foreignName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: TypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n/** Tests if the specified type node represents an omitted type. */\r\nexport function isTypeOmitted(type: TypeNode): bool {\r\n  if (type.kind == NodeKind.NAMEDTYPE) {\r\n    let name = (<NamedTypeNode>type).name;\r\n    return !(name.next || name.identifier.text.length);\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  INNER_DELIMITER,\r\n  LIBRARY_SUBST,\r\n  INDEX_SUFFIX,\r\n  CommonSymbols,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  Range,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n  TypeParameterNode,\r\n  TypeNode,\r\n  NamedTypeNode,\r\n  FunctionTypeNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  ExportDefaultStatement,\r\n  Token,\r\n  ParameterNode\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  FunctionRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode,\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Flow\r\n} from \"./flow\";\r\n\r\n/** Represents a yet unresolved `import`. */\r\nclass QueuedImport {\r\n  constructor(\r\n    /** File being imported into. */\r\n    public localFile: File,\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. Is an `import *` if not set. */\r\n    public foreignIdentifier: IdentifierExpression | null,\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export`. */\r\nclass QueuedExport {\r\n  constructor(\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. */\r\n    public foreignIdentifier: IdentifierExpression,\r\n    /** Path to the other file if a re-export. */\r\n    public foreignPath: string | null,\r\n    /** Alternative path to the other file if a re-export. */\r\n    public foreignPathAlt: string | null\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export *`. */\r\nclass QueuedExportStar {\r\n  // stored in a map with localFile as the key\r\n  constructor(\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string,\r\n    /** Reference to the path literal for reporting. */\r\n    public pathLiteral: StringLiteralExpression\r\n  ) {}\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\nexport namespace OperatorKind {\r\n\r\n  /** Returns the operator kind represented by the specified decorator and string argument. */\r\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n    assert(arg.length);\r\n    switch (decoratorKind) {\r\n      case DecoratorKind.OPERATOR:\r\n      case DecoratorKind.OPERATOR_BINARY: {\r\n        switch (arg.charCodeAt(0)) {\r\n          case CharCode.OPENBRACKET: {\r\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n            break;\r\n          }\r\n          case CharCode.OPENBRACE: {\r\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n            break;\r\n          }\r\n          case CharCode.PLUS: {\r\n            if (arg == \"+\") return OperatorKind.ADD;\r\n            break;\r\n          }\r\n          case CharCode.MINUS: {\r\n            if (arg == \"-\") return OperatorKind.SUB;\r\n            break;\r\n          }\r\n          case CharCode.ASTERISK: {\r\n            if (arg == \"*\") return OperatorKind.MUL;\r\n            if (arg == \"**\") return OperatorKind.POW;\r\n            break;\r\n          }\r\n          case CharCode.SLASH: {\r\n            if (arg == \"/\") return OperatorKind.DIV;\r\n            break;\r\n          }\r\n          case CharCode.PERCENT: {\r\n            if (arg == \"%\") return OperatorKind.REM;\r\n            break;\r\n          }\r\n          case CharCode.AMPERSAND: {\r\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n            break;\r\n          }\r\n          case CharCode.BAR: {\r\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n            break;\r\n          }\r\n          case CharCode.CARET: {\r\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n            break;\r\n          }\r\n          case CharCode.EQUALS: {\r\n            if (arg == \"==\") return OperatorKind.EQ;\r\n            break;\r\n          }\r\n          case CharCode.EXCLAMATION: {\r\n            if (arg == \"!=\") return OperatorKind.NE;\r\n            break;\r\n          }\r\n          case CharCode.GREATERTHAN: {\r\n            if (arg == \">\") return OperatorKind.GT;\r\n            if (arg == \">=\") return OperatorKind.GE;\r\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n            break;\r\n          }\r\n          case CharCode.LESSTHAN: {\r\n            if (arg == \"<\") return OperatorKind.LT;\r\n            if (arg == \"<=\") return OperatorKind.LE;\r\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case DecoratorKind.OPERATOR_PREFIX: {\r\n        switch (arg.charCodeAt(0)) {\r\n          case CharCode.PLUS: {\r\n            if (arg == \"+\") return OperatorKind.PLUS;\r\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n            break;\r\n          }\r\n          case CharCode.MINUS: {\r\n            if (arg == \"-\") return OperatorKind.MINUS;\r\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n            break;\r\n          }\r\n          case CharCode.EXCLAMATION: {\r\n            if (arg == \"!\") return OperatorKind.NOT;\r\n            break;\r\n          }\r\n          case CharCode.TILDE: {\r\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case DecoratorKind.OPERATOR_POSTFIX: {\r\n        switch (arg.charCodeAt(0)) {\r\n          case CharCode.PLUS: {\r\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n            break;\r\n          }\r\n          case CharCode.MINUS: {\r\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return OperatorKind.INVALID;\r\n  }\r\n\r\n  /** Converts a binary operator token to the respective operator kind. */\r\n  export function fromBinaryToken(token: Token): OperatorKind {\r\n    switch (token) {\r\n      case Token.PLUS:\r\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\r\n      case Token.MINUS:\r\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\r\n      case Token.ASTERISK:\r\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\r\n      case Token.SLASH:\r\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\r\n      case Token.PERCENT:\r\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\r\n      case Token.ASTERISK_ASTERISK:\r\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\r\n      case Token.AMPERSAND:\r\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\r\n      case Token.BAR:\r\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\r\n      case Token.CARET:\r\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\r\n      case Token.LESSTHAN_LESSTHAN:\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\r\n      case Token.GREATERTHAN_GREATERTHAN:\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\r\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\r\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\r\n      case Token.GREATERTHAN: return OperatorKind.GT;\r\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\r\n      case Token.LESSTHAN: return OperatorKind.LT;\r\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\r\n    }\r\n    return OperatorKind.INVALID;\r\n  }\r\n\r\n  /** Converts a unary prefix operator token to the respective operator kind. */\r\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\r\n    switch (token) {\r\n      case Token.PLUS: return OperatorKind.PLUS;\r\n      case Token.MINUS: return OperatorKind.MINUS;\r\n      case Token.EXCLAMATION: return OperatorKind.NOT;\r\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\r\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\r\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\r\n    }\r\n    return OperatorKind.INVALID;\r\n  }\r\n\r\n  /** Converts a unary postfix operator token to the respective operator kind. */\r\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\r\n    switch (token) {\r\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\r\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\r\n    }\r\n    return OperatorKind.INVALID;\r\n  }\r\n}\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Array of sources. */\r\n  sources: Source[] = [];\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Special native code source. */\r\n  nativeSource: Source;\r\n  /** Special native code file. */\r\n  nativeFile: File;\r\n\r\n  // lookup maps\r\n\r\n  /** Files by unique internal name. */\r\n  filesByName: Map<string,File> = new Map();\r\n  /** Elements by unique internal name in element space. */\r\n  elementsByName: Map<string,Element> = new Map();\r\n  /** Elements by declaration. */\r\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\r\n  /** Element instances by unique internal name. */\r\n  instancesByName: Map<string,Element> = new Map();\r\n  /** Classes wrapping basic types like `i32`. */\r\n  wrapperClasses: Map<Type,Class> = new Map();\r\n  /** Managed classes contained in the program, by id. */\r\n  managedClasses: Map<i32,Class> = new Map();\r\n  /** A set of unique function signatures contained in the program, by id. */\r\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\r\n\r\n  // standard references\r\n\r\n  /** ArrayBufferView reference. */\r\n  arrayBufferViewInstance: Class;\r\n  /** ArrayBuffer instance reference. */\r\n  arrayBufferInstance: Class;\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype;\r\n  /** Set prototype reference. */\r\n  setPrototype: ClassPrototype;\r\n  /** Map prototype reference. */\r\n  mapPrototype: ClassPrototype;\r\n  /** Fixed array prototype reference. */\r\n  fixedArrayPrototype: ClassPrototype;\r\n  /** Int8Array prototype. */\r\n  i8ArrayPrototype: ClassPrototype;\r\n  /** Int16Array prototype. */\r\n  i16ArrayPrototype: ClassPrototype;\r\n  /** Int32Array prototype. */\r\n  i32ArrayPrototype: ClassPrototype;\r\n  /** Int64Array prototype. */\r\n  i64ArrayPrototype: ClassPrototype;\r\n  /** Uint8Array prototype. */\r\n  u8ArrayPrototype: ClassPrototype;\r\n  /** Uint8ClampedArray prototype. */\r\n  u8ClampedArrayPrototype: ClassPrototype;\r\n  /** Uint16Array prototype. */\r\n  u16ArrayPrototype: ClassPrototype;\r\n  /** Uint32Array prototype. */\r\n  u32ArrayPrototype: ClassPrototype;\r\n  /** Uint64Array prototype. */\r\n  u64ArrayPrototype: ClassPrototype;\r\n  /** Float32Array prototype. */\r\n  f32ArrayPrototype: ClassPrototype;\r\n  /** Float64Array prototype. */\r\n  f64ArrayPrototype: ClassPrototype;\r\n  /** String instance reference. */\r\n  stringInstance: Class;\r\n  /** Abort function reference, if not explicitly disabled. */\r\n  abortInstance: Function | null;\r\n\r\n  // runtime references\r\n\r\n  /** RT `__alloc(size: usize, id: u32): usize` */\r\n  allocInstance: Function;\r\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\r\n  reallocInstance: Function;\r\n  /** RT `__free(ref: usize): void` */\r\n  freeInstance: Function;\r\n  /** RT `__retain(ref: usize): usize` */\r\n  retainInstance: Function;\r\n  /** RT `__release(ref: usize): void` */\r\n  releaseInstance: Function;\r\n  /** RT `__collect(): void` */\r\n  collectInstance: Function;\r\n  /** RT `__visit(ref: usize, cookie: u32): void` */\r\n  visitInstance: Function;\r\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\r\n  typeinfoInstance: Function;\r\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\r\n  instanceofInstance: Function;\r\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\r\n  allocArrayInstance: Function;\r\n\r\n  /** Next class id. */\r\n  nextClassId: u32 = 0;\r\n  /** Next signature id. */\r\n  nextSignatureId: i32 = 0;\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(\r\n    /** Shared array of diagnostic messages (emitted so far). */\r\n    diagnostics: DiagnosticMessage[] | null = null\r\n  ) {\r\n    super(diagnostics);\r\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\r\n    this.nativeSource = nativeSource;\r\n    var nativeFile = new File(this, nativeSource);\r\n    this.nativeFile = nativeFile;\r\n    this.filesByName.set(nativeFile.internalName, nativeFile);\r\n    this.resolver = new Resolver(this);\r\n  }\r\n\r\n  /** Obtains the source matching the specified internal path. */\r\n  getSource(internalPath: string): string | null {\r\n    var sources = this.sources;\r\n    for (let i = 0; i < sources.length; ++i) {\r\n      let source = sources[i];\r\n      if (source.internalPath == internalPath) return source.text;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Writes a common runtime header to the specified buffer. */\r\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\r\n    // BLOCK {\r\n    //   mmInfo: usize // WASM64 TODO\r\n    //   gcInfo: u32\r\n    //   rtId: u32\r\n    //   rtSize: u32\r\n    // }\r\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\r\n    writeI32(payloadSize, buffer, offset);\r\n    writeI32(1, buffer, offset + 4); // RC=1\r\n    writeI32(classInstance.id, buffer, offset + 8);\r\n    writeI32(payloadSize, buffer, offset + 12);\r\n  }\r\n\r\n  /** Gets the size of a runtime header. */\r\n  get runtimeHeaderSize(): i32 {\r\n    return 16;\r\n  }\r\n\r\n  /** Creates a native variable declaration. */\r\n  makeNativeVariableDeclaration(\r\n    /** The simple name of the variable */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `CONST`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): VariableDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createVariableDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null, null, null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native type declaration. */\r\n  makeNativeTypeDeclaration(\r\n    /** The simple name of the type. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): TypeDeclaration {\r\n    var range = this.nativeSource.range;\r\n    var identifier = Node.createIdentifierExpression(name, range);\r\n    return Node.createTypeDeclaration(\r\n      identifier,\r\n      null,\r\n      Node.createOmittedType(range),\r\n      null, flags, range\r\n    );\r\n  }\r\n\r\n  // a dummy signature for programmatically generated native functions\r\n  private nativeDummySignature: FunctionTypeNode | null = null;\r\n\r\n  /** Creates a native function declaration. */\r\n  makeNativeFunctionDeclaration(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): FunctionDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createFunctionDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null,\r\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\r\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\r\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\r\n          null, false, range\r\n        ),\r\n        null, false, range)\r\n      ),\r\n      null, null, flags, ArrowKind.NONE, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native namespace declaration. */\r\n  makeNativeNamespaceDeclaration(\r\n    /** The simple name of the namespace. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): NamespaceDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createNamespaceDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      [], null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native function. */\r\n  makeNativeFunction(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Concrete function signature. */\r\n    signature: Signature,\r\n    /** Parent element, usually a file, class or namespace. */\r\n    parent: Element = this.nativeFile,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE,\r\n    /** Decorator flags representing built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ): Function {\r\n    return new Function(\r\n      name,\r\n      new FunctionPrototype(\r\n        name,\r\n        parent,\r\n        this.makeNativeFunctionDeclaration(name, flags),\r\n        decoratorFlags\r\n      ),\r\n      signature\r\n    );\r\n  }\r\n\r\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\r\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\r\n    var elementsByDeclaration = this.elementsByDeclaration;\r\n    assert(elementsByDeclaration.has(declaration));\r\n    return elementsByDeclaration.get(declaration)!;\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // register native types\r\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\r\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\r\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\r\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\r\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\r\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\r\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\r\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\r\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\r\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\r\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\r\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\r\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\r\n    this.registerNativeType(CommonSymbols.void_, Type.void);\r\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\r\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\r\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\r\n      CommonSymbols.native,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\r\n      CommonSymbols.indexof,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\r\n      CommonSymbols.valueof,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    this.nativeFile.add(CommonSymbols.returnof, new TypeDefinition(\r\n      CommonSymbols.returnof,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\r\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonSymbols.anyref, Type.anyref);\r\n\r\n    // register compiler hints\r\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\r\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\r\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n\r\n    // register feature hints\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\r\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\r\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\r\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_TAIL_CALLS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\r\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\r\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // initialize relevant declaration-like statements of the entire program\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let file = new File(this, source);\r\n      this.filesByName.set(file.internalName, file);\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORTDEFAULT: {\r\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports * should be linkable now that all files have been processed\r\n    for (let [file, exportsStar] of queuedExportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let exportStar = exportsStar[i];\r\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\r\n        if (!foreignFile) {\r\n          this.error(\r\n            DiagnosticCode.File_0_not_found,\r\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\r\n          );\r\n          continue;\r\n        }\r\n        file.ensureExportStar(foreignFile);\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\r\n      let queuedImport = queuedImports[i];\r\n      let foreignIdentifier = queuedImport.foreignIdentifier;\r\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\r\n        let element = this.lookupForeign(\r\n          foreignIdentifier.text,\r\n          queuedImport.foreignPath,\r\n          queuedImport.foreignPathAlt,\r\n          queuedExports\r\n        );\r\n        if (element) {\r\n          queuedImport.localFile.add(\r\n            queuedImport.localIdentifier.text,\r\n            element,\r\n            true // isImport\r\n          );\r\n        } else {\r\n          // FIXME: file not found is not reported if this happens?\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\r\n          );\r\n        }\r\n      } else { // i.e. import * as bar from \"./bar\"\r\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\r\n        if (foreignFile) {\r\n          let localFile = queuedImport.localFile;\r\n          let localName = queuedImport.localIdentifier.text;\r\n          localFile.add(\r\n            localName,\r\n            foreignFile.asImportedNamespace(\r\n              localName,\r\n              localFile\r\n            ),\r\n            true // isImport\r\n          );\r\n        } else {\r\n          assert(false); // already reported by the parser not finding the file\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [file, exports] of queuedExports) {\r\n      for (let [exportName, queuedExport] of exports) {\r\n        let localName = queuedExport.localIdentifier.text;\r\n        let foreignPath = queuedExport.foreignPath;\r\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\r\n          let element = this.lookupForeign(\r\n            localName,\r\n            foreignPath,\r\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\r\n            queuedExports\r\n          );\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.localIdentifier.range,\r\n              foreignPath, localName\r\n            );\r\n          }\r\n        } else { // i.e. export { foo [as bar] }\r\n          let element = file.lookupInSelf(localName);\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            let globalElement = this.lookupGlobal(localName);\r\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\r\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Module_0_has_no_exported_member_1,\r\n                queuedExport.foreignIdentifier.range,\r\n                file.internalName, queuedExport.foreignIdentifier.text\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\r\n    assert(this.nextClassId == 0);\r\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\r\n    assert(this.arrayBufferInstance.id == 0);\r\n    this.stringInstance = this.requireClass(CommonSymbols.String);\r\n    assert(this.stringInstance.id == 1);\r\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\r\n    assert(this.arrayBufferViewInstance.id == 2);\r\n\r\n    // register classes backing basic types\r\n    this.registerWrapperClass(Type.i8, CommonSymbols.I8);\r\n    this.registerWrapperClass(Type.i16, CommonSymbols.I16);\r\n    this.registerWrapperClass(Type.i32, CommonSymbols.I32);\r\n    this.registerWrapperClass(Type.i64, CommonSymbols.I64);\r\n    this.registerWrapperClass(options.isizeType, CommonSymbols.Isize);\r\n    this.registerWrapperClass(Type.u8, CommonSymbols.U8);\r\n    this.registerWrapperClass(Type.u16, CommonSymbols.U16);\r\n    this.registerWrapperClass(Type.u32, CommonSymbols.U32);\r\n    this.registerWrapperClass(Type.u64, CommonSymbols.U64);\r\n    this.registerWrapperClass(options.usizeType, CommonSymbols.Usize);\r\n    this.registerWrapperClass(Type.bool, CommonSymbols.Bool);\r\n    this.registerWrapperClass(Type.f32, CommonSymbols.F32);\r\n    this.registerWrapperClass(Type.f64, CommonSymbols.F64);\r\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonSymbols.V128);\r\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonSymbols.Anyref);\r\n\r\n    // register views but don't instantiate them yet\r\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\r\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let thisPrototype = queuedExtends[i];\r\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\r\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\r\n          this.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\r\n          );\r\n        }\r\n        if (\r\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\r\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\r\n          );\r\n        }\r\n        thisPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          extendsNode.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let firstChar = name.charCodeAt(0);\r\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\r\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\r\n          } else {\r\n            let elementsByName = this.elementsByName;\r\n            let element = elementsByName.get(name);\r\n            if (element) {\r\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\r\n              elementsByName.set(alias, element);\r\n            }\r\n            else throw new Error(\"no such global element: \" + name);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register stdlib components\r\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\r\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\r\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\r\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\r\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\r\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\r\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\r\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\r\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\r\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\r\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\r\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\r\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\r\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\r\n\r\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\r\n    for (let file of this.filesByName.values()) {\r\n      let exports = file.exports;\r\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\r\n        for (let element of exports.values()) this.markModuleExport(element);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Requires that a global library element of the specified kind is present and returns it. */\r\n  private require(name: string, kind: ElementKind): Element {\r\n    var element = this.lookupGlobal(name);\r\n    if (!element) throw new Error(\"missing \" + name);\r\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\r\n    return element;\r\n  }\r\n\r\n  /** Requires that a non-generic global class is present and returns it. */\r\n  private requireClass(name: string): Class {\r\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\r\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\r\n  private lookupFunction(name: string): Function | null {\r\n    var prototype = this.lookupGlobal(name);\r\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\r\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n  }\r\n\r\n  /** Requires that a non-generic global function is present and returns it. */\r\n  private requireFunction(name: string): Function {\r\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\r\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Marks an element and its children as a module export. */\r\n  private markModuleExport(element: Element): void {\r\n    element.set(CommonFlags.MODULE_EXPORT);\r\n    switch (element.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\r\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) this.markModuleExport(getterPrototype);\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) this.markModuleExport(setterPrototype);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY:\r\n      case ElementKind.FUNCTION:\r\n      case ElementKind.FIELD:\r\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\r\n    }\r\n    {\r\n      let members = element.members;\r\n      if (members) for (let member of members.values()) this.markModuleExport(member);\r\n    }\r\n  }\r\n\r\n  /** Registers a native type with the program. */\r\n  private registerNativeType(name: string, type: Type): void {\r\n    var element = new TypeDefinition(\r\n      name,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\r\n      DecoratorFlags.BUILTIN\r\n    );\r\n    element.setType(type);\r\n    this.nativeFile.add(name, element);\r\n  }\r\n\r\n  /** Registers the backing class of a native type. */\r\n  private registerWrapperClass(type: Type, className: string): void {\r\n    var wrapperClasses = this.wrapperClasses;\r\n    assert(!type.classReference && !wrapperClasses.has(type));\r\n    var element = this.lookupGlobal(className);\r\n    if (!element) return;\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\r\n    if (!classElement) return;\r\n    classElement.wrappedType = type;\r\n    wrapperClasses.set(type, classElement);\r\n  }\r\n\r\n  /** Registers a constant integer value within the global scope. */\r\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantIntegerValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Registers a constant float value within the global scope. */\r\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantFloatValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\r\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\r\n    var elementsByName = this.elementsByName;\r\n    if (elementsByName.has(name)) {\r\n      let actual = elementsByName.get(name)!;\r\n      // NOTE: this is effectively only performed when merging native types with\r\n      // their respective namespaces in std/builtins, but can also trigger when a\r\n      // user has multiple global elements of the same name in different files,\r\n      // which might result in unexpected shared symbols accross files. considering\r\n      // this a wonky feature for now that we might want to revisit later.\r\n      if (actual !== element) {\r\n        let merged = tryMerge(elementsByName.get(name)!, element);\r\n        if (!merged) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, name\r\n          );\r\n          return element;\r\n        }\r\n        element = merged;\r\n      }\r\n    }\r\n    elementsByName.set(name, element);\r\n    return element;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. */\r\n  lookupGlobal(name: string): Element | null {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\r\n  requireGlobal(name: string): Element {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name)!;\r\n    throw new Error(\"missing global\");\r\n  }\r\n\r\n  /** Tries to locate a foreign file given its normalized path. */\r\n  private lookupForeignFile(\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string\r\n  ): File | null {\r\n    var filesByName = this.filesByName;\r\n    return filesByName.has(foreignPath)\r\n         ? filesByName.get(foreignPath)!\r\n         : filesByName.has(foreignPathAlt)\r\n         ? filesByName.get(foreignPathAlt)!\r\n         : null;\r\n  }\r\n\r\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\r\n  private lookupForeign(\r\n    /** Identifier within the other file. */\r\n    foreignName: string,\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string,\r\n    /** So far queued exports. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): DeclaredElement | null {\r\n    do {\r\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\r\n      if (!foreignFile) return null; // no such file\r\n\r\n      // search already resolved exports\r\n      let element = foreignFile.lookupExport(foreignName);\r\n      if (element) return element;\r\n\r\n      // otherwise traverse queued exports\r\n      if (queuedExports.has(foreignFile)) {\r\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\r\n        if (fileQueuedExports.has(foreignName)) {\r\n          let queuedExport = fileQueuedExports.get(foreignName)!;\r\n          if (queuedExport.foreignPath) { // imported from another file\r\n            foreignName = queuedExport.localIdentifier.text;\r\n            foreignPath = queuedExport.foreignPath;\r\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\r\n            continue;\r\n          } else { // local element of this file\r\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\r\n            if (element) return element;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Validates that only supported decorators are present. */\r\n  private checkDecorators(\r\n    /** Decorators present on an element. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var flags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        let kind = DecoratorKind.fromNode(decorator.name);\r\n        let flag = DecoratorFlags.fromKind(kind);\r\n        if (flag) {\r\n          if (flag == DecoratorFlags.BUILTIN) {\r\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\r\n              this.error(\r\n                DiagnosticCode.Decorator_0_is_not_valid_here,\r\n                decorator.range, decorator.name.range.toString()\r\n              );\r\n            } else {\r\n              flags |= flag;\r\n            }\r\n          } else if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else if (flags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range\r\n            );\r\n          } else {\r\n            flags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return flags;\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    /** The declaration to initialize. */\r\n    declaration: ClassDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): ClassPrototype | null {\r\n    var name = declaration.name.text;\r\n    var element = new ClassPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.SEALED |\r\n        DecoratorFlags.UNMANAGED\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      // cannot implement interfaces when unmanaged\r\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n      } else if (numImplementsTypes) {\r\n        // remember classes that implement interfaces\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO: not yet supported\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(element);\r\n      }\r\n    }\r\n    // remember classes that extend another class\r\n    if (declaration.extendsType) queuedExtends.push(element);\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\r\n        default: assert(false); // class member expected\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    /** The declaration to initialize. */\r\n    declaration: FieldDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var element: DeclaredElement;\r\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\r\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\r\n      element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(decorators,\r\n          (declaration.is(CommonFlags.READONLY)\r\n            ? DecoratorFlags.INLINE\r\n            : DecoratorFlags.NONE\r\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\r\n        ),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance field\r\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      element = new FieldPrototype(\r\n        name,\r\n        parent,\r\n        declaration,\r\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\r\n      );\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    /** The declaration to initialize. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var isStatic = declaration.is(CommonFlags.STATIC);\r\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\r\n                    |  DecoratorFlags.OPERATOR_PREFIX\r\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, acceptedFlags)\r\n    );\r\n    if (isStatic) { // global function\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance method\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\r\n  }\r\n\r\n  /** Checks that operator overloads are generally valid, if present. */\r\n  private checkOperatorOverloads(\r\n    /** Decorators to check. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Decorated method. */\r\n    prototype: FunctionPrototype,\r\n    /** Parent class. */\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = OperatorKind.fromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(10)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\r\n  private ensureProperty(\r\n    /** The declaration of the getter or setter introducing the property. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): PropertyPrototype | null {\r\n    var name = declaration.name.text;\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let parentMembers = parent.members;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name)!;\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.add(name, element)) return null;\r\n        return element;\r\n      }\r\n    } else {\r\n      let parentMembers = parent.instanceMembers;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name);\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.addInstance(name, element)) return null;\r\n        return element;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Duplicate_property_0,\r\n      declaration.name.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Initializes a property of a class. */\r\n  private initializeProperty(\r\n    /** The declaration of the getter or setter. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var property = this.ensureProperty(declaration, parent);\r\n    if (!property) return;\r\n    var name = declaration.name.text;\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    if (isGetter) {\r\n      if (property.getterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      if (property.setterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\r\n      property,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\r\n      )\r\n    );\r\n    if (isGetter) {\r\n      property.getterPrototype = element;\r\n    } else {\r\n      property.setterPrototype = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum. */\r\n  private initializeEnum(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): Enum | null {\r\n    var name = declaration.name.text;\r\n    var element = new Enum(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.INLINE |\r\n        DecoratorFlags.LAZY\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes an enum value. */\r\n  private initializeEnumValue(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Parent enum. */\r\n    parent: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new EnumValue(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.NONE\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n  }\r\n\r\n  /** Initializes an `export` statement. */\r\n  private initializeExports(\r\n    /** The statement to initialize. */\r\n    statement: ExportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>,\r\n    /** So far queued `export *`s. */\r\n    queuedExportsStar: Map<File,QueuedExportStar[]>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // export { foo, bar } [from \"./baz\"]\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\r\n      }\r\n    } else { // export * from \"./baz\"\r\n      let queued: QueuedExportStar[];\r\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\r\n      else queuedExportsStar.set(parent, queued = []);\r\n      let foreignPath = assert(statement.internalPath); // must be set for export *\r\n      queued.push(new QueuedExportStar(\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX,\r\n        assert(statement.path)\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `export` member. Does not handle `export *`. */\r\n  private initializeExport(\r\n    /** The member to initialize. */\r\n    member: ExportMember,\r\n    /** Local file. */\r\n    localFile: File,\r\n    /** Path to the other file, if present. */\r\n    foreignPath: string | null,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var localName = member.localName.text;\r\n    var foreignName = member.exportedName.text;\r\n\r\n    // check for duplicates\r\n    var element = localFile.lookupExport(foreignName);\r\n    if (element) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.exportedName.range, foreignName\r\n      );\r\n      return;\r\n    }\r\n    // local element, i.e. export { foo [as bar] }\r\n    if (foreignPath === null) {\r\n\r\n      // resolve right away if the local element already exists\r\n      if (element = localFile.lookupInSelf(localName)) {\r\n        localFile.ensureExport(foreignName, element);\r\n\r\n      // otherwise queue it\r\n      } else {\r\n        let queued: Map<string,QueuedExport>;\r\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n        else queuedExports.set(localFile, queued = new Map());\r\n        queued.set(foreignName, new QueuedExport(\r\n          member.localName,\r\n          member.exportedName,\r\n          null, null\r\n        ));\r\n      }\r\n\r\n    // foreign element, i.e. export { foo } from \"./bar\"\r\n    } else {\r\n      let queued: Map<string,QueuedExport>;\r\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n      else queuedExports.set(localFile, queued = new Map());\r\n      queued.set(foreignName, new QueuedExport(\r\n        member.localName,\r\n        member.exportedName,\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX\r\n      ));\r\n    }\r\n  }\r\n\r\n  private initializeExportDefault(\r\n    /** The statement to initialize. */\r\n    statement: ExportDefaultStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: Array<ClassPrototype>,\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var declaration = statement.declaration;\r\n    var element: DeclaredElement | null = null;\r\n    switch (declaration.kind) {\r\n      case NodeKind.ENUMDECLARATION: {\r\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION: {\r\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.CLASSDECLARATION: {\r\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\r\n        break;\r\n      }\r\n      case NodeKind.INTERFACEDECLARATION: {\r\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (element) {\r\n      let exports = parent.exports;\r\n      if (!exports) parent.exports = exports = new Map();\r\n      else if (exports.has(\"default\")) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, \"default\"\r\n        );\r\n        return;\r\n      }\r\n      exports.set(\"default\", element);\r\n    }\r\n  }\r\n\r\n  /** Initializes an `import` statement. */\r\n  private initializeImports(\r\n    /** The statement to initialize. */\r\n    statement: ImportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          parent,\r\n          statement.internalPath,\r\n          queuedImports,\r\n          queuedExports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\r\n      queuedImports.push(new QueuedImport(\r\n        parent,\r\n        statement.namespaceName,\r\n        null, // indicates import *\r\n        statement.internalPath,\r\n        statement.internalPath + INDEX_SUFFIX\r\n      ));\r\n    } else {\r\n      // import \"./foo\"\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\r\n  private initializeImport( // { foo [as bar] }\r\n    /** The declaration to initialize. */\r\n    declaration: ImportDeclaration,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** Path to the other file. */\r\n    foreignPath: string,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n      : foreignPath + INDEX_SUFFIX;\r\n\r\n    // resolve right away if the element exists\r\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\r\n    if (element) {\r\n      parent.add(declaration.name.text, element, true);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    queuedImports.push(new QueuedImport(\r\n      parent,\r\n      declaration.name,\r\n      declaration.foreignName,\r\n      foreignPath,\r\n      foreignPathAlt\r\n    ));\r\n  }\r\n\r\n  /** Initializes a function. Does not handle methods. */\r\n  private initializeFunction(\r\n    /** The declaration to initialize. */\r\n    declaration: FunctionDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): FunctionPrototype | null {\r\n    var name = declaration.name.text;\r\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\r\n    if (declaration.is(CommonFlags.AMBIENT)) {\r\n      validDecorators |= DecoratorFlags.EXTERNAL;\r\n    } else {\r\n      validDecorators |= DecoratorFlags.INLINE;\r\n    }\r\n    if (!declaration.is(CommonFlags.INSTANCE)) {\r\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\r\n        validDecorators |= DecoratorFlags.GLOBAL;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, validDecorators)\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    return element;\r\n  }\r\n\r\n  /** Initializes an interface. */\r\n  private initializeInterface(\r\n    /** The declaration to initialize. */\r\n    declaration: InterfaceDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): InterfacePrototype | null {\r\n    var name = declaration.name.text;\r\n    var element = new InterfacePrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false); // interface member expected\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a namespace. */\r\n  private initializeNamespace(\r\n    /** The declaration to initialize. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): Namespace | null {\r\n    var name = declaration.name.text;\r\n    var original = new Namespace(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\r\n    );\r\n    if (!parent.add(name, original)) return null;\r\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>member, original);\r\n          break;\r\n        }\r\n        default: assert(false); // namespace member expected\r\n      }\r\n    }\r\n    if (original != element) copyMembers(original, element); // retain original parent\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a `type` definition. */\r\n  private initializeTypeDefinition(\r\n    /** The declaration to initialize. */\r\n    declaration: TypeDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new TypeDefinition(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\r\n    );\r\n    parent.add(name, element); // reports\r\n  }\r\n\r\n  /** Initializes a variable statement. */\r\n  private initializeVariables(\r\n    /** The statement to initialize. */\r\n    statement: VariableStatement,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\r\n      if (declaration.is(CommonFlags.DECLARE)) {\r\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\r\n      }\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        acceptedFlags |= DecoratorFlags.INLINE;\r\n      }\r\n      let element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(declaration.decorators, acceptedFlags),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) continue; // reports\r\n    }\r\n  }\r\n\r\n  /** Determines the element type of a built-in array. */\r\n  // determineBuiltinArrayType(target: Class): Type | null {\r\n  //   switch (target.internalName) {\r\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\r\n  //     case BuiltinSymbols.Uint8ClampedArray:\r\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\r\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\r\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\r\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\r\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\r\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\r\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\r\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\r\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\r\n  //   }\r\n  //   var current: Class | null = target;\r\n  //   var arrayPrototype = this.arrayPrototype;\r\n  //   do {\r\n  //     if (current.prototype == arrayPrototype) { // Array<T>\r\n  //       let typeArguments = assert(current.typeArguments);\r\n  //       assert(typeArguments.length == 1);\r\n  //       return typeArguments[0];\r\n  //     }\r\n  //   } while (current = current.base);\r\n  //   return null;\r\n  // }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link PropertyPrototype}.  */\r\n  PROPERTY_PROTOTYPE,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link File}. */\r\n  FILE,\r\n  /** A {@link TypeDefinition}.  */\r\n  TYPEDEFINITION,\r\n  /** An {@link IndexSignature}. */\r\n  INDEXSIGNATURE\r\n}\r\n\r\n/** Indicates built-in decorators that are present. */\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8,\r\n  /** Is compiled lazily. */\r\n  LAZY = 1 << 9,\r\n  /** Is considered unsafe code. */\r\n  UNSAFE = 1 << 10\r\n}\r\n\r\nexport namespace DecoratorFlags {\r\n\r\n  /** Translates a decorator kind to the respective decorator flag. */\r\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\r\n    switch (kind) {\r\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n      case DecoratorKind.OPERATOR:\r\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\r\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\r\n      default: return DecoratorFlags.NONE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Parent element. */\r\n  parent: Element;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Member elements. */\r\n  members: Map<string,DeclaredElement> | null = null;\r\n  /** Shadowing type in type space, if any. */\r\n  shadowType: TypeDefinition | null = null;\r\n\r\n  /** Constructs a new program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    public kind: ElementKind,\r\n    /** Simple name. */\r\n    public name: string,\r\n    /** Internal name referring to this element. */\r\n    public internalName: string,\r\n    /** Containing {@link Program}. */\r\n    public program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null\r\n  ) {\r\n    this.program = program;\r\n    this.name = name;\r\n    this.internalName = internalName;\r\n    if (parent) {\r\n      this.parent = parent;\r\n    } else {\r\n      assert(this.kind == ElementKind.FILE);\r\n      this.parent = this; // special case to keep this.parent non-nullable\r\n    }\r\n  }\r\n\r\n  /** Gets the enclosing file. */\r\n  get file(): File {\r\n    var current: Element = this;\r\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\r\n    while (true);\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Unsets the specific flag or flags. */\r\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n\r\n  /** Looks up the element with the specified name within this element. */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var members = this.members;\r\n    if (members && members.has(name)) return members.get(name)!;\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to this element, like in JS. */\r\n  abstract lookup(name: string): Element | null;\r\n\r\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\r\n  add(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var members = this.members;\r\n    if (!members) this.members = members = new Map();\r\n    else if (members.has(name)) {\r\n      let actual = members.get(name)!;\r\n      if (actual.parent !== this) {\r\n        // override non-own element\r\n      } else {\r\n        let merged = tryMerge(actual, element);\r\n        if (merged) {\r\n          element = merged; // use merged element\r\n        } else {\r\n          this.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, element.identifierNode.text\r\n          );\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    members.set(name, element);\r\n    var program = this.program;\r\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\r\n      // prefer unbound prototypes in global lookup maps\r\n      program.elementsByName.set(element.internalName, element);\r\n      program.elementsByDeclaration.set(originalDeclaration, element);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Returns a string representation of this element. */\r\n  toString(): string {\r\n    return ElementKind[this.kind] + \":\" + this.internalName;\r\n  }\r\n}\r\n\r\n// Kinds of all declared elements\r\nvar declaredElements = new Set<ElementKind>();\r\n\r\n/** Tests if the specified element kind indicates a declared element. */\r\nexport function isDeclaredElement(kind: ElementKind): bool {\r\n  return declaredElements.has(kind);\r\n}\r\n\r\n/** Base class of elements with an associated declaration statement. */\r\nexport abstract class DeclaredElement extends Element {\r\n\r\n  /** Constructs a new declared program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Internal name referring to this element. */\r\n    internalName: string,\r\n    /** Containing {@link Program}. */\r\n    program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null,\r\n    /** Declaration reference. */\r\n    public declaration: DeclarationStatement\r\n  ) {\r\n    super(kind, name, internalName, program, parent);\r\n    declaredElements.add(kind);\r\n    // It is necessary to have access to identifiers of all members and exports\r\n    // for reporting purposes and this is the lowest common denominator. Comes\r\n    // at the expense of not having more specific type information in derived\r\n    // classes, though. Instead, derived classes implement getters for other\r\n    // important AST nodes directly through manual casting, allowing the resolver\r\n    // etc. to not worry about actual declarations.\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags; // inherit\r\n  }\r\n\r\n  /** Tests if this element is a library element. */\r\n  get isDeclaredInLibrary(): bool {\r\n    return this.declaration.range.source.isLibrary;\r\n  }\r\n\r\n  /** Gets the associated identifier node. */\r\n  get identifierNode(): IdentifierExpression {\r\n    return this.declaration.name;\r\n  }\r\n\r\n  /** Gets the assiciated decorator nodes. */\r\n  get decoratorNodes(): DecoratorNode[] | null {\r\n    return this.declaration.decorators;\r\n  }\r\n}\r\n\r\n// Kinds of all typed elements\r\nvar typedElements = new Set<ElementKind>();\r\n\r\n/** Checks if the specified element kind indicates a typed element. */\r\nexport function isTypedElement(kind: ElementKind): bool {\r\n  return typedElements.has(kind);\r\n}\r\n\r\n/** Base class of elements that can be resolved to a concrete type. */\r\nexport abstract class TypedElement extends DeclaredElement {\r\n\r\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\r\n  type: Type = Type.void;\r\n\r\n  constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Internal name referring to this element. */\r\n    internalName: string,\r\n    /** Containing {@link Program}. */\r\n    program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null,\r\n    /** Declaration reference. */\r\n    declaration: DeclarationStatement\r\n  ) {\r\n    super(kind, name, internalName, program, parent, declaration);\r\n    typedElements.add(kind);\r\n  }\r\n\r\n  /** Sets the resolved type of this element. */\r\n  setType(type: Type): void {\r\n    assert(!this.is(CommonFlags.RESOLVED));\r\n    this.type = type;\r\n    this.set(CommonFlags.RESOLVED);\r\n  }\r\n}\r\n\r\n/** A file representing the implicit top-level namespace of a source. */\r\nexport class File extends Element {\r\n\r\n  /** File exports. */\r\n  exports: Map<string,DeclaredElement> | null = null;\r\n  /** File re-exports. */\r\n  exportsStar: File[] | null = null;\r\n  /** Top-level start function of this file. */\r\n  startFunction: Function;\r\n\r\n  /** Constructs a new file. */\r\n  constructor(\r\n    /** Program this file belongs to. */\r\n    program: Program,\r\n    /** Source of this file. */\r\n    public source: Source\r\n  ) {\r\n    super(\r\n      ElementKind.FILE,\r\n      source.normalizedPath,\r\n      source.internalPath,\r\n      program,\r\n      null // special case for files\r\n    );\r\n    this.source = source;\r\n    assert(!program.filesByName.has(this.internalName));\r\n    program.filesByName.set(this.internalName, this);\r\n    var startFunction = this.program.makeNativeFunction(\r\n      \"start:\" + this.internalName,\r\n      new Signature(program, null, Type.void),\r\n      this\r\n    );\r\n    startFunction.internalName = startFunction.name;\r\n    this.startFunction = startFunction;\r\n  }\r\n\r\n  /* @override */\r\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\r\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\r\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\r\n    }\r\n    if (!super.add(name, element)) return false;\r\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\r\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\r\n      this.ensureExport(\r\n        element.name,\r\n        element\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /* @override */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var element = super.lookupInSelf(name);\r\n    if (element) return element;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupInSelf(name);\r\n    if (element) return element;\r\n    return this.program.lookupGlobal(name);\r\n  }\r\n\r\n  /** Ensures that an element is an export of this file. */\r\n  ensureExport(name: string, element: DeclaredElement): void {\r\n    var exports = this.exports;\r\n    if (!exports) this.exports = exports = new Map();\r\n    exports.set(name, element);\r\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\r\n  }\r\n\r\n  /** Ensures that another file is a re-export of this file. */\r\n  ensureExportStar(file: File): void {\r\n    var exportsStar = this.exportsStar;\r\n    if (!exportsStar) this.exportsStar = exportsStar = [];\r\n    else if (exportsStar.includes(file)) return;\r\n    exportsStar.push(file);\r\n  }\r\n\r\n  /** Looks up the export of the specified name. */\r\n  lookupExport(name: string): DeclaredElement | null {\r\n    var exports = this.exports;\r\n    if (exports && exports.has(name)) return exports.get(name)!;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let element = exportsStar[i].lookupExport(name);\r\n        if (element) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Creates an imported namespace from this file. */\r\n  asImportedNamespace(name: string, parent: Element): Namespace {\r\n    var ns = new Namespace(\r\n      name,\r\n      parent,\r\n      this.program.makeNativeNamespaceDeclaration(name)\r\n    );\r\n    var exports = this.exports;\r\n    if (exports) {\r\n      for (let [memberName, member] of exports) {\r\n        ns.add(memberName, member);\r\n      }\r\n    }\r\n    return ns;\r\n  }\r\n}\r\n\r\n/** A type definition. */\r\nexport class TypeDefinition extends TypedElement {\r\n\r\n  /** Constructs a new type definition. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: TypeDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.TYPEDEFINITION,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<TypeDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): TypeNode {\r\n    return (<TypeDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a file in being user-declared with a name. */\r\nexport class Namespace extends DeclaredElement {\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.NAMESPACE,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends TypedElement {\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: EnumDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUM,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** Indicates the kind of an inlined constant value. */\r\nexport const enum ConstantValueKind {\r\n  /** No constant value. */\r\n  NONE,\r\n  /** Constant integer value. */\r\n  INTEGER,\r\n  /** Constant float value. */\r\n  FLOAT\r\n}\r\n\r\n/** Base class of all variable-like program elements. */\r\nexport abstract class VariableLikeElement extends TypedElement {\r\n\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  /** Constructs a new variable-like element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class. */\r\n    parent: Element,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      kind,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Gets the associated type node.s */\r\n  get typeNode(): TypeNode | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\r\n  }\r\n\r\n  /** Applies a constant integer value to this element. */\r\n  setConstantIntegerValue(value: I64, type: Type): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** Applies a constant float value to this element. */\r\n  setConstantFloatValue(value: f64, type: Type): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends VariableLikeElement {\r\n\r\n  /** Constructs a new enum value. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent enum. */\r\n    parent: Enum,\r\n    /** Declaration reference. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUMVALUE,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /** Whether this enum value is immutable. */\r\n  isImmutable: bool = false;\r\n\r\n  /** Gets the associated value node. */\r\n  get valueNode(): Expression | null {\r\n    return (<EnumValueDeclaration>this.declaration).value;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  /** Constructs a new global variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or static class. */\r\n    parent: Element,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.GLOBAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n  /** Constructs a new function parameter. */\r\n  constructor(\r\n    /** Parameter name. */\r\n    public name: string,\r\n    /** Parameter type. */\r\n    public type: Type,\r\n    /** Parameter initializer, if present. */\r\n    public initializer: Expression | null = null\r\n  ) {}\r\n}\r\n\r\n/** A local variable. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  /** Constructs a new local variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\r\n    public index: i32,\r\n    /** Resolved type. */\r\n    type: Type,\r\n    /** Parent function. */\r\n    parent: Function,\r\n    /** Declaration reference. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.LOCAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.index = index;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends DeclaredElement {\r\n\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Function> | null = null;\r\n\r\n  /** Clones of this prototype that are bounds to specific classes. */\r\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    /** Simple name */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class (if a method). */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: FunctionDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<FunctionDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated function type node. */\r\n  get functionTypeNode(): FunctionTypeNode {\r\n    return (<FunctionDeclaration>this.declaration).signature;\r\n  }\r\n\r\n  /** Gets the associated body node. */\r\n  get bodyNode(): Statement | null {\r\n    return (<FunctionDeclaration>this.declaration).body;\r\n  }\r\n\r\n  /** Gets the arrow function kind. */\r\n  get arrowKind(): ArrowKind {\r\n    return (<FunctionDeclaration>this.declaration).arrowKind;\r\n  }\r\n\r\n  /** Tests if this prototype is bound to a class. */\r\n  get isBound(): bool {\r\n    var parent = this.parent;\r\n    return parent.kind == ElementKind.CLASS\r\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\r\n  }\r\n\r\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\r\n  toBound(classInstance: Class): FunctionPrototype {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    assert(!this.isBound);\r\n    var boundPrototypes = this.boundPrototypes;\r\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\r\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\r\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\r\n    var bound = new FunctionPrototype(\r\n      this.name,\r\n      classInstance, // !\r\n      <MethodDeclaration>declaration,\r\n      this.decoratorFlags\r\n    );\r\n    bound.flags = this.flags;\r\n    bound.operatorKind = this.operatorKind;\r\n    // NOTE: this.instances holds instances per bound class / unbound\r\n    boundPrototypes.set(classInstance, bound);\r\n    return bound;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Function | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Function): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends TypedElement {\r\n\r\n  /** Function prototype. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Default control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n\r\n  /** Counting id of inline operations involving this function. */\r\n  nextInlineId: i32 = 0;\r\n  /** Counting id of anonymous inner functions. */\r\n  nextAnonymousId: i32 = 0;\r\n  /** Counting id of autorelease variables. */\r\n  nextAutoreleaseId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** Respective function prototype. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete signature. */\r\n    signature: Signature, // pre-resolved\r\n    /** Contextual type arguments inherited from its parent class, if any. */\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    this.type = Type.u32.asFunction(signature);\r\n    if (!prototype.is(CommonFlags.AMBIENT)) {\r\n      let localIndex = 0;\r\n      if (this.is(CommonFlags.INSTANCE)) {\r\n        let local = new Local(\r\n          CommonSymbols.this_,\r\n          localIndex++,\r\n          assert(signature.thisType),\r\n          this\r\n        );\r\n        this.localsByName.set(CommonSymbols.this_, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType,\r\n          this\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var localName = name !== null\r\n      ? name\r\n      : \"var$\" + localIndex.toString();\r\n    var local = new Local(\r\n      localName,\r\n      localIndex,\r\n      type,\r\n      this,\r\n      declaration || this.program.makeNativeVariableDeclaration(localName)\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var locals = this.localsByName;\r\n    if (locals.has(name)) return locals.get(name);\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  // used by flows to keep track of temporary locals\r\n  tempI32s: Local[] | null = null;\r\n  tempI64s: Local[] | null = null;\r\n  tempF32s: Local[] | null = null;\r\n  tempF64s: Local[] | null = null;\r\n  tempV128s: Local[] | null = null;\r\n\r\n  // used by flows to keep track of break labels\r\n  nextBreakId: i32 = 0;\r\n  breakStack: i32[] | null = null;\r\n  breakLabel: string | null = null;\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakLabel = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(\r\n    /** Concrete signature. */\r\n    signature: Signature,\r\n    /** Program reference. */\r\n    program: Program,\r\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_TARGET,\r\n      __s = \"sig:\" + signature.toSignatureString(),\r\n      __s,\r\n      program,\r\n      program.nativeFile\r\n    );\r\n    this.signature = signature;\r\n    this.flags = CommonFlags.RESOLVED;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return null;\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends DeclaredElement {\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration reference. */\r\n    declaration: FieldDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): TypeNode | null {\r\n    return (<FieldDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<FieldDeclaration>this.declaration).initializer;\r\n  }\r\n\r\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\r\n  get parameterIndex(): i32 {\r\n    return (<FieldDeclaration>this.declaration).parameterIndex;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    /** Respective field prototype. */\r\n    prototype: FieldPrototype,\r\n    /** Parent class. */\r\n    parent: Class,\r\n    /** Concrete type. */\r\n    type: Type\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD,\r\n      prototype.name,\r\n      parent,\r\n      <VariableLikeDeclarationStatement>prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class PropertyPrototype extends DeclaredElement {\r\n\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration of the getter or setter introducing the property. */\r\n    firstDeclaration: FunctionDeclaration\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      firstDeclaration\r\n    );\r\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved property. */\r\nexport class Property extends VariableLikeElement {\r\n\r\n  /** Prototype reference. */\r\n  prototype: PropertyPrototype;\r\n  /** Getter instance. */\r\n  getterInstance: Function | null = null;\r\n  /** Setter instance. */\r\n  setterInstance: Function | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Respective property prototype. */\r\n    prototype: PropertyPrototype,\r\n    /** Parent element, usually a static class prototype or class instance. */\r\n    parent: Element\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY,\r\n      prototype.name,\r\n      parent,\r\n      prototype.program.makeNativeVariableDeclaration(\r\n        prototype.name,\r\n        prototype.is(CommonFlags.INSTANCE)\r\n          ? CommonFlags.INSTANCE\r\n          : CommonFlags.NONE\r\n      )\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An resolved index signature. */\r\nexport class IndexSignature extends VariableLikeElement {\r\n\r\n  /** Constructs a new index prototype. */\r\n  constructor(\r\n    /** Parent class. */\r\n    parent: Class\r\n  ) {\r\n    super(ElementKind.INDEXSIGNATURE, parent.internalName + \"[]\", parent);\r\n  }\r\n\r\n  /** Obtains the getter instance. */\r\n  getGetterInstance(isUnchecked: bool): Function | null {\r\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n  }\r\n\r\n  /** Obtains the setter instance. */\r\n  getSetterInstance(isUnchecked: bool): Function | null {\r\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends DeclaredElement {\r\n\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Class> | null = null;\r\n\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: ClassDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).typeParameters;\r\n  }\r\n  /** Gets the associated extends node. */\r\n  get extendsNode(): NamedTypeNode | null {\r\n    return (<ClassDeclaration>this.declaration).extendsType;\r\n  }\r\n  /** Gets the associated implements nodes. */\r\n  get implementsNodes(): NamedTypeNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).implementsTypes;\r\n  }\r\n\r\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\r\n    return arrayBufferViewInstance !== null\r\n        && this.extends(arrayBufferViewInstance.prototype);\r\n  }\r\n\r\n  /** Tests if this prototype extends the specified. */\r\n  extends(basePtototype: ClassPrototype | null): bool {\r\n    var current: ClassPrototype | null = this;\r\n    do if (current === basePtototype) return true;\r\n    while (current = current.basePrototype);\r\n    return false;\r\n  }\r\n\r\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\r\n  addInstance(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var instanceMembers = this.instanceMembers;\r\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\r\n    else if (instanceMembers.has(name)) {\r\n      let merged = tryMerge(instanceMembers.get(name)!, element);\r\n      if (!merged) {\r\n        this.program.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          element.identifierNode.range, element.identifierNode.text\r\n        );\r\n        return false;\r\n      }\r\n      element = merged;\r\n    }\r\n    instanceMembers.set(name, element);\r\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\r\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\r\n    }\r\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\r\n    return true;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Class | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Class): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\nconst enum AcyclicState {\r\n  UNKNOWN,\r\n  ACYCLIC,\r\n  NOT_ACYCLIC\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends TypedElement {\r\n\r\n  /** Class prototype. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Index signature, if present. */\r\n  indexSignature: IndexSignature | null = null;\r\n  /** Unique class id. */\r\n  private _id: u32 = 0;\r\n  /** Remembers acyclic state. */\r\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\r\n  /** Runtime type information flags. */\r\n  rttiFlags: u32 = 0;\r\n  /** Wrapped type, if a wrapper for a basic type. */\r\n  wrappedType: Type | null = null;\r\n\r\n  /** Gets the unique runtime id of this class. */\r\n  get id(): u32 {\r\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\r\n  }\r\n\r\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    return this.prototype.isBuiltinArray;\r\n  }\r\n\r\n  /** Tests if this class is array-like. */\r\n  get isArrayLike(): bool {\r\n    if (this.isBuiltinArray) return true;\r\n    var lengthField = this.lookupInSelf(\"length\");\r\n    return lengthField !== null && (\r\n      lengthField.kind == ElementKind.FIELD ||\r\n      (\r\n        lengthField.kind == ElementKind.PROPERTY &&\r\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\r\n      )\r\n    ) && (\r\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\r\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\r\n    );\r\n  }\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** The respective class prototype. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments, if any. */\r\n    typeArguments: Type[] | null = null,\r\n    /** Base class, if derived. */\r\n    base: Class | null = null,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    var program = this.program;\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.setType(program.options.usizeType.asClass(this));\r\n    this.base = base;\r\n\r\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n      let id = program.nextClassId++;\r\n      this._id = id;\r\n      program.managedClasses.set(id, this);\r\n    }\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        let contextualTypeArguments = this.contextualTypeArguments;\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\r\n          contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply pre-checked instance-specific contextual type arguments\r\n    var typeParameters = prototype.typeParameterNodes;\r\n    if (typeArguments) {\r\n      let numTypeArguments = typeArguments.length;\r\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      if (numTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let i = 0; i < numTypeArguments; ++i) {\r\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n        }\r\n      }\r\n    } else if (typeParameters && typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n    registerConcreteElement(program, this);\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  /** Calculates the memory offset of the specified field. */\r\n  offsetof(fieldName: string): u32 {\r\n    var members = assert(this.members);\r\n    assert(members.has(fieldName));\r\n    var field = <Element>members.get(fieldName);\r\n    assert(field.kind == ElementKind.FIELD);\r\n    return (<Field>field).memoryOffset;\r\n  }\r\n\r\n  /** Writes a field value to a buffer and returns the number of bytes written. */\r\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\r\n    var field = this.lookupInSelf(name);\r\n    if (field && field.kind == ElementKind.FIELD) {\r\n      let offset = baseOffset + (<Field>field).memoryOffset;\r\n      switch ((<Field>field).type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8: {\r\n          writeI8(i32(value), buffer, offset);\r\n          return 1;\r\n        }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: {\r\n          writeI16(i32(value), buffer, offset);\r\n          return 2;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          assert(!this.program.options.isWasm64); // TODO\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F32: {\r\n          writeF32(f32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F64: {\r\n          writeF64(f64(value), buffer, offset);\r\n          return 8;\r\n        }\r\n      }\r\n    }\r\n    assert(false);\r\n    return 0;\r\n  }\r\n\r\n  /** Tests if this class extends the specified prototype. */\r\n  extends(prototype: ClassPrototype): bool {\r\n    return this.prototype.extends(prototype);\r\n  }\r\n\r\n  /** Gets the concrete type arguments to the specified extendend prototype. */\r\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\r\n    var current: Class | null = this;\r\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\r\n    while (current = current.base);\r\n    return null;\r\n  }\r\n\r\n  /** Gets the value type of an array. Must be an array. */\r\n  getArrayValueType(): Type {\r\n    var current: Class = this;\r\n    var program = this.program;\r\n    var abvInstance = program.arrayBufferViewInstance;\r\n    while (current.base !== abvInstance) {\r\n      current = assert(current.base);\r\n    }\r\n    switch (current.prototype) {\r\n      case program.i8ArrayPrototype: return Type.i8;\r\n      case program.i16ArrayPrototype: return Type.i16;\r\n      case program.i32ArrayPrototype: return Type.i32;\r\n      case program.i64ArrayPrototype: return Type.i64;\r\n      case program.u8ArrayPrototype:\r\n      case program.u8ClampedArrayPrototype: return Type.u8;\r\n      case program.u16ArrayPrototype: return Type.u16;\r\n      case program.u32ArrayPrototype: return Type.u32;\r\n      case program.u64ArrayPrototype: return Type.u64;\r\n      case program.f32ArrayPrototype: return Type.f32;\r\n      case program.f64ArrayPrototype: return Type.f64;\r\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\r\n      default: assert(false);\r\n    }\r\n    return Type.void;\r\n  }\r\n\r\n  /** Tests if this class is inherently acyclic. */\r\n  get isAcyclic(): bool {\r\n    var acyclic = this._acyclic;\r\n    if (acyclic == AcyclicState.UNKNOWN) {\r\n      let hasCycle = this.cyclesTo(this);\r\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\r\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\r\n    }\r\n    return acyclic == AcyclicState.ACYCLIC;\r\n  }\r\n\r\n  /** Tests if this class potentially forms a reference cycle to another one. */\r\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\r\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\r\n    //\r\n    // - scalars\r\n    // - references to classes that are both acyclic and final (here: Java); and\r\n    // - arrays (in our case: also sets, maps) of either of the above\r\n    //\r\n    // Our implementation, however, treats all objects that do not reference themselves directly\r\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\r\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\r\n\r\n    if (except.has(this)) return false;\r\n    except.add(this); // don't recurse indefinitely\r\n\r\n    // Find out if any field references 'other' directly or indirectly\r\n    var current: Class | null;\r\n    var members = this.members;\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        if (member.kind == ElementKind.FIELD) {\r\n          let type = (<Field>member).type;\r\n          if (type.is(TypeFlags.REFERENCE)) {\r\n            if ((current = type.classReference) !== null && (\r\n              current === other ||\r\n              current.cyclesTo(other, except)\r\n            )) return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Do the same for non-field data\r\n    var basePrototype: ClassPrototype | null;\r\n\r\n    // Array<T->other?>\r\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Set<K->other?>\r\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Map<K->other?,V->other?>\r\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 2);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n      if (\r\n        (current = typeArguments[1].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype { // FIXME\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    name: string,\r\n    parent: Element,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      decoratorFlags,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class { // FIXME\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    nameInclTypeParameters: string,\r\n    prototype: InterfacePrototype,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      typeArguments,\r\n      base,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** Registers a concrete element with a program. */\r\nfunction registerConcreteElement(program: Program, element: Element): void {\r\n  assert(!program.instancesByName.has(element.internalName));\r\n  program.instancesByName.set(element.internalName, element);\r\n}\r\n\r\n/** Attempts to merge two elements. Returns the merged element on success. */\r\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\r\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\r\n  // suggesting to just merge what seems to be possible for now and revisit later.\r\n  assert(older.program === newer.program);\r\n  assert(!newer.members);\r\n  var merged: DeclaredElement | null = null;\r\n  switch (older.kind) {\r\n    case ElementKind.FUNCTION_PROTOTYPE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.CLASS_PROTOTYPE:\r\n    case ElementKind.ENUM: {\r\n      if (newer.kind == ElementKind.NAMESPACE) {\r\n        copyMembers(newer, older);\r\n        merged = <DeclaredElement>older;\r\n        break;\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.NAMESPACE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.ENUM:\r\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\r\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\r\n          copyMembers(older, newer);\r\n          merged = <DeclaredElement>newer;\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.GLOBAL: {\r\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\r\n        if (!older.shadowType) {\r\n          older.shadowType = <TypeDefinition>newer;\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.TYPEDEFINITION: {\r\n      switch (newer.kind) {\r\n        case ElementKind.GLOBAL:\r\n        case ElementKind.FUNCTION_PROTOTYPE:\r\n        case ElementKind.NAMESPACE: {\r\n          if (!newer.shadowType) {\r\n            newer.shadowType = <TypeDefinition>older;\r\n            copyMembers(older, newer);\r\n            merged = <DeclaredElement>newer;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  if (merged) {\r\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\r\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\r\n    if (olderIsExport != newerIsExport) {\r\n      older.program.error(\r\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n        merged.identifierNode.range, merged.identifierNode.text\r\n      );\r\n    }\r\n  }\r\n  return merged;\r\n}\r\n\r\n/** Copies the members of `src` to `dest`. */\r\nfunction copyMembers(src: Element, dest: Element): void {\r\n  var srcMembers = src.members;\r\n  if (srcMembers) {\r\n    let destMembers = dest.members;\r\n    if (!destMembers) dest.members = destMembers = new Map();\r\n    for (let [memberName, member] of srcMembers) {\r\n      destMembers.set(memberName, member);\r\n    }\r\n  }\r\n}\r\n\r\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\r\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\r\n  switch (parent.kind) {\r\n    case ElementKind.FILE: {\r\n      if (asGlobal) return name;\r\n      return parent.internalName + PATH_DELIMITER + name;\r\n    }\r\n    case ElementKind.FUNCTION: {\r\n      if (asGlobal) return name;\r\n      assert(!isInstance);\r\n      return parent.internalName + INNER_DELIMITER + name;\r\n    }\r\n    default: {\r\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\r\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport { Target } from \"./common\";\r\nimport { Type } from \"./types\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type EventRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type RelooperRef = usize;\r\nexport type RelooperBlockRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32  = _BinaryenTypeInt32(),\r\n  I64  = _BinaryenTypeInt64(),\r\n  F32  = _BinaryenTypeFloat32(),\r\n  F64  = _BinaryenTypeFloat64(),\r\n  V128 = _BinaryenTypeVec128(),\r\n  Anyref = _BinaryenTypeAnyref(),\r\n  Exnref = _BinaryenTypeExnref(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum FeatureFlags {\r\n  MVP = _BinaryenFeatureMVP(),\r\n  Atomics = _BinaryenFeatureAtomics(),\r\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\r\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\r\n  SIMD128 = _BinaryenFeatureSIMD128(),\r\n  BulkMemory = _BinaryenFeatureBulkMemory(),\r\n  SignExt = _BinaryenFeatureSignExt(),\r\n  ExceptionHandling = _BinaryenFeatureExceptionHandling(),\r\n  TailCall = _BinaryenFeatureTailCall(),\r\n  ReferenceTypes = _BinaryenFeatureReferenceTypes(),\r\n  All = _BinaryenFeatureAll()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  LocalGet = _BinaryenLocalGetId(),\r\n  LocalSet = _BinaryenLocalSetId(),\r\n  GlobalGet = _BinaryenGlobalGetId(),\r\n  GlobalSet = _BinaryenGlobalSetId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicNotify = _BinaryenAtomicNotifyId(),\r\n  AtomicFence = _BinaryenAtomicFenceId(),\r\n  SIMDExtract = _BinaryenSIMDExtractId(),\r\n  SIMDReplace = _BinaryenSIMDReplaceId(),\r\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\r\n  SIMDTernary = _BinaryenSIMDTernaryId(),\r\n  SIMDShift = _BinaryenSIMDShiftId(),\r\n  MemoryInit = _BinaryenMemoryInitId(),\r\n  DataDrop = _BinaryenDataDropId(),\r\n  MemoryCopy = _BinaryenMemoryCopyId(),\r\n  MemoryFill = _BinaryenMemoryFillId(),\r\n  Try = _BinaryenTryId(),\r\n  Throw = _BinaryenThrowId(),\r\n  Rethrow = _BinaryenRethrowId(),\r\n  BrOnExn = _BinaryenBrOnExnId(),\r\n  Push = _BinaryenPushId(),\r\n  Pop = _BinaryenPopId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  TruncF32ToI32Sat = _BinaryenTruncSatSFloat32ToInt32(),\r\n  TruncF32ToU32Sat = _BinaryenTruncSatUFloat32ToInt32(),\r\n  TruncF64ToI32Sat = _BinaryenTruncSatSFloat64ToInt32(),\r\n  TruncF64ToU32Sat = _BinaryenTruncSatUFloat64ToInt32(),\r\n  TruncF32ToI64Sat = _BinaryenTruncSatSFloat32ToInt64(),\r\n  TruncF32ToU64Sat = _BinaryenTruncSatUFloat32ToInt64(),\r\n  TruncF64ToI64Sat = _BinaryenTruncSatSFloat64ToInt64(),\r\n  TruncF64ToU64Sat = _BinaryenTruncSatUFloat64ToInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  SplatI8x16 = _BinaryenSplatVecI8x16(),\r\n  SplatI16x8 = _BinaryenSplatVecI16x8(),\r\n  SplatI32x4 = _BinaryenSplatVecI32x4(),\r\n  SplatI64x2 = _BinaryenSplatVecI64x2(),\r\n  SplatF32x4 = _BinaryenSplatVecF32x4(),\r\n  SplatF64x2 = _BinaryenSplatVecF64x2(),\r\n  NotV128 = _BinaryenNotVec128(),\r\n  NegI8x16 = _BinaryenNegVecI8x16(),\r\n  AnyTrueI8x16 = _BinaryenAnyTrueVecI8x16(),\r\n  AllTrueI8x16 = _BinaryenAllTrueVecI8x16(),\r\n  NegI16x8 = _BinaryenNegVecI16x8(),\r\n  AnyTrueI16x8 = _BinaryenAnyTrueVecI16x8(),\r\n  AllTrueI16x8 = _BinaryenAllTrueVecI16x8(),\r\n  NegI32x4 = _BinaryenNegVecI32x4(),\r\n  AnyTrueI32x4 = _BinaryenAnyTrueVecI32x4(),\r\n  AllTrueI32x4 = _BinaryenAllTrueVecI32x4(),\r\n  NegI64x2 = _BinaryenNegVecI64x2(),\r\n  AnyTrueI64x2 = _BinaryenAnyTrueVecI64x2(),\r\n  AllTrueI64x2 = _BinaryenAllTrueVecI64x2(),\r\n  AbsF32x4 = _BinaryenAbsVecF32x4(),\r\n  NegF32x4 = _BinaryenNegVecF32x4(),\r\n  SqrtF32x4 = _BinaryenSqrtVecF32x4(),\r\n  AbsF64x2 = _BinaryenAbsVecF64x2(),\r\n  NegF64x2 = _BinaryenNegVecF64x2(),\r\n  SqrtF64x2 = _BinaryenSqrtVecF64x2(),\r\n  TruncSatF32x4ToI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\r\n  TruncSatF32x4ToU32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\r\n  TruncSatF64x2ToI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\r\n  TruncSatF64x2ToU64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\r\n  ConvertI32x4ToF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\r\n  ConvertU32x4ToF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\r\n  ConvertI64x2ToF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\r\n  ConvertU64x2ToF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\r\n  WidenLowI8x16ToI16x8 = _BinaryenWidenLowSVecI8x16ToVecI16x8(),\r\n  WidenLowU8x16ToU16x8 = _BinaryenWidenLowUVecI8x16ToVecI16x8(),\r\n  WidenHighI8x16ToI16x8 = _BinaryenWidenHighSVecI8x16ToVecI16x8(),\r\n  WidenHighU8x16ToU16x8 = _BinaryenWidenHighUVecI8x16ToVecI16x8(),\r\n  WidenLowI16x8ToI32x4 = _BinaryenWidenLowSVecI16x8ToVecI32x4(),\r\n  WidenLowU16x8ToU32x4 = _BinaryenWidenLowUVecI16x8ToVecI32x4(),\r\n  WidenHighI16x8ToI32x4 = _BinaryenWidenHighSVecI16x8ToVecI32x4(),\r\n  WidenHighU16x8ToU32x4 = _BinaryenWidenHighUVecI16x8ToVecI32x4()\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64(),\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  EqI8x16 = _BinaryenEqVecI8x16(),\r\n  NeI8x16 = _BinaryenNeVecI8x16(),\r\n  LtI8x16 = _BinaryenLtSVecI8x16(),\r\n  LtU8x16 = _BinaryenLtUVecI8x16(),\r\n  LeI8x16 = _BinaryenLeSVecI8x16(),\r\n  LeU8x16 = _BinaryenLeUVecI8x16(),\r\n  GtI8x16 = _BinaryenGtSVecI8x16(),\r\n  GtU8x16 = _BinaryenGtUVecI8x16(),\r\n  GeI8x16 = _BinaryenGeSVecI8x16(),\r\n  GeU8x16 = _BinaryenGeUVecI8x16(),\r\n  EqI16x8 = _BinaryenEqVecI16x8(),\r\n  NeI16x8 = _BinaryenNeVecI16x8(),\r\n  LtI16x8 = _BinaryenLtSVecI16x8(),\r\n  LtU16x8 = _BinaryenLtUVecI16x8(),\r\n  LeI16x8 = _BinaryenLeSVecI16x8(),\r\n  LeU16x8 = _BinaryenLeUVecI16x8(),\r\n  GtI16x8 = _BinaryenGtSVecI16x8(),\r\n  GtU16x8 = _BinaryenGtUVecI16x8(),\r\n  GeI16x8 = _BinaryenGeSVecI16x8(),\r\n  GeU16x8 = _BinaryenGeUVecI16x8(),\r\n  EqI32x4 = _BinaryenEqVecI32x4(),\r\n  NeI32x4 = _BinaryenNeVecI32x4(),\r\n  LtI32x4 = _BinaryenLtSVecI32x4(),\r\n  LtU32x4 = _BinaryenLtUVecI32x4(),\r\n  LeI32x4 = _BinaryenLeSVecI32x4(),\r\n  LeU32x4 = _BinaryenLeUVecI32x4(),\r\n  GtI32x4 = _BinaryenGtSVecI32x4(),\r\n  GtU32x4 = _BinaryenGtUVecI32x4(),\r\n  GeI32x4 = _BinaryenGeSVecI32x4(),\r\n  GeU32x4 = _BinaryenGeUVecI32x4(),\r\n  EqF32x4 = _BinaryenEqVecF32x4(),\r\n  NeF32x4 = _BinaryenNeVecF32x4(),\r\n  LtF32x4 = _BinaryenLtVecF32x4(),\r\n  LeF32x4 = _BinaryenLeVecF32x4(),\r\n  GtF32x4 = _BinaryenGtVecF32x4(),\r\n  GeF32x4 = _BinaryenGeVecF32x4(),\r\n  EqF64x2 = _BinaryenEqVecF64x2(),\r\n  NeF64x2 = _BinaryenNeVecF64x2(),\r\n  LtF64x2 = _BinaryenLtVecF64x2(),\r\n  LeF64x2 = _BinaryenLeVecF64x2(),\r\n  GtF64x2 = _BinaryenGtVecF64x2(),\r\n  GeF64x2 = _BinaryenGeVecF64x2(),\r\n  AndV128 = _BinaryenAndVec128(),\r\n  OrV128 = _BinaryenOrVec128(),\r\n  XorV128 = _BinaryenXorVec128(),\r\n  AddI8x16 = _BinaryenAddVecI8x16(),\r\n  AddSatI8x16 = _BinaryenAddSatSVecI8x16(),\r\n  AddSatU8x16 = _BinaryenAddSatUVecI8x16(),\r\n  SubI8x16 = _BinaryenSubVecI8x16(),\r\n  SubSatI8x16 = _BinaryenSubSatSVecI8x16(),\r\n  SubSatU8x16 = _BinaryenSubSatUVecI8x16(),\r\n  MulI8x16 = _BinaryenMulVecI8x16(),\r\n  AddI16x8 = _BinaryenAddVecI16x8(),\r\n  AddSatI16x8 = _BinaryenAddSatSVecI16x8(),\r\n  AddSatU16x8 = _BinaryenAddSatUVecI16x8(),\r\n  SubI16x8 = _BinaryenSubVecI16x8(),\r\n  SubSatI16x8 = _BinaryenSubSatSVecI16x8(),\r\n  SubSatU16x8 = _BinaryenSubSatUVecI16x8(),\r\n  MulI16x8 = _BinaryenMulVecI16x8(),\r\n  AddI32x4 = _BinaryenAddVecI32x4(),\r\n  SubI32x4 = _BinaryenSubVecI32x4(),\r\n  MulI32x4 = _BinaryenMulVecI32x4(),\r\n  AddI64x2 = _BinaryenAddVecI64x2(),\r\n  SubI64x2 = _BinaryenSubVecI64x2(),\r\n  AddF32x4 = _BinaryenAddVecF32x4(),\r\n  SubF32x4 = _BinaryenSubVecF32x4(),\r\n  MulF32x4 = _BinaryenMulVecF32x4(),\r\n  DivF32x4 = _BinaryenDivVecF32x4(),\r\n  MinF32x4 = _BinaryenMinVecF32x4(),\r\n  MaxF32x4 = _BinaryenMaxVecF32x4(),\r\n  AddF64x2 = _BinaryenAddVecF64x2(),\r\n  SubF64x2 = _BinaryenSubVecF64x2(),\r\n  MulF64x2 = _BinaryenMulVecF64x2(),\r\n  DivF64x2 = _BinaryenDivVecF64x2(),\r\n  MinF64x2 = _BinaryenMinVecF64x2(),\r\n  MaxF64x2 = _BinaryenMaxVecF64x2(),\r\n  NarrowI16x8ToI8x16 = _BinaryenNarrowSVecI16x8ToVecI8x16(),\r\n  NarrowU16x8ToU8x16 = _BinaryenNarrowUVecI16x8ToVecI8x16(),\r\n  NarrowI32x4ToI16x8 = _BinaryenNarrowSVecI32x4ToVecI16x8(),\r\n  NarrowU32x4ToU16x8 = _BinaryenNarrowUVecI32x4ToVecI16x8()\r\n}\r\n\r\nexport enum HostOp {\r\n  MemorySize = _BinaryenMemorySize(),\r\n  MemoryGrow = _BinaryenMemoryGrow(),\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport enum SIMDExtractOp {\r\n  ExtractLaneI8x16 = _BinaryenExtractLaneSVecI8x16(),\r\n  ExtractLaneU8x16 = _BinaryenExtractLaneUVecI8x16(),\r\n  ExtractLaneI16x8 = _BinaryenExtractLaneSVecI16x8(),\r\n  ExtractLaneU16x8 = _BinaryenExtractLaneUVecI16x8(),\r\n  ExtractLaneI32x4 = _BinaryenExtractLaneVecI32x4(),\r\n  ExtractLaneI64x2 = _BinaryenExtractLaneVecI64x2(),\r\n  ExtractLaneF32x4 = _BinaryenExtractLaneVecF32x4(),\r\n  ExtractLaneF64x2 = _BinaryenExtractLaneVecF64x2(),\r\n}\r\n\r\nexport enum SIMDReplaceOp {\r\n  ReplaceLaneI8x16 = _BinaryenReplaceLaneVecI8x16(),\r\n  ReplaceLaneI16x8 = _BinaryenReplaceLaneVecI16x8(),\r\n  ReplaceLaneI32x4 = _BinaryenReplaceLaneVecI32x4(),\r\n  ReplaceLaneI64x2 = _BinaryenReplaceLaneVecI64x2(),\r\n  ReplaceLaneF32x4 = _BinaryenReplaceLaneVecF32x4(),\r\n  ReplaceLaneF64x2 = _BinaryenReplaceLaneVecF64x2()\r\n}\r\n\r\nexport enum SIMDShiftOp {\r\n  ShlI8x16 = _BinaryenShlVecI8x16(),\r\n  ShrI8x16 = _BinaryenShrSVecI8x16(),\r\n  ShrU8x16 = _BinaryenShrUVecI8x16(),\r\n  ShlI16x8 = _BinaryenShlVecI16x8(),\r\n  ShrI16x8 = _BinaryenShrSVecI16x8(),\r\n  ShrU16x8 = _BinaryenShrUVecI16x8(),\r\n  ShlI32x4 = _BinaryenShlVecI32x4(),\r\n  ShrI32x4 = _BinaryenShrSVecI32x4(),\r\n  ShrU32x4 = _BinaryenShrUVecI32x4(),\r\n  ShlI64x2 = _BinaryenShlVecI64x2(),\r\n  ShrI64x2 = _BinaryenShrSVecI64x2(),\r\n  ShrU64x2 = _BinaryenShrUVecI64x2()\r\n}\r\n\r\nexport enum SIMDTernaryOp {\r\n  Bitselect = _BinaryenBitselectVec128(),\r\n  QFMAF32x4 = _BinaryenQFMAVecF32x4(),\r\n  QFMSF32x4 = _BinaryenQFMSVecF32x4(),\r\n  QFMAF64x2 = _BinaryenQFMAVecF64x2(),\r\n  QFMSF64x2 = _BinaryenQFMSVecF64x2()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private lit: usize;\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunctionType(this.ref, cStr);\r\n  }\r\n\r\n  // constants\r\n\r\n  i32(value: i32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  f32(value: f32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  f64(value: f64): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  v128(bytes: Uint8Array): ExpressionRef {\r\n    assert(bytes.length == 16);\r\n    var out = this.lit;\r\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\r\n    _BinaryenLiteralVec128(out, out);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  unary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  binary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  host(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  local_get(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalGet(this.ref, index, type);\r\n  }\r\n\r\n  local_tee(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalTee(this.ref, index, value);\r\n  }\r\n\r\n  global_get(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalGet(this.ref, cStr, type);\r\n  }\r\n\r\n  load(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\r\n  }\r\n\r\n  store(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\r\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\r\n  }\r\n\r\n  atomic_load(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  atomic_store(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  atomic_rmw(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  atomic_cmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  atomic_wait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  atomic_notify(\r\n    ptr: ExpressionRef,\r\n    notifyCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\r\n  }\r\n\r\n  atomic_fence(): ExpressionRef {\r\n    return _BinaryenAtomicFence(this.ref);\r\n  }\r\n\r\n  // statements\r\n\r\n  local_set(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalSet(this.ref, index, value);\r\n  }\r\n\r\n  global_set(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalSet(this.ref, cStr, value);\r\n  }\r\n\r\n  block(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  br(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenBreak(this.ref, cStr, condition, value);\r\n  }\r\n\r\n  drop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  loop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenLoop(this.ref, cStr, body);\r\n  }\r\n\r\n  if(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  nop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  return(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  select(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  switch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = this.allocStringCached(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = this.allocStringCached(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  call(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType,\r\n    isReturn: bool = false\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return isReturn\r\n        ? _BinaryenReturnCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType)\r\n        : _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  return_call(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    return this.call(target, operands, returnType, true);\r\n  }\r\n\r\n  call_indirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string,\r\n    isReturn: bool = false\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(typeName);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return isReturn\r\n        ? _BinaryenReturnCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr)\r\n        : _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  return_call_indirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string,\r\n  ): ExpressionRef {\r\n    return this.call_indirect(index, operands, typeName, true);\r\n  }\r\n\r\n  unreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // bulk memory\r\n\r\n  memory_copy(\r\n    dest: ExpressionRef,\r\n    source: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\r\n  }\r\n\r\n  memory_fill(\r\n    dest: ExpressionRef,\r\n    value: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\r\n  }\r\n\r\n  // exception handling\r\n\r\n  try(\r\n    body: ExpressionRef,\r\n    catchBody: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTry(this.ref, body, catchBody);\r\n  }\r\n\r\n  throw(\r\n    eventName: string,\r\n    operands: ExpressionRef[]\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(eventName);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenThrow(this.ref, cStr, cArr, operands.length);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  rethrow(\r\n    exnref: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenRethrow(this.ref, exnref);\r\n  }\r\n\r\n  br_on_exn(\r\n    name: string,\r\n    eventName: string,\r\n    exnref: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr1 = this.allocStringCached(name);\r\n    var cStr2 = this.allocStringCached(eventName);\r\n    return _BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\r\n  }\r\n\r\n  // push / pop (multi value?)\r\n\r\n  push(\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenPush(this.ref, value);\r\n  }\r\n\r\n  pop(\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenPop(this.ref, type);\r\n  }\r\n\r\n  // simd\r\n\r\n  simd_extract(\r\n    op: SIMDExtractOp,\r\n    vec: ExpressionRef,\r\n    idx: u8\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\r\n  }\r\n\r\n  simd_replace(\r\n    op: SIMDReplaceOp,\r\n    vec: ExpressionRef,\r\n    idx: u8,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\r\n  }\r\n\r\n  simd_shuffle(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    mask: Uint8Array\r\n  ): ExpressionRef {\r\n    assert(mask.length == 16);\r\n    var cArr = allocU8Array(mask);\r\n    try {\r\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  simd_ternary(\r\n    op: BinaryenSIMDOp,\r\n    a: ExpressionRef,\r\n    b: ExpressionRef,\r\n    c: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDTernary(this.ref, op, a, b, c);\r\n  }\r\n\r\n  simd_shift(\r\n    op: SIMDShiftOp,\r\n    vec: ExpressionRef,\r\n    shift: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n  }\r\n\r\n  removeGlobal(\r\n    name: string\r\n  ): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveGlobal(this.ref, cStr);\r\n  }\r\n\r\n  addEvent(\r\n    name: string,\r\n    attribute: u32,\r\n    type: FunctionRef\r\n  ): EventRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenAddEvent(this.ref, cStr, attribute, type);\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getFunction(\r\n    name: string\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGetFunction(this.ref, cStr);\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunction(this.ref, cStr);\r\n  }\r\n\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addEventExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddEventExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = this.allocStringCached(externalName);\r\n    _BinaryenRemoveExport(this.ref, cStr);\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): void {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): void {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    shared: bool = false,\r\n  ): void {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType,\r\n    mutable: bool = false\r\n  ): void {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\r\n  }\r\n\r\n  addEventImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    attribute: u32,\r\n    eventType: FunctionTypeRef\r\n  ): void {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    _BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, eventType);\r\n  }\r\n\r\n  /** Unlimited memory constant. */\r\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null,\r\n    shared: bool = false\r\n  ): void {\r\n    var cStr = this.allocStringCached(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var psvs = new Array<i8>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      psvs[i] = 0; // no passive segments currently\r\n      offs[i] = target == Target.WASM64\r\n        ? this.i64(i64_low(offset), i64_high(offset))\r\n        : this.i32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocU8Array(psvs);\r\n    var cArr3 = allocI32Array(offs);\r\n    var cArr4 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\r\n    } finally {\r\n      memory.free(cArr4);\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(\r\n    initial: Index,\r\n    maximum: Index,\r\n    funcs: string[]\r\n  ): void {\r\n    var numNames = funcs.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = this.allocStringCached(funcs[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  getFeatures(): BinaryenFeatureFlags {\r\n    return _BinaryenModuleGetFeatures(this.ref);\r\n  }\r\n\r\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\r\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      this.cachedPrecomputeNames = names = allocI32Array([\r\n        this.allocStringCached(\"vacuum\"),\r\n        this.allocStringCached(\"precompute\")\r\n      ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\r\n      expr = _BinaryenReturnGetValue(expr);\r\n    }\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.lit; // safe to reuse as long as..\r\n    assert(_BinaryenSizeofLiteral() >= 12);\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  private cachedStrings: Map<string,usize> = new Map();\r\n\r\n  private allocStringCached(str: string | null): usize {\r\n    if (str == null) return 0;\r\n    var cachedStrings = this.cachedStrings;\r\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\r\n    var ptr = allocString(str);\r\n    cachedStrings.set(str, ptr);\r\n    return ptr;\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\r\n    this.cachedStrings = new Map();\r\n    memory.free(this.lit);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    this.cachedPrecomputeNames = 0;\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n    switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.i32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.i64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.f32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.f64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          case NativeType.V128: {\r\n            // TODO\r\n            return 0;\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        return _BinaryenLocalGet(this.ref,\r\n          _BinaryenLocalGetGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GlobalGet: {\r\n        let globalName = _BinaryenGlobalGetGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalGetGetIndex(expr);\r\n}\r\n\r\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalSetGetIndex(expr);\r\n}\r\n\r\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLocalSetGetValue(expr);\r\n}\r\n\r\nexport function isLocalTee(expr: ExpressionRef): bool {\r\n  return _BinaryenLocalSetIsTee(expr);\r\n}\r\n\r\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenGlobalGetGetName(expr));\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\r\n  return _BinaryenCallGetNumOperands(expr);\r\n}\r\n\r\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenCallGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate(module.ref);\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    condition: ExpressionRef = 0,\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    indexes: i32[],\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   // TODO: there's more\r\n//   switch (_BinaryenExpressionGetId(expr)) {\r\n//     case ExpressionId.LocalGet:\r\n//     case ExpressionId.GlobalGet:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\r\n\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/** Traverses all expression members of an expression, calling the given visitor. */\r\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\r\n  switch (getExpressionId(expr)) {\r\n    case ExpressionId.Block: {\r\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\r\n        visit(_BinaryenBlockGetChild(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.If: {\r\n      visit(_BinaryenIfGetCondition(expr), data);\r\n      visit(_BinaryenIfGetIfTrue(expr), data);\r\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\r\n      if (ifFalse) visit(ifFalse, data);\r\n      break;\r\n    }\r\n    case ExpressionId.Loop: {\r\n      visit(_BinaryenLoopGetBody(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Break: {\r\n      let condition = _BinaryenBreakGetCondition(expr);\r\n      if (condition) visit(condition, data);\r\n      break;\r\n    }\r\n    case ExpressionId.Switch: {\r\n      visit(_BinaryenSwitchGetCondition(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Call: {\r\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenCallGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.CallIndirect: {\r\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.LocalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.LocalSet: {\r\n      visit(_BinaryenLocalSetGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalSet: {\r\n      visit(_BinaryenGlobalSetGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Load: {\r\n      visit(_BinaryenLoadGetPtr(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Store: {\r\n      visit(_BinaryenStoreGetPtr(expr), data);\r\n      visit(_BinaryenStoreGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicRMW: {\r\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\r\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicCmpxchg: {\r\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\r\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\r\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicWait: {\r\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\r\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\r\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicNotify: {\r\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicFence: {\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDExtract: {\r\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDReplace: {\r\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\r\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShuffle: {\r\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\r\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDTernary: {\r\n      visit(_BinaryenSIMDTernaryGetA(expr), data);\r\n      visit(_BinaryenSIMDTernaryGetB(expr), data);\r\n      visit(_BinaryenSIMDTernaryGetC(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShift: {\r\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\r\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryInit: {\r\n      visit(_BinaryenMemoryInitGetDest(expr), data);\r\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\r\n      visit(_BinaryenMemoryInitGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.DataDrop: {\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryCopy: {\r\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\r\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\r\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryFill: {\r\n      visit(_BinaryenMemoryFillGetDest(expr), data);\r\n      visit(_BinaryenMemoryFillGetValue(expr), data);\r\n      visit(_BinaryenMemoryFillGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Try: {\r\n      visit(_BinaryenTryGetBody(expr), data);\r\n      visit(_BinaryenTryGetCatchBody(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Throw: {\r\n      for (let i = 0, n = _BinaryenThrowGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenThrowGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.Rethrow: {\r\n      visit(_BinaryenRethrowGetExnref(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.BrOnExn: {\r\n      visit(_BinaryenBrOnExnGetExnref(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Push: {\r\n      visit(_BinaryenPushGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Pop: {\r\n      break;\r\n    }\r\n    case ExpressionId.Const: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unary: {\r\n      visit(_BinaryenUnaryGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Binary: {\r\n      visit(_BinaryenBinaryGetLeft(expr), data);\r\n      visit(_BinaryenBinaryGetRight(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Select: {\r\n      visit(_BinaryenSelectGetIfTrue(expr), data);\r\n      visit(_BinaryenSelectGetIfFalse(expr), data);\r\n      visit(_BinaryenSelectGetCondition(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Drop: {\r\n      visit(_BinaryenDropGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Return: {\r\n      visit(_BinaryenReturnGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Host: {\r\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenHostGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.Nop: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unreachable: {\r\n      break;\r\n    }\r\n    default: assert(false);\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // vectors\r\n\r\n  /** A 128-bit vector. */\r\n  V128,\r\n\r\n  // references\r\n\r\n  /** A host reference. */\r\n  ANYREF,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type (either a class or a function type). */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9,\r\n  /** Is a vector type. */\r\n  VECTOR = 1 << 10\r\n}\r\n\r\nconst v128_zero = new Uint8Array(16);\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Substitutes this type with the auto type if this type is void. */\r\n  get exceptVoid(): Type {\r\n    if (this.kind == TypeKind.VOID) return Type.auto;\r\n    return this;\r\n  }\r\n\r\n  /** Gets this type's logarithmic alignment in memory. */\r\n  get alignLog2(): i32 {\r\n    return 31 - clz<i32>(this.byteSize);\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  get isManaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\r\n  get isUnmanaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (\r\n            !signednessIsRelevant ||\r\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\r\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n          ) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      } else if (this.is(TypeFlags.VECTOR)) {\r\n        if (target.is(TypeFlags.VECTOR)) {\r\n          return this.size == target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\r\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\r\n    else if (target.is(TypeFlags.REFERENCE)) return false;\r\n    if (this.is(TypeFlags.INTEGER)) {\r\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\r\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n      );\r\n    }\r\n    return this.kind == target.kind;\r\n  }\r\n\r\n  /** Determines the common denominator type of two types, if there is any. */\r\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to a string. */\r\n  toString(): string {\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.internalName + \" | null\"\r\n          : classReference.internalName;\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString() + \") | null\"\r\n          : signatureReference.toString();\r\n      }\r\n      // TODO: Reflect.apply(value, \"toString\", []) ?\r\n      assert(this.kind == TypeKind.ANYREF);\r\n      return \"anyref\";\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      case TypeKind.ANYREF: return \"anyref\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.V128: return NativeType.V128;\r\n      case TypeKind.ANYREF: return NativeType.Anyref;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.ANYREF:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(0);\r\n      case TypeKind.F32: return module.f32(0);\r\n      case TypeKind.F64: return module.f64(0);\r\n      case TypeKind.V128: return module.v128(v128_zero);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.ANYREF:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(1);\r\n      case TypeKind.F32: return module.f32(1);\r\n      case TypeKind.F64: return module.f64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n          case TypeKind.ANYREF:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(-1, -1);\r\n      case TypeKind.F32: return module.f32(-1);\r\n      case TypeKind.F64: return module.f64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      // same naming scheme as Binaryen\r\n      case TypeKind.I8:\r\n      case TypeKind.U8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U16:\r\n      case TypeKind.I32:\r\n      case TypeKind.U32:\r\n      case TypeKind.BOOL: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"j\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"d\";\r\n      case TypeKind.V128: return \"V\";\r\n      case TypeKind.ANYREF: return \"a\";\r\n      case TypeKind.VOID: return \"v\";\r\n      default: assert(false);\r\n    }\r\n    return \"i\";\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 128-bit vector. */\r\n  static readonly v128: Type = new Type(TypeKind.V128,\r\n    TypeFlags.VECTOR   |\r\n    TypeFlags.VALUE, 128\r\n  );\r\n\r\n  /** A host reference. */\r\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\r\n    TypeFlags.REFERENCE, 0\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n\r\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\r\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n  /** The unique program id that represents this signature. */\r\n  id: u32 = 0;\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n  /** The program that created this signature. */\r\n  program: Program;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    program: Program,\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.program = program;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n\r\n    var signatureTypes = program.uniqueSignatures;\r\n    var length = signatureTypes.length;\r\n    for (let i = 0; i < length; i++) {\r\n      let compare = signatureTypes[i];\r\n      if (this.equals(compare)) {\r\n        this.id = compare.id;\r\n        return this;\r\n      }\r\n    }\r\n    program.uniqueSignatures.push(this);\r\n    this.id = program.nextSignatureId++;\r\n  }\r\n\r\n  asFunctionTarget(program: Program): FunctionTarget {\r\n    var target = this.cachedFunctionTarget;\r\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\r\n    else assert(target.program == program);\r\n    return target;\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    return this.equals(target);\r\n  }\r\n\r\n  /** Tests to see if a signature equals another signature. */\r\n  equals(value: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = value.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != value.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = value.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = value.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    sb.push(returnType.toSignatureString());\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    return \"FUNCSIG$\" + sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      sb.push(\"this: \");\r\n      assert(!thisType.signatureReference);\r\n      sb.push(thisType.toString());\r\n      index = 1;\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.INSTANCEOF:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.NULL:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE:\r\n    case Token.VOID: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function isIllegalVariableIdentifier(name: string): bool {\r\n  assert(name.length);\r\n  switch (name.charCodeAt(0)) {\r\n    case CharCode.d: return name == \"delete\";\r\n    case CharCode.f: return name == \"for\";\r\n    case CharCode.i: return name == \"instanceof\";\r\n    case CharCode.n: return name == \"null\";\r\n    case CharCode.v: return name == \"void\";\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics || new Array();\r\n\r\n    var end = this.end;\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (chr == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (isDecimalDigit(chr)) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < end &&\r\n              chr == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < end) {\r\n                chr = text.charCodeAt(this.pos);\r\n                if (chr == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (chr == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken !== Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\r\n    return this.skip(Token.IDENTIFIER, identifierHandling);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    while (\r\n      ++this.pos < end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    var end = this.end;\r\n    if (++this.pos >= end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (!escaped && c == CharCode.SLASH) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var flags = 0;\r\n    while (this.pos < end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.x:\r\n        case CharCode.X:\r\n        case CharCode.b:\r\n        case CharCode.B:\r\n        case CharCode.o:\r\n        case CharCode.O: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.x:\r\n        case CharCode.X: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.b:\r\n        case CharCode.B: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.o:\r\n        case CharCode.O: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_4 = i64_new(4);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = (value << 4) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = (value << 4) + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.A)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = (value << 4) + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.a)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var value = i64_new(0);\r\n    var i64_10 = i64_new(10);\r\n    var sepEnd = start;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_3 = i64_new(3);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = (value << 3) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_3),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_1 = i64_new(1);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = (value << 1);\r\n        value = i64_shl(value, i64_1);\r\n      } else if (c == CharCode._1) {\r\n        // value = (value << 1) + 1;\r\n        value = i64_add(\r\n          i64_shl(value, i64_1),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.e || c == CharCode.E) {\r\n        if (\r\n          ++this.pos < end &&\r\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = (value << 4) + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = (value << 4) + c + (10 - CharCode.A);\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = (value << 4) + c + (10 - CharCode.a);\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    if (this.pos >= end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        ((value32 - 65536) >>> 10) + 0xD800,\r\n        ((value32 - 65536) & 1023) + 0xDC00\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  PropertyPrototype,\r\n  Field,\r\n  FieldPrototype,\r\n  Global,\r\n  TypeDefinition,\r\n  TypedElement,\r\n  FunctionTarget,\r\n  IndexSignature,\r\n  isTypedElement\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  FunctionTypeNode,\r\n  ParameterKind,\r\n  TypeNode,\r\n  NodeKind,\r\n  NamedTypeNode,\r\n  TypeName,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression,\r\n  IntegerLiteralExpression,\r\n  UnaryPrefixExpression,\r\n  UnaryPostfixExpression,\r\n  AssertionKind,\r\n  BinaryExpression,\r\n  ThisExpression,\r\n  SuperExpression,\r\n  CommaExpression,\r\n  InstanceOfExpression,\r\n  TernaryExpression,\r\n  isTypeOmitted,\r\n  FunctionExpression,\r\n  NewExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols\r\n} from \"./common\";\r\n\r\nimport {\r\n  makeMap,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  BuiltinSymbols\r\n} from \"./builtins\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(\r\n    /** The program to construct a resolver for. */\r\n    program: Program\r\n  ) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  // ====================================================== Types ======================================================\r\n\r\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    /** The type to resolve. */\r\n    node: TypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    switch (node.kind) {\r\n      case NodeKind.NAMEDTYPE: {\r\n        return this.resolveNamedType(\r\n          <NamedTypeNode>node,\r\n          ctxElement,\r\n          ctxTypes,\r\n          reportMode\r\n        );\r\n      }\r\n      case NodeKind.FUNCTIONTYPE: {\r\n        return this.resolveFunctionType(\r\n          <FunctionTypeNode>node,\r\n          ctxElement,\r\n          ctxTypes,\r\n          reportMode\r\n        );\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\r\n  private resolveNamedType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var nameNode = node.name;\r\n    var typeArgumentNodes = node.typeArguments;\r\n    var isSimpleType = !nameNode.next;\r\n\r\n    // Look up in contextual types if a simple type\r\n    if (isSimpleType) {\r\n      let simpleName = nameNode.identifier.text;\r\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\r\n        let type = ctxTypes.get(simpleName)!;\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, type.toString()\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                node.range, type.toString()\r\n              );\r\n            }\r\n          }\r\n          return type.asNullable();\r\n        }\r\n        return type;\r\n      }\r\n    }\r\n\r\n    // Look up in context\r\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\r\n    if (!element) return null;\r\n\r\n    // Use shadow type if present (i.e. namespace sharing a type)\r\n    if (element.shadowType) {\r\n      element = element.shadowType;\r\n\r\n    } else {\r\n\r\n      // Handle enums (become i32)\r\n      if (element.kind == ElementKind.ENUM) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              node.range, element.name + \"/i32\"\r\n            );\r\n          }\r\n        }\r\n        return Type.i32;\r\n      }\r\n\r\n      // Handle classes\r\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let instance = this.resolveClassInclTypeArguments(\r\n          <ClassPrototype>element,\r\n          typeArgumentNodes,\r\n          ctxElement,\r\n          makeMap<string,Type>(ctxTypes), // don't inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!instance) return null;\r\n        return node.isNullable ? instance.type.asNullable() : instance.type;\r\n      }\r\n    }\r\n\r\n    // Handle type definitions\r\n    if (element.kind == ElementKind.TYPEDEFINITION) {\r\n\r\n      // Shortcut already resolved (mostly builtins)\r\n      if (element.is(CommonFlags.RESOLVED)) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        let type = (<TypeDefinition>element).type;\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                nameNode.range, nameNode.identifier.text\r\n              );\r\n            }\r\n          } else {\r\n            return type.asNullable();\r\n          }\r\n        }\r\n        return type;\r\n      }\r\n\r\n      // Handle special built-in types\r\n      if (isSimpleType) {\r\n        switch (nameNode.identifier.symbol) {\r\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\r\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\r\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\r\n          case CommonSymbols.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\r\n        }\r\n      }\r\n\r\n      // Resolve normally\r\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\r\n      let typeArguments: Type[] | null = null;\r\n      if (typeParameterNodes) {\r\n        typeArguments = this.resolveTypeArguments(\r\n          typeParameterNodes,\r\n          typeArgumentNodes,\r\n          ctxElement,\r\n          ctxTypes = makeMap(ctxTypes), // inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!typeArguments) return null;\r\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          node.range, nameNode.identifier.text\r\n        );\r\n      }\r\n      let type = this.resolveType(\r\n        (<TypeDefinition>element).typeNode,\r\n        element,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      if (node.isNullable) {\r\n        if (!type.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              nameNode.range, nameNode.identifier.text\r\n            );\r\n          }\r\n        } else {\r\n          return type.asNullable();\r\n        }\r\n      }\r\n      return type;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        nameNode.range, nameNode.identifier.text\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\r\n  private resolveFunctionType(\r\n    /** The type to resolve. */\r\n    node: FunctionTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterNodes = node.parameters;\r\n    var numParameters = parameterNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterNode = parameterNodes[i];\r\n      switch (parameterNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterTypeNode = parameterNode.type;\r\n      if (isTypeOmitted(parameterTypeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            parameterTypeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let parameterType = this.resolveType(\r\n        parameterTypeNode,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (isTypeOmitted(returnTypeNode)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnTypeNode.range\r\n        );\r\n      }\r\n      returnType = Type.void;\r\n    } else {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!returnType) return null;\r\n    }\r\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return node.isNullable ? signature.type.asNullable() : signature.type;\r\n  }\r\n\r\n  private resolveBuiltinNativeType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    switch (typeArgument.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.U32:\r\n      case TypeKind.BOOL: return Type.u32;\r\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.F32: return Type.f32;\r\n      case TypeKind.F64: return Type.f64;\r\n      case TypeKind.V128: return Type.v128;\r\n      case TypeKind.VOID: return Type.void;\r\n      default: assert(false);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private resolveBuiltinIndexofType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    var classReference = typeArgument.classReference;\r\n    if (!classReference) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n          typeArgumentNodes[0].range, typeArgument.toString()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\r\n    if (overload) {\r\n      if (overload.is(CommonFlags.STATIC)) {\r\n        assert(overload.signature.parameterTypes.length == 2);\r\n        return overload.signature.parameterTypes[1];\r\n      } else {\r\n        assert(overload.signature.parameterTypes.length == 1);\r\n        return overload.signature.parameterTypes[0];\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n        typeArgumentNodes[0].range, typeArgument.toString()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private resolveBuiltinValueofType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    var classReference = typeArgument.classReference;\r\n    if (!classReference) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n          typeArgumentNodes[0].range, typeArgument.toString()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n\r\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\r\n    if (overload) return overload.signature.returnType;\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n        typeArgumentNodes[0].range, typeArgument.toString()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private resolveBuiltinReturnTypeType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    var signatureReference = typeArgument.signatureReference;\r\n    if (!signatureReference) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_has_no_call_signatures,\r\n          typeArgumentNodes[0].range, typeArgument.toString()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    return signatureReference.returnType;\r\n  }\r\n\r\n  /** Resolves a type name to the program element it refers to. */\r\n  resolveTypeName(\r\n    /** The type name to resolve. */\r\n    node: TypeName,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var element = ctxElement.lookup(node.identifier.text);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_find_name_0,\r\n          node.range, node.identifier.text\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var prev = node;\r\n    var next = node.next;\r\n    while (next) {\r\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            next.range, next.identifier.text, prev.identifier.text\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      prev = next;\r\n      next = next.next;\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    /** Type parameter nodes present. */\r\n    typeParameters: TypeParameterNode[],\r\n    /** Type argument nodes provided. */\r\n    typeArgumentNodes: TypeNode[] | null,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\r\n    /** Alternative report node in case of empty type arguments. */\r\n    alternativeReportNode: Node | null = null,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var minParameterCount = 0;\r\n    var maxParameterCount = 0;\r\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\r\n      if (!typeParameters[i].defaultType) ++minParameterCount;\r\n      ++maxParameterCount;\r\n    }\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        argumentCount\r\n          ? Range.join(\r\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\r\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n            )\r\n          : assert(alternativeReportNode).range,\r\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\r\n        argumentCount.toString(10)\r\n      );\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(maxParameterCount);\r\n    for (let i = 0; i < maxParameterCount; ++i) {\r\n      let type = i < argumentCount\r\n        ? this.resolveType( // reports\r\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\r\n            ctxElement,\r\n            ctxTypes,\r\n            reportMode\r\n          )\r\n        : this.resolveType( // reports\r\n            assert(typeParameters[i].defaultType),\r\n            ctxElement,\r\n            ctxTypes,\r\n            reportMode\r\n          );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      ctxTypes.set(typeParameters[i].name.text, type);\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Infers the generic type(s) of an argument expression and updates `ctxTypes`. */\r\n  inferGenericType(\r\n    /** The generic type being inferred. */\r\n    typeNode: TypeNode,\r\n    /** The respective argument expression. */\r\n    exprNode: Expression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\r\n    ctxTypes: Map<string,Type>,\r\n    /** The names of the type parameters being inferred. */\r\n    typeParameterNames: Set<string>\r\n  ): void {\r\n    var type = this.resolveExpression(exprNode, ctxFlow, Type.auto, ReportMode.SWALLOW);\r\n    if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, ctxTypes, typeParameterNames);\r\n  }\r\n\r\n  /** Updates contextual types with a possibly encapsulated inferred type. */\r\n  private propagateInferredGenericTypes(\r\n    /** The inferred type node. */\r\n    node: TypeNode,\r\n    /** The inferred type. */\r\n    type: Type,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\r\n    ctxTypes: Map<string,Type>,\r\n    /** The names of the type parameters being inferred. */\r\n    typeParameterNames: Set<string>\r\n  ): void {\r\n    if (node.kind == NodeKind.NAMEDTYPE) {\r\n      let typeArgumentNodes = (<NamedTypeNode>node).typeArguments;\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) { // foo<T>(bar: Array<T>)\r\n        let classReference = type.classReference;\r\n        if (classReference) {\r\n          let classPrototype = this.resolveTypeName((<NamedTypeNode>node).name, ctxFlow.actualFunction);\r\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\r\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\r\n            let typeArguments = classReference.typeArguments;\r\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\r\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\r\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\r\n              }\r\n              return;\r\n            }\r\n          }\r\n        }\r\n      } else { // foo<T>(bar: T)\r\n        let name = (<NamedTypeNode>node).name.identifier.text;\r\n        if (ctxTypes.has(name)) {\r\n          let currentType = ctxTypes.get(name)!;\r\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\r\n            ctxTypes.set(name, type);\r\n          }\r\n        }\r\n      }\r\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\r\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\r\n      if (parameterNodes !== null && parameterNodes.length) {\r\n        let signatureReference = type.signatureReference;\r\n        if (signatureReference) {\r\n          let parameterTypes = signatureReference.parameterTypes;\r\n          let thisType = signatureReference.thisType;\r\n          if (parameterTypes.length == parameterNodes.length && !thisType == !(<FunctionTypeNode>node).explicitThisType) {\r\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\r\n            }\r\n            this.propagateInferredGenericTypes((<FunctionTypeNode>node).returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\r\n            if (thisType) this.propagateInferredGenericTypes((<FunctionTypeNode>node).explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Gets the concrete type of an element. */\r\n  getTypeOfElement(element: Element): Type | null {\r\n    var kind = element.kind;\r\n    if (kind == ElementKind.GLOBAL) {\r\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\r\n    }\r\n    if (isTypedElement(kind)) {\r\n      let type = (<TypedElement>element).type;\r\n      let classReference = type.classReference;\r\n      if (classReference) {\r\n        let wrappedType = classReference.wrappedType;\r\n        if (wrappedType) type = wrappedType;\r\n      }\r\n      return type;\r\n    }\r\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\r\n    return null;\r\n  }\r\n\r\n  /** Gets the element of a concrete type. */\r\n  getElementOfType(type: Type): Element | null {\r\n    if (type.is(TypeFlags.REFERENCE)) {\r\n      let classReference = type.classReference;\r\n      if (classReference) return classReference;\r\n      let signatureReference = assert(type.signatureReference);\r\n      return signatureReference.asFunctionTarget(this.program);\r\n    } else if (type != Type.void) {\r\n      let wrapperClasses = this.program.wrapperClasses;\r\n      assert(wrapperClasses.has(type));\r\n      return wrapperClasses.get(type);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // =================================================== Expressions ===================================================\r\n\r\n  /** Looks up the program element the specified expression refers to. */\r\n  lookupExpression(\r\n    /** The expression to look up. */\r\n    node: Expression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\r\n      node = (<ParenthesizedExpression>node).expression;\r\n    }\r\n    switch (node.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        return this.lookupAssertionExpression(\r\n          <AssertionExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.BINARY: {\r\n        return this.lookupBinaryExpression(\r\n          <BinaryExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        return this.lookupCallExpression(\r\n          <CallExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.COMMA: {\r\n        return this.lookupCommaExpression(\r\n          <CommaExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.lookupElementAccessExpression(\r\n          <ElementAccessExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        return this.lookupFunctionExpression(\r\n          <FunctionExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.TRUE: {\r\n        return this.lookupIdentifierExpression(\r\n          <IdentifierExpression>node,\r\n          ctxFlow, ctxFlow.actualFunction, reportMode\r\n        );\r\n      }\r\n      case NodeKind.THIS: {\r\n        return this.lookupThisExpression(\r\n          <ThisExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.SUPER: {\r\n        return this.lookupSuperExpression(\r\n          <SuperExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        return this.lookupInstanceOfExpression(\r\n          <InstanceOfExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        return this.lookupLiteralExpression(\r\n          <LiteralExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.NEW: {\r\n        return this.lookupNewExpression(\r\n          <NewExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.lookupPropertyAccessExpression(\r\n          <PropertyAccessExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        return this.lookupTernaryExpression(\r\n          <TernaryExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        return this.lookupUnaryPostfixExpression(\r\n          <UnaryPostfixExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        return this.lookupUnaryPrefixExpression(\r\n          <UnaryPrefixExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an expression to its static type. */\r\n  resolveExpression(\r\n    /** The expression to resolve. */\r\n    node: Expression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\r\n      node = (<ParenthesizedExpression>node).expression;\r\n    }\r\n    switch (node.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        return this.resolveAssertionExpression(\r\n          <AssertionExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.BINARY: {\r\n        return this.resolveBinaryExpression(\r\n          <BinaryExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        return this.resolveCallExpression(\r\n          <CallExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.COMMA: {\r\n        return this.resolveCommaExpression(\r\n          <CommaExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccessExpression(\r\n          <ElementAccessExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        return this.resolveFunctionExpression(\r\n          <FunctionExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.TRUE: {\r\n        return this.resolveIdentifierExpression(\r\n          <IdentifierExpression>node,\r\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\r\n        );\r\n      }\r\n      case NodeKind.THIS: {\r\n        return this.resolveThisExpression(\r\n          <ThisExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.SUPER: {\r\n        return this.resolveSuperExpression(\r\n          <SuperExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        return this.resolveInstanceOfExpression(\r\n          <InstanceOfExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        return this.resolveLiteralExpression(\r\n          <LiteralExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.NEW: {\r\n        return this.resolveNewExpression(\r\n          <NewExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccessExpression(\r\n          <PropertyAccessExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        return this.resolveTernaryExpression(\r\n          <TernaryExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        return this.resolveUnaryPostfixExpression(\r\n          <UnaryPostfixExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        return this.resolveUnaryPrefixExpression(\r\n          <UnaryPrefixExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the program element the specified identifier expression refers to. */\r\n  lookupIdentifierExpression(\r\n    /** The expression to look up. */\r\n    node: IdentifierExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Element to search. */\r\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    switch (node.kind) {\r\n      case NodeKind.TRUE:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL: {\r\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\r\n        return type ? this.getElementOfType(type) : null;\r\n      }\r\n    }\r\n    var name = node.text;\r\n    var element: Element | null;\r\n    if (element = ctxFlow.lookup(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (element = ctxElement.lookup(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (element = this.program.lookupGlobal(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        node.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an identifier to its static type. */\r\n  private resolveIdentifierExpression(\r\n    /** The expression to resolve. */\r\n    node: IdentifierExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** Element to search. */\r\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    switch (node.kind) {\r\n      case NodeKind.TRUE:\r\n      case NodeKind.FALSE: return Type.bool;\r\n      case NodeKind.NULL: {\r\n        let classReference = ctxType.classReference;\r\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\r\n          ? classReference.type.asNullable()\r\n          : this.program.options.usizeType; // TODO: anyref context?\r\n      }\r\n    }\r\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\r\n    if (!element) return null;\r\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap(), reportMode);\r\n      if (!instance) return null;\r\n      element = instance;\r\n    }\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\r\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\r\n    if (global.is(CommonFlags.RESOLVED)) return true;\r\n    var typeNode = global.typeNode;\r\n    if (!typeNode) return false;\r\n    var type = this.resolveType( // reports\r\n      typeNode,\r\n      global.parent,\r\n      null,\r\n      reportMode\r\n    );\r\n    if (!type) return false;\r\n    global.setType(type); // also sets resolved\r\n    return true;\r\n  }\r\n\r\n  /** Looks up the program element the specified property access expression refers to. */\r\n  private lookupPropertyAccessExpression(\r\n    /** The expression to look up. */\r\n    node: PropertyAccessExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetNode = node.expression;\r\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\r\n    if (!target) return null;\r\n    var propertyName = node.property.text;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: { // someVar.prop\r\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let wrapperClasses = this.program.wrapperClasses;\r\n          if (wrapperClasses.has(type)) {\r\n            classReference = wrapperClasses.get(type)!;\r\n          } else {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n              );\r\n            }\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\r\n        let getterInstance = this.resolveFunction( // reports\r\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n        if (!getterInstance) return null;\r\n        let type = getterInstance.signature.returnType;\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let wrapperClasses = this.program.wrapperClasses;\r\n          if (wrapperClasses.has(type)) {\r\n            classReference = wrapperClasses.get(type)!;\r\n          } else {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n                node.property.range, propertyName, type.toString()\r\n              );\r\n            }\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // someInstance.prop\r\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\r\n        let type = getterInstance.signature.returnType;\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let wrapperClasses = this.program.wrapperClasses;\r\n          if (wrapperClasses.has(type)) {\r\n            classReference = wrapperClasses.get(type)!;\r\n          } else {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n                node.property.range, propertyName, type.toString()\r\n              );\r\n            }\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\r\n        let elementExpression = assert(this.currentElementExpression);\r\n        let parent = (<IndexSignature>target).parent;\r\n        assert(parent.kind == ElementKind.CLASS);\r\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, parent.internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let returnType = indexedGet.signature.returnType;\r\n        let classReference = returnType.classReference;\r\n        if (!classReference) {\r\n          let wrapperClasses = this.program.wrapperClasses;\r\n          if (wrapperClasses.has(returnType)) {\r\n            classReference = wrapperClasses.get(returnType)!;\r\n          } else {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n                node.property.range, propertyName, returnType.toString()\r\n              );\r\n            }\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\r\n        let shadowType = target.shadowType;\r\n        if (shadowType) {\r\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\r\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\r\n            if (resolvedType) shadowType.setType(resolvedType);\r\n          }\r\n          let classReference = shadowType.type.classReference;\r\n          if (classReference) target = classReference.prototype;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          if (members && members.has(propertyName)) {\r\n            this.currentThisExpression = targetNode;\r\n            this.currentElementExpression = null;\r\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members && members.has(propertyName)) {\r\n          this.currentThisExpression = targetNode;\r\n          this.currentElementExpression = null;\r\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n        node.property.range, propertyName, target.internalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access expression to its static type. */\r\n  private resolvePropertyAccessExpression(\r\n    /** The expression to resolve. */\r\n    node: PropertyAccessExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Looks up the program element the specified element access expression refers to. */\r\n  private lookupElementAccessExpression(\r\n    /** The expression to look up. */\r\n    node: ElementAccessExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = node.expression;\r\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\r\n    if (!targetType) return null;\r\n    if (targetType.is(TypeFlags.REFERENCE)) {\r\n      let classReference = targetType.classReference;\r\n      if (classReference) {\r\n        let indexSignature = classReference.indexSignature;\r\n        if (indexSignature) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = node.elementExpression;\r\n          return indexSignature;\r\n        }\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n        targetExpression.range, targetType.toString()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an element access expression to its static type. */\r\n  private resolveElementAccessExpression(\r\n    /** The expression to resolve. */\r\n    node: ElementAccessExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Determines the final type of an integer literal given the specified contextual type. */\r\n  determineIntegerLiteralType(\r\n    /** Integer literal value. */\r\n    intValue: I64,\r\n    /** Contextual type. */\r\n    ctxType: Type\r\n  ): Type {\r\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\r\n      // compile to contextual type if matching\r\n      switch (ctxType.kind) {\r\n        case TypeKind.I8: {\r\n          if (i64_is_i8(intValue)) return Type.i8;\r\n          break;\r\n        }\r\n        case TypeKind.U8: {\r\n          if (i64_is_u8(intValue)) return Type.u8;\r\n          break;\r\n        }\r\n        case TypeKind.I16: {\r\n          if (i64_is_i16(intValue)) return Type.i16;\r\n          break;\r\n        }\r\n        case TypeKind.U16: {\r\n          if (i64_is_u16(intValue)) return Type.u16;\r\n          break;\r\n        }\r\n        case TypeKind.I32: {\r\n          if (i64_is_i32(intValue)) return Type.i32;\r\n          break;\r\n        }\r\n        case TypeKind.U32: {\r\n          if (i64_is_u32(intValue)) return Type.u32;\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: {\r\n          if (i64_is_bool(intValue)) return Type.bool;\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_i32(intValue)) return Type.isize32;\r\n            break;\r\n          }\r\n          return Type.isize64;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_u32(intValue)) return Type.usize32;\r\n            break;\r\n          }\r\n          return Type.usize64;\r\n        }\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n      }\r\n    }\r\n    // otherwise compile to best fitting native type\r\n    if (i64_is_i32(intValue)) return Type.i32;\r\n    if (i64_is_u32(intValue)) return Type.u32;\r\n    return Type.i64; // TODO: u64 if positive and larger than i64?\r\n  }\r\n\r\n  /** Looks up the program element the specified assertion expression refers to. */\r\n  private lookupAssertionExpression(\r\n    /** The expression to look up. */\r\n    node: AssertionExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (node.assertionKind == AssertionKind.NONNULL) {\r\n      return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\r\n    }\r\n    var type = this.resolveType(\r\n      assert(node.toType), // must be set if not NONNULL\r\n      ctxFlow.actualFunction,\r\n      ctxFlow.contextualTypeArguments,\r\n      reportMode\r\n    );\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (element) return element;\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    this.currentThisExpression = null;\r\n    this.currentElementExpression = null;\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an assertion expression to its static type. */\r\n  private resolveAssertionExpression(\r\n    /** The expression to resolve. */\r\n    node: AssertionExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    if (node.assertionKind == AssertionKind.NONNULL) {\r\n      let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\r\n      return type ? type.nonNullableType : null;\r\n    }\r\n    return this.resolveType(\r\n      assert(node.toType), // must be set if not NONNULL\r\n      ctxFlow.actualFunction,\r\n      ctxFlow.contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Looks up the program element the specified unary prefix expression refers to. */\r\n  private lookupUnaryPrefixExpression(\r\n    /** The expression to look up. */\r\n    node: UnaryPrefixExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n          node.range, operatorTokenToString(node.operator), type.toString()\r\n        );\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an unary prefix expression to its static type. */\r\n  private resolveUnaryPrefixExpression(\r\n    /** The expression to resolve. */\r\n    node: UnaryPrefixExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var operand = node.operand;\r\n    var operator = node.operator;\r\n    switch (operator) {\r\n      case Token.MINUS: {\r\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\r\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\r\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\r\n        }\r\n        // fall-through\r\n      }\r\n      case Token.PLUS:\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\r\n        if (!type) return null;\r\n        if (type.is(TypeFlags.REFERENCE)) {\r\n          let classReference = type.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n            let wrappedType = classReference.wrappedType;\r\n            if (wrappedType) type = wrappedType;\r\n          }\r\n        }\r\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              node.range, operatorTokenToString(operator), type.toString()\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        return type;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\r\n        if (!type) return null;\r\n        if (type.is(TypeFlags.REFERENCE)) {\r\n          let classReference = type.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        return Type.bool; // incl. references\r\n      }\r\n      case Token.TILDE: {\r\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\r\n        if (!type) return null;\r\n        if (type.is(TypeFlags.REFERENCE)) {\r\n          let classReference = type.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              node.range, \"~\", type.toString()\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        return type.intType;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the program element the specified unary postfix expression refers to. */\r\n  private lookupUnaryPostfixExpression(\r\n    /** The expression to resolve. */\r\n    node: UnaryPostfixExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n          node.range, operatorTokenToString(node.operator), type.toString()\r\n        );\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an unary postfix expression to its static type. */\r\n  private resolveUnaryPostfixExpression(\r\n    /** The expression to resolve. */\r\n    node: UnaryPostfixExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var operator = node.operator;\r\n    switch (operator) {\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\r\n        if (!type) return null;\r\n        if (type.is(TypeFlags.REFERENCE)) {\r\n          let classReference = type.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              node.range, operatorTokenToString(operator), type.toString()\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        return type;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the program element the specified binary expression refers to. */\r\n  private lookupBinaryExpression(\r\n    /** The expression to look up. */\r\n    node: BinaryExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (element) return element; // otherwise void\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a binary expression to its static type. */\r\n  private resolveBinaryExpression(\r\n    /** The expression to resolve. */\r\n    node: BinaryExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var left = node.left;\r\n    var right = node.right;\r\n    var operator = node.operator;\r\n\r\n    switch (operator) {\r\n\r\n      // assignment: result is the target's type\r\n\r\n      case Token.EQUALS:\r\n      case Token.PLUS_EQUALS:\r\n      case Token.MINUS_EQUALS:\r\n      case Token.ASTERISK_EQUALS:\r\n      case Token.ASTERISK_ASTERISK_EQUALS:\r\n      case Token.SLASH_EQUALS:\r\n      case Token.PERCENT_EQUALS:\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n      case Token.AMPERSAND_EQUALS:\r\n      case Token.BAR_EQUALS:\r\n      case Token.CARET_EQUALS: {\r\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n      }\r\n\r\n      // comparison: result is Bool, preferring overloads, integer/float only\r\n\r\n      case Token.LESSTHAN:\r\n      case Token.GREATERTHAN:\r\n      case Token.LESSTHAN_EQUALS:\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              node.range, operatorTokenToString(operator), leftType.toString()\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        return Type.bool;\r\n      }\r\n\r\n      // equality: result is Bool, preferring overloads, incl. references\r\n\r\n      case Token.EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        return Type.bool;\r\n      }\r\n\r\n      // identity: result is Bool, not supporting overloads\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\r\n        return Type.bool;\r\n      }\r\n\r\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\r\n\r\n      case Token.PLUS:\r\n      case Token.MINUS:\r\n      case Token.ASTERISK:\r\n      case Token.SLASH:\r\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\r\n        if (!rightType) return null;\r\n        let commonType = Type.commonDenominator(leftType, rightType, false);\r\n        if (!commonType) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              node.range, leftType.toString(), rightType.toString()\r\n            );\r\n          }\r\n        }\r\n        return commonType;\r\n      }\r\n\r\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\r\n\r\n      case Token.ASTERISK_ASTERISK: {\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\r\n      }\r\n\r\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\r\n\r\n      case Token.LESSTHAN_LESSTHAN:\r\n      case Token.GREATERTHAN_GREATERTHAN:\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              node.range, operatorTokenToString(operator), leftType.toString()\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        return leftType;\r\n      }\r\n\r\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\r\n\r\n      case Token.AMPERSAND:\r\n      case Token.BAR:\r\n      case Token.CARET: {\r\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n        if (!leftType) return null;\r\n        if (leftType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\r\n            if (overload) return overload.signature.returnType;\r\n          }\r\n        }\r\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\r\n        if (!rightType) return null;\r\n        let commonType = Type.commonDenominator(leftType, rightType, false);\r\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\r\n            );\r\n          }\r\n        }\r\n        return commonType;\r\n      }\r\n\r\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\r\n\r\n      case Token.AMPERSAND_AMPERSAND:\r\n      case Token.BAR_BAR: {\r\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\r\n      }\r\n    }\r\n\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the program element the specified this expression refers to. */\r\n  private lookupThisExpression(\r\n    /** The expression to look up. */\r\n    node: ThisExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\r\n      if (thisLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return thisLocal;\r\n      }\r\n    }\r\n    var parent = ctxFlow.actualFunction.parent;\r\n    if (parent) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a this expression to its static type. */\r\n  private resolveThisExpression(\r\n    /** The expression to resolve. */\r\n    node: ThisExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Looks up the program element the specified super expression refers to. */\r\n  private lookupSuperExpression(\r\n    /** The expression to look up. */\r\n    node: SuperExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\r\n      if (superLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return superLocal;\r\n      }\r\n    }\r\n    var parent: Element | null = ctxFlow.actualFunction.parent;\r\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a super expression to its static type. */\r\n  private resolveSuperExpression(\r\n    /** The expression to resolve. */\r\n    node: SuperExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Looks up the program element the specified literal expression refers to. */\r\n  private lookupLiteralExpression(\r\n    /** The expression to look up. */\r\n    node: LiteralExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    switch (node.literalKind) {\r\n      case LiteralKind.INTEGER: {\r\n        this.currentThisExpression = node;\r\n        this.currentElementExpression = null;\r\n        let intType = this.determineIntegerLiteralType(\r\n          (<IntegerLiteralExpression>node).value,\r\n          ctxType\r\n        );\r\n        let wrapperClasses = this.program.wrapperClasses;\r\n        assert(wrapperClasses.has(intType));\r\n        return wrapperClasses.get(intType);\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        this.currentThisExpression = node;\r\n        this.currentElementExpression = null;\r\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\r\n        let wrapperClasses = this.program.wrapperClasses;\r\n        assert(wrapperClasses.has(fltType));\r\n        return wrapperClasses.get(fltType);\r\n      }\r\n      case LiteralKind.STRING: {\r\n        this.currentThisExpression = node;\r\n        this.currentElementExpression = null;\r\n        return this.program.stringInstance;\r\n      }\r\n      // TODO\r\n      // case LiteralKind.ARRAY:\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a literal expression to its static type. */\r\n  private resolveLiteralExpression(\r\n    /** The expression to resolve. */\r\n    node: LiteralExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Looks up the program element the specified call expression refers to. */\r\n  private lookupCallExpression(\r\n    /** The expression to look up. */\r\n    node: CallExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.void,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves a call expression to its static type. */\r\n  private resolveCallExpression(\r\n    /** The expression to resolve. */\r\n    node: CallExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.void,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var targetExpression = node.expression;\r\n    var target = this.lookupExpression( // reports\r\n      targetExpression,\r\n      ctxFlow,\r\n      ctxType,\r\n      reportMode\r\n    );\r\n    if (!target) return null;\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        // `unchecked(expr: *): *` is special\r\n        if (\r\n          (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\r\n          node.arguments.length > 0\r\n        ) {\r\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\r\n        }\r\n        // otherwise resolve normally\r\n        let instance = this.resolveFunctionInclTypeArguments(\r\n          <FunctionPrototype>target,\r\n          node.typeArguments,\r\n          ctxFlow.actualFunction,\r\n          makeMap(ctxFlow.contextualTypeArguments), // don't inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!instance) return null;\r\n        return instance.signature.returnType;\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        return (<FunctionTarget>target).signature.returnType;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n        targetExpression.range, target.internalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the program element the specified comma expression refers to. */\r\n  private lookupCommaExpression(\r\n    /** The expression to look up. */\r\n    node: CommaExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var expressions = node.expressions;\r\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\r\n  }\r\n\r\n  /** Resolves a comma expression to its static type. */\r\n  private resolveCommaExpression(\r\n    /** The expression to resolve. */\r\n    node: CommaExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var expressions = node.expressions;\r\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\r\n  }\r\n\r\n  /** Looks up the program element the specified instanceof expression refers to. */\r\n  private lookupInstanceOfExpression(\r\n    /** The expression to look up. */\r\n    node: InstanceOfExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var wrapperClasses = this.program.wrapperClasses;\r\n    assert(wrapperClasses.has(Type.bool));\r\n    return wrapperClasses.get(Type.bool);\r\n  }\r\n\r\n  /** Resolves an instanceof expression to its static type. */\r\n  private resolveInstanceOfExpression(\r\n    /** The expression to resolve. */\r\n    node: InstanceOfExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    return Type.bool;\r\n  }\r\n\r\n  /** Looks up the program element the specified ternary expression refers to. */\r\n  private lookupTernaryExpression(\r\n    /** The expression to look up. */\r\n    node: TernaryExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves a ternary expression to its static type. */\r\n  private resolveTernaryExpression(\r\n    /** The expression to resolve. */\r\n    node: TernaryExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\r\n    if (!thenType) return null;\r\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\r\n    if (!elseType) return null;\r\n    var commonType = Type.commonDenominator(thenType, elseType, false);\r\n    if (!commonType) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n          node.range, \"?:\", thenType.toString(), elseType.toString()\r\n        );\r\n      }\r\n    }\r\n    return commonType;\r\n  }\r\n\r\n  /** Looks up the program element the specified new expression refers to. */\r\n  private lookupNewExpression(\r\n    /** The expression to look up. */\r\n    node: NewExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n      return this.resolveClassInclTypeArguments(\r\n        <ClassPrototype>element,\r\n        node.typeArguments,\r\n        ctxFlow.actualFunction,\r\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\r\n        node,\r\n        reportMode\r\n      );\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a new expression to its static type. */\r\n  private resolveNewExpression(\r\n    /** The expression to resolve. */\r\n    node: NewExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!element) return null;\r\n    var type = this.getTypeOfElement(element);\r\n    if (!type) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /** Looks up the program element the specified function expression refers to. */\r\n  private lookupFunctionExpression(\r\n    /** The expression to look up. */\r\n    node: FunctionExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\r\n    if (!type) return null;\r\n    var element = this.getElementOfType(type);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          node.range\r\n        );\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves a function expression to its static type. */\r\n  private resolveFunctionExpression(\r\n    /** The expression to resolve. */\r\n    node: FunctionExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\r\n  }\r\n\r\n  // ==================================================== Elements =====================================================\r\n\r\n  /** Resolves a function prototype using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided. */\r\n    typeArguments: Type[] | null,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var classInstance: Class | null = null; // if an instance method\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Instance method prototypes are pre-bound to their concrete class as their parent\r\n    if (prototype.is(CommonFlags.INSTANCE)) {\r\n      assert(actualParent.kind == ElementKind.CLASS);\r\n      classInstance = <Class>actualParent;\r\n\r\n      // check if this exact concrete class and function combination is known already\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n\r\n      // inherit class specific type arguments\r\n      let classTypeArguments = classInstance.typeArguments;\r\n      if (classTypeArguments) {\r\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\r\n        let numClassTypeArguments = classTypeParameters.length;\r\n        assert(numClassTypeArguments == classTypeParameters.length);\r\n        for (let i = 0; i < numClassTypeArguments; ++i) {\r\n          let classTypeParameterName = classTypeParameters[i].name.text;\r\n          if (!ctxTypes.has(classTypeParameterName)) {\r\n            ctxTypes.set(\r\n              classTypeParameterName,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n    }\r\n\r\n    // override whatever is contextual with actual function type arguments\r\n    var signatureNode = prototype.functionTypeNode;\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        ctxTypes.set(\r\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\r\n    }\r\n\r\n    // resolve `this` type if applicable\r\n    var thisType: Type | null = null;\r\n    var explicitThisType = signatureNode.explicitThisType;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        prototype.parent, // relative to function\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n      ctxTypes.set(CommonSymbols.this_, thisType);\r\n    } else if (classInstance) {\r\n      thisType = classInstance.type;\r\n      ctxTypes.set(CommonSymbols.this_, thisType);\r\n    }\r\n\r\n    // resolve parameter types\r\n    var signatureParameters = signatureNode.parameters;\r\n    var numSignatureParameters = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(numSignatureParameters);\r\n    var parameterNames = new Array<string>(numSignatureParameters);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < numSignatureParameters; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = parameterDeclaration.type;\r\n      if (isTypeOmitted(typeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let parameterType = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    // resolve return type\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = signatureNode.returnType;\r\n      if (isTypeOmitted(typeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let type = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var nameInclTypeParameters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\r\n    var instance = new Function(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      signature,\r\n      ctxTypes\r\n    );\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided to be resolved. */\r\n    typeArgumentNodes: TypeNode[] | null,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n\r\n      // If this is an instance method, first apply the class's type arguments\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        assert(actualParent.kind == ElementKind.CLASS);\r\n        let classTypeArguments = (<Class>actualParent).typeArguments;\r\n        if (classTypeArguments) {\r\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\r\n          let numClassTypeArguments = classTypeArguments.length;\r\n          assert(numClassTypeArguments == typeParameterNodes.length);\r\n          for (let i = 0; i < numClassTypeArguments; ++i) {\r\n            ctxTypes.set(\r\n              typeParameterNodes[i].name.text,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes),\r\n        typeArgumentNodes,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      ctxTypes,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type arguments provided. */\r\n    typeArguments: Type[] | null,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.getResolvedInstance(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    if (typeArguments) {\r\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n      let numTypeParameters = typeParameterNodes.length;\r\n      let numTypeArguments = typeArguments.length;\r\n      assert(numTypeArguments == numTypeParameters);\r\n      for (let i = 0; i < numTypeArguments; ++i) {\r\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      let typeParameterNodes = prototype.typeParameterNodes;\r\n      assert(!(typeParameterNodes && typeParameterNodes.length));\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var basePrototype = prototype.basePrototype;\r\n    var baseClass: Class | null = null;\r\n    if (basePrototype) {\r\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\r\n      baseClass = this.resolveClassInclTypeArguments(\r\n        basePrototype,\r\n        extendsNode.typeArguments,\r\n        prototype.parent, // relative to derived class\r\n        makeMap(ctxTypes), // don't inherit\r\n        extendsNode,\r\n        reportMode\r\n      );\r\n      if (!baseClass) return null;\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var nameInclTypeParamters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\r\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = ctxTypes;\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      let baseMembers = baseClass.members;\r\n      if (baseMembers) {\r\n        let instanceMembers = instance.members;\r\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n        for (let [baseMemberName, baseMember] of baseMembers) {\r\n          instanceMembers.set(baseMemberName, baseMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve instance members\r\n    var instanceMemberPrototypes = prototype.instanceMembers;\r\n    if (instanceMemberPrototypes) {\r\n      for (let member of instanceMemberPrototypes.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            let instanceMembers = instance.members;\r\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n            else if (instanceMembers.has(member.name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                (<FieldPrototype>member).identifierNode.range,\r\n                member.name\r\n              );\r\n              break;\r\n            }\r\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields specifically?\r\n            if (!fieldTypeNode) {\r\n              if (baseClass) {\r\n                let baseMembers = baseClass.members;\r\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\r\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\r\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\r\n                    assert(baseField.kind == ElementKind.FIELD);\r\n                    fieldType = (<Field>baseField).type;\r\n                  }\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    (<FieldPrototype>member).identifierNode.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldTypeNode,\r\n                prototype.parent, // relative to class\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break; // did report above\r\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\r\n            assert(isPowerOf2(fieldType.byteSize));\r\n            let mask = fieldType.byteSize - 1;\r\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.add(member.name, fieldInstance); // reports\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\r\n            instance.add(boundPrototype.name, boundPrototype); // reports\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\r\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\r\n            if (getterPrototype) {\r\n              let getterInstance = this.resolveFunction(\r\n                getterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (getterInstance) {\r\n                propertyInstance.getterInstance = getterInstance;\r\n                propertyInstance.setType(getterInstance.signature.returnType);\r\n              }\r\n            }\r\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\r\n            if (setterPrototype) {\r\n              let setterInstance = this.resolveFunction(\r\n                setterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (setterInstance) {\r\n                propertyInstance.setterInstance = setterInstance;\r\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\r\n                  assert(setterInstance.signature.parameterTypes.length == 1);\r\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\r\n                }\r\n              }\r\n            }\r\n            instance.add(propertyInstance.name, propertyInstance); // reports\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Link _own_ constructor if present\r\n    {\r\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\r\n      if (ctorPrototype && ctorPrototype.parent === instance) {\r\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n        let ctorInstance = this.resolveFunction(\r\n          <FunctionPrototype>ctorPrototype,\r\n          null,\r\n          instance.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let boundPrototype = overloadPrototype.toBound(instance);\r\n        operatorInstance = this.resolveFunction(\r\n          boundPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      } else {\r\n        operatorInstance = this.resolveFunction(\r\n          overloadPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      // inc/dec are special in that an instance overload attempts to re-assign\r\n      // the corresponding value, thus requiring a matching return type, while a\r\n      // static overload works like any other overload.\r\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n        switch (kind) {\r\n          case OperatorKind.PREFIX_INC:\r\n          case OperatorKind.PREFIX_DEC:\r\n          case OperatorKind.POSTFIX_INC:\r\n          case OperatorKind.POSTFIX_DEC: {\r\n            let returnType = operatorInstance.signature.returnType;\r\n            if (!returnType.isAssignableTo(instance.type)) {\r\n              if (reportMode == ReportMode.REPORT) {\r\n                this.error(\r\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (!overloads.has(kind)) {\r\n        overloads.set(kind, operatorInstance);\r\n        if (kind == OperatorKind.INDEXED_GET || kind == OperatorKind.INDEXED_SET) {\r\n          let index = instance.indexSignature;\r\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\r\n          if (kind == OperatorKind.INDEXED_GET) {\r\n            index.setType(operatorInstance.signature.returnType);\r\n          }\r\n        }\r\n      } else {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_decorator,\r\n            operatorInstance.declaration.range\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type arguments provided to be resolved. */\r\n    typeArgumentNodes: TypeNode[] | null,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventual diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes), // must be present if generic\r\n        typeArgumentNodes,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      ctxTypes,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * A control flow analyzer.\r\n * @module flow\r\n *//***/\r\n\r\nimport {\r\n  Type,\r\n  TypeFlags,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  Local,\r\n  Function,\r\n  Element,\r\n  ElementKind,\r\n  Global\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionId,\r\n  ExpressionRef,\r\n\r\n  getExpressionId,\r\n  getLocalGetIndex,\r\n  isLocalTee,\r\n  getLocalSetValue,\r\n  getGlobalGetName,\r\n  getBinaryOp,\r\n  BinaryOp,\r\n  getBinaryLeft,\r\n  getConstValueI32,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  UnaryOp,\r\n  getExpressionType,\r\n  getConstValueI64Low,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getLocalSetIndex,\r\n  getIfCondition,\r\n  getConstValueI64High,\r\n  getUnaryValue,\r\n  getCallOperand,\r\n  traverse\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node\r\n} from \"./ast\";\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This flow returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This flow returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This flow returns a non-null value. */\r\n  RETURNS_NONNULL = 1 << 2,\r\n  /** This flow throws. */\r\n  THROWS = 1 << 3,\r\n  /** This flow breaks. */\r\n  BREAKS = 1 << 4,\r\n  /** This flow continues. */\r\n  CONTINUES = 1 << 5,\r\n  /** This flow allocates. Constructors only. */\r\n  ALLOCATES = 1 << 6,\r\n  /** This flow calls super. Constructors only. */\r\n  CALLS_SUPER = 1 << 7,\r\n  /** This flow terminates (returns, throws or continues). */\r\n  TERMINATES = 1 << 8,\r\n\r\n  // conditional\r\n\r\n  /** This flow conditionally returns in a child flow. */\r\n  CONDITIONALLY_RETURNS = 1 << 9,\r\n  /** This flow conditionally throws in a child flow. */\r\n  CONDITIONALLY_THROWS = 1 << 10,\r\n  /** This flow conditionally terminates in a child flow. */\r\n  CONDITIONALLY_TERMINATES = 1 << 11,\r\n  /** This flow conditionally breaks in a child flow. */\r\n  CONDITIONALLY_BREAKS = 1 << 12,\r\n  /** This flow conditionally continues in a child flow. */\r\n  CONDITIONALLY_CONTINUES = 1 << 13,\r\n  /** This flow conditionally allocates in a child flow. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 14,\r\n\r\n  // special\r\n\r\n  /** This is an inlining flow. */\r\n  INLINE_CONTEXT = 1 << 15,\r\n  /** This is a flow with explicitly disabled bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 16,\r\n\r\n  // masks\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.RETURNS_NONNULL\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES\r\n                  | FlowFlags.CALLS_SUPER\r\n                  | FlowFlags.TERMINATES,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** Flags indicating the current state of a local. */\r\nexport enum LocalFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Local is constant. */\r\n  CONSTANT = 1 << 0,\r\n  /** Local is properly wrapped. Relevant for small integers. */\r\n  WRAPPED = 1 << 1,\r\n  /** Local is non-null. */\r\n  NONNULL = 1 << 2,\r\n  /** Local is read from. */\r\n  READFROM = 1 << 3,\r\n  /** Local is written to. */\r\n  WRITTENTO = 1 << 4,\r\n  /** Local is retained. */\r\n  RETAINED = 1 << 5,\r\n\r\n  /** Local is conditionally read from. */\r\n  CONDITIONALLY_READFROM = 1 << 6,\r\n  /** Local is conditionally written to. */\r\n  CONDITIONALLY_WRITTENTO = 1 << 7,\r\n  /** Local must be conditionally retained. */\r\n  CONDITIONALLY_RETAINED = 1 << 8,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = CONSTANT\r\n                  | WRAPPED\r\n                  | NONNULL\r\n                  | READFROM\r\n                  | WRITTENTO\r\n                  | RETAINED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = RETAINED\r\n                  | CONDITIONALLY_READFROM\r\n                  | CONDITIONALLY_WRITTENTO\r\n                  | CONDITIONALLY_RETAINED,\r\n\r\n  /** Any retained flag. */\r\n  ANY_RETAINED = RETAINED\r\n               | CONDITIONALLY_RETAINED\r\n}\r\nexport namespace LocalFlags {\r\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\r\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\r\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** Flags indicating the current state of a field. */\r\nexport enum FieldFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Field is initialized. Relevant in constructors. */\r\n  INITIALIZED = 1 << 0,\r\n  /** Field is conditionally initialized. Relevant in constructors. */\r\n  CONDITIONALLY_INITIALIZED = 1 << 1,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = INITIALIZED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\r\n}\r\nexport namespace FieldFlags {\r\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\r\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\r\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  parentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local flags. */\r\n  localFlags: LocalFlags[];\r\n  /** Field flags. Relevant in constructors. */\r\n  fieldFlags: Map<string,FieldFlags> | null = null;\r\n  /** Function being inlined, when inlining. */\r\n  inlineFunction: Function | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  inlineReturnLabel: string | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(parentFunction: Function): Flow {\r\n    var flow = new Flow();\r\n    flow.parent = null;\r\n    flow.flags = FlowFlags.NONE;\r\n    flow.parentFunction = parentFunction;\r\n    flow.continueLabel = null;\r\n    flow.breakLabel = null;\r\n    flow.returnType = parentFunction.signature.returnType;\r\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\r\n    flow.localFlags = [];\r\n    flow.inlineFunction = null;\r\n    flow.inlineReturnLabel = null;\r\n    return flow;\r\n  }\r\n\r\n  /** Creates an inline flow within `parentFunction`. */\r\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\r\n    var flow = Flow.create(parentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.inlineFunction = inlineFunction;\r\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\r\n    flow.returnType = inlineFunction.signature.returnType;\r\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\r\n    return flow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\r\n  get actualFunction(): Function {\r\n    return this.inlineFunction || this.parentFunction;\r\n  }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.parentFunction = this.parentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.localFlags = this.localFlags.slice();\r\n    branch.inlineFunction = this.inlineFunction;\r\n    branch.inlineReturnLabel = this.inlineReturnLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\r\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\r\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\r\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\r\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (except) {\r\n      if (temps && temps.length) {\r\n        for (let i = 0, k = temps.length; i < k; ++i) {\r\n          if (!except.has(temps[i].index)) {\r\n            local = temps[i];\r\n            let k = temps.length - 1;\r\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\r\n            temps.length = k;\r\n            local.type = type;\r\n            local.flags = CommonFlags.NONE;\r\n            this.unsetLocalFlag(local.index, ~0);\r\n            return local;\r\n          }\r\n        }\r\n      }\r\n      local = parentFunction.addLocal(type);\r\n    } else {\r\n      if (temps && temps.length) {\r\n        local = temps.pop();\r\n        local.type = type;\r\n        local.flags = CommonFlags.NONE;\r\n      } else {\r\n        local = parentFunction.addLocal(type);\r\n      }\r\n    }\r\n    this.unsetLocalFlag(local.index, ~0);\r\n    return local;\r\n  }\r\n\r\n  /** Gets a local that sticks around until this flow is exited, and then released. */\r\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var local = this.getTempLocal(type, except);\r\n    local.set(CommonFlags.SCOPED);\r\n    var scopedLocals = this.scopedLocals;\r\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\r\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\r\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      case NativeType.V128: {\r\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var local = this.getTempLocal(type, except);\r\n    this.freeTempLocal(local);\r\n    return local;\r\n  }\r\n\r\n  /** Gets the scoped local of the specified name. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var scopedLocals = this.scopedLocals;\r\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\r\n    var scopedLocal = this.getTempLocal(type, except);\r\n    var scopedLocals = this.scopedLocals;\r\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\r\n    else assert(!scopedLocals.has(name));\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    scopedLocals.set(name, scopedLocal);\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\r\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.parentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\r\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables and returns its parent flow. */\r\n  freeScopedLocals(): void {\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n  }\r\n\r\n  /** Looks up the local of the specified name in the current scope. */\r\n  lookupLocal(name: string): Local | null {\r\n    var current: Flow | null = this;\r\n    var scope: Map<String,Local> | null;\r\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\r\n    while (current = current.parent);\r\n    return this.parentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to the scope of this flow. */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupLocal(name);\r\n    if (element) return element;\r\n    return this.actualFunction.lookup(name);\r\n  }\r\n\r\n  /** Tests if the local at the specified index has the specified flag or flags. */\r\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\r\n  }\r\n\r\n  /** Tests if the local at the specified index has any of the specified flags. */\r\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\r\n  }\r\n\r\n  /** Sets the specified flag or flags on the local at the specified index. */\r\n  setLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags | flag;\r\n  }\r\n\r\n  /** Unsets the specified flag or flags on the local at the specified index. */\r\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags & ~flag;\r\n  }\r\n\r\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\r\n  pushBreakLabel(): string {\r\n    var parentFunction = this.parentFunction;\r\n    var id = parentFunction.nextBreakId++;\r\n    var stack = parentFunction.breakStack;\r\n    if (!stack) parentFunction.breakStack = [ id ];\r\n    else stack.push(id);\r\n    return parentFunction.breakLabel = id.toString(10);\r\n  }\r\n\r\n  /** Pops the most recent break label from the stack. */\r\n  popBreakLabel(): void {\r\n    var parentFunction = this.parentFunction;\r\n    var stack = assert(parentFunction.breakStack);\r\n    var length = assert(stack.length);\r\n    stack.pop();\r\n    if (length > 1) {\r\n      parentFunction.breakLabel = stack[length - 2].toString(10);\r\n    } else {\r\n      parentFunction.breakLabel = null;\r\n      parentFunction.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    this.set(other.flags & FlowFlags.ANY_CONDITIONAL);\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n    var localFlags = other.localFlags;\r\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\r\n      let flags = localFlags[i];\r\n      this.setLocalFlag(i, flags & LocalFlags.ANY_CONDITIONAL);\r\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\r\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\r\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\r\n\r\n    // conditional flags set in any arm\r\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\r\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\r\n\r\n    // categorical flags in either arm as conditional\r\n    this.inheritConditional(left);\r\n    this.inheritConditional(right);\r\n\r\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\r\n    var leftLocalFlags = left.localFlags;\r\n    var numLeftLocalFlags = leftLocalFlags.length;\r\n    var rightLocalFlags = right.localFlags;\r\n    var numRightLocalFlags = rightLocalFlags.length;\r\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\r\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        unchecked(leftLocalFlags[i]),\r\n        i < numRightLocalFlags\r\n          ? unchecked(rightLocalFlags[i])\r\n          : 0\r\n      );\r\n    }\r\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        0,\r\n        unchecked(rightLocalFlags[i])\r\n      );\r\n    }\r\n    this.localFlags = combinedFlags;\r\n  }\r\n\r\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\r\n  isNonnull(expr: ExpressionRef, type: Type): bool {\r\n    if (!type.is(TypeFlags.NULLABLE)) return true;\r\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\r\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\r\n    // has already been handled by the nullable type check above.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isLocalTee(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\r\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\r\n    // A: `expr` is true-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isLocalTee(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\r\n        break;\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifFalse = getIfFalse(expr);\r\n        if (!ifFalse) break;\r\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\r\n          // Logical AND: (if (condition ifTrue 0))\r\n          // the only way this had become true is if condition and ifTrue are true\r\n          if (\r\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\r\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\r\n          ) {\r\n            this.inheritNonnullIfTrue(getIfCondition(expr));\r\n            this.inheritNonnullIfTrue(getIfTrue(expr));\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Call: {\r\n        let name = getCallTarget(expr);\r\n        let program = this.parentFunction.program;\r\n        switch (name) {\r\n          case program.retainInstance.internalName: {\r\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\r\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\r\n    // A: `expr` is false-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifTrue = getIfTrue(expr);\r\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\r\n          let ifFalse = getIfFalse(expr);\r\n          if (!ifFalse) break;\r\n          // Logical OR: (if (condition 1 ifFalse))\r\n          // the only way this had become false is if condition and ifFalse are false\r\n          if (\r\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\r\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\r\n          ) {\r\n            this.inheritNonnullIfFalse(getIfCondition(expr));\r\n            this.inheritNonnullIfFalse(getIfFalse(expr));\r\n          }\r\n\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          // remember: we want to know how the _entire_ expression became FALSE (!)\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possible combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.LocalSet: { // tee\r\n        assert(isLocalTee(expr));\r\n        return this.canOverflow(getLocalSetValue(expr), type);\r\n      }\r\n\r\n      // overflows if the conversion does (globals are wrapped on set)\r\n      case ExpressionId.GlobalGet: {\r\n        // TODO: this is inefficient because it has to read a string\r\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\r\n        assert(global.kind == ElementKind.GLOBAL);\r\n        return canConversionOverflow(assert((<Global>global).type), type);\r\n      }\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        let signed = isLoadSigned(expr);\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\r\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.parentFunction.program;\r\n        let instancesByName = program.instancesByName;\r\n        let instanceName = assert(getCallTarget(expr));\r\n        if (instancesByName.has(instanceName)) {\r\n          let instance = instancesByName.get(instanceName)!;\r\n          assert(instance.kind == ElementKind.FUNCTION);\r\n          let returnType = (<Function>instance).signature.returnType;\r\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n              || canConversionOverflow(returnType, type);\r\n        }\r\n        return false; // assume no overflow for builtins\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  toString(): string {\r\n    var levels = 0;\r\n    var parent = this.parent;\r\n    while (parent) {\r\n      parent = parent.parent;\r\n      ++levels;\r\n    }\r\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromType.size > toType.size\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n\r\n/** Finds all indexes of locals used in the specified expression. */\r\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\r\n  traverse(expr, used, findUsedLocalsVisit);\r\n  return used;\r\n}\r\n\r\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\r\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\r\n  switch (getExpressionId(expr)) {\r\n    case ExpressionId.LocalGet: {\r\n      used.add(getLocalGetIndex(expr));\r\n      break;\r\n    }\r\n    case ExpressionId.LocalSet: {\r\n      used.add(getLocalSetIndex(expr));\r\n      // fall-through for value\r\n    }\r\n    default: traverse(expr, used, findUsedLocalsVisit);\r\n  }\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  BuiltinSymbols,\r\n  compileCall as compileBuiltinCall,\r\n  compileAbort,\r\n  compileVisitGlobals,\r\n  compileVisitMembers,\r\n  compileRTTI,\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getLocalGetIndex,\r\n  isLocalTee,\r\n  getLocalSetIndex,\r\n  FeatureFlags,\r\n  needsExplicitUnreachable,\r\n  getLocalSetValue\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  CommonSymbols,\r\n  INDEX_SUFFIX,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  ConstantValueKind,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n  PropertyPrototype,\r\n  IndexSignature,\r\n  File,\r\n  mangleInternalName\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow,\r\n  LocalFlags,\r\n  findUsedLocals\r\n} from \"./flow\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  NamedTypeNode,\r\n  Range,\r\n  DecoratorKind,\r\n  AssertionKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FieldDeclaration,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n\r\n  nodeIsConstantValue,\r\n  findDecorator,\r\n  isTypeOmitted,\r\n  ExportDefaultStatement,\r\n  SourceKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64,\r\n  makeMap\r\n} from \"./util\";\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\r\n  sharedMemory: i32 = 0;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** If true, generates an explicit start function. */\r\n  explicitStart: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Features to activate by default. These are the finished proposals. */\r\n  features: Feature = Feature.MUTABLE_GLOBALS;\r\n  /** If true, disallows unsafe features in user code. */\r\n  noUnsafe: bool = false;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Various constraints in expression compilation. */\r\nexport const enum Constraints {\r\n  NONE = 0,\r\n\r\n  /** Must implicitly convert to the target type. */\r\n  CONV_IMPLICIT = 1 << 0,\r\n  /** Must explicitly convert to the target type. */\r\n  CONV_EXPLICIT = 1 << 1,\r\n  /** Must wrap small integer values to match the target type. */\r\n  MUST_WRAP = 1 << 2,\r\n\r\n  /** Indicates that the value will be dropped immediately. */\r\n  WILL_DROP = 1 << 3,\r\n  /** Indicates that the value will be retained immediately. */\r\n  WILL_RETAIN = 1 << 4,\r\n  /** Indicates that static data is preferred. */\r\n  PREFER_STATIC = 1 << 5\r\n}\r\n\r\n/** Runtime features to be activated by the compiler. */\r\nexport const enum RuntimeFeatures {\r\n  NONE = 0,\r\n  /** Requires heap setup. */\r\n  HEAP = 1 << 0,\r\n  /** Requires runtime type information setup. */\r\n  RTTI = 1 << 1,\r\n  /** Requires the built-in globals visitor. */\r\n  visitGlobals = 1 << 2,\r\n  /** Requires the built-in members visitor. */\r\n  visitMembers = 1 << 3\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  get resolver(): Resolver { return this.program.resolver; }\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current control flow. */\r\n  currentFlow: Flow;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function statements. */\r\n  currentBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: string[] = [ \"null\" ];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Requires runtime features. */\r\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\r\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\r\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n    var featureFlags: BinaryenFeatureFlags = 0;\r\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\r\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\r\n    if (this.options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\r\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\r\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\r\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\r\n    if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\r\n    if (this.options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\r\n    if (this.options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\r\n    this.module.setFeatures(featureFlags);\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the main start function\r\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature(program, [], Type.void));\r\n    startFunctionInstance.internalName = \"start\";\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentFlow = startFunctionInstance.flow;\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // add a mutable heap and rtti base dummies\r\n    if (options.isWasm64) {\r\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\r\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\r\n    } else {\r\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\r\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\r\n    }\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var files = program.filesByName;\r\n    for (let file of files.values()) {\r\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\r\n        this.compileFile(file);\r\n        this.compileExports(file);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty or explicitly requested\r\n    var startIsEmpty = !startFunctionBody.length;\r\n    var explicitStart = options.explicitStart;\r\n    if (!startIsEmpty || explicitStart) {\r\n      let signature = startFunctionInstance.signature;\r\n      if (!startIsEmpty && explicitStart) {\r\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\r\n        startFunctionBody.unshift(\r\n          module.if(\r\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\r\n            module.return(),\r\n            module.global_set(BuiltinSymbols.started, module.i32(1))\r\n          )\r\n        );\r\n      }\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.block(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!explicitStart) module.setStart(funcRef);\r\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\r\n    }\r\n\r\n    // compile runtime features\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\r\n    module.removeGlobal(BuiltinSymbols.rtti_base);\r\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\r\n\r\n    // update the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    module.removeGlobal(BuiltinSymbols.heap_base);\r\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          BuiltinSymbols.heap_base,\r\n          NativeType.I64,\r\n          false,\r\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          BuiltinSymbols.heap_base,\r\n          NativeType.I32,\r\n          false,\r\n          module.i32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up memory\r\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\r\n    module.setMemory(\r\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\r\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n        : 0,\r\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\",\r\n      isSharedMemory\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\r\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\r\n\r\n    // set up module exports\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\r\n    }\r\n    return module;\r\n  }\r\n\r\n  // === Exports ==================================================================================\r\n\r\n  /** Applies the respective module exports for the specified file. */\r\n  private ensureModuleExports(file: File): void {\r\n    var members = file.exports;\r\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar)  {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\r\n    }\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n    switch (element.kind) {\r\n\r\n      // traverse instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instances = (<FunctionPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instances = (<ClassPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getter = (<PropertyPrototype>element).getterPrototype;\r\n        let setter = (<PropertyPrototype>element).setterPrototype;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export concrete elements\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<Global>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<EnumValue>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = (<Property>element).getterInstance;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterInstance;\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        // make the class name itself represent its runtime id\r\n        if (!(<Class>element).type.isUnmanaged) {\r\n          let module = this.module;\r\n          let internalName = (<Class>element).internalName;\r\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\r\n          module.addGlobalExport(internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // just traverse members below\r\n      case ElementKind.ENUM:\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.FILE:\r\n      case ElementKind.TYPEDEFINITION:\r\n      case ElementKind.INDEXSIGNATURE: break;\r\n\r\n      default: assert(false); // unexpected module export\r\n    }\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (\r\n        element.kind == ElementKind.NAMESPACE ||\r\n        element.kind == ElementKind.FILE\r\n      ) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes a function to get the value of a field of an exported class. */\r\n  private ensureModuleFieldGetter(name: string, field: Field): void {\r\n    var type = field.type;\r\n    var module = this.module;\r\n    var usizeType = this.options.usizeType;\r\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\r\n      module.local_get(0, usizeType.toNativeType()),\r\n      type.toNativeType(), field.memoryOffset\r\n    );\r\n    // a user-defined getter would return a retained value, so:\r\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType(null, type, usizeType),\r\n      null,\r\n      loadExpr\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  /** Makes a function to set the value of a field of an exported class. */\r\n  private ensureModuleFieldSetter(name: string, field: Field): void {\r\n    var type = field.type;\r\n    var module = this.module;\r\n    var nativeType = type.toNativeType();\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = usizeType.toNativeType();\r\n    var valueExpr = module.local_get(1, nativeType);\r\n    if (type.isManaged) {\r\n      valueExpr = this.makeRetainRelease(\r\n        module.load(type.byteSize, false, // oldRef\r\n          module.local_get(0, nativeSizeType),\r\n          nativeType, field.memoryOffset\r\n        ),\r\n        valueExpr // newRef\r\n      );\r\n    }\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType([ type ], Type.void, usizeType),\r\n      null,\r\n      module.store(\r\n        type.byteSize,\r\n        module.local_get(0, nativeSizeType),\r\n        valueExpr,\r\n        nativeType,\r\n        field.memoryOffset\r\n      )\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  // === Elements =================================================================================\r\n\r\n  /** Compiles any element. */\r\n  compileElement(element: Element, compileMembers: bool = true): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        this.compileGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\r\n        }\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.TYPEDEFINITION:\r\n      case ElementKind.ENUMVALUE:\r\n      case ElementKind.INDEXSIGNATURE: break;\r\n      default: assert(false, ElementKind[element.kind]);\r\n    }\r\n    if (compileMembers) this.compileMembers(element);\r\n  }\r\n\r\n  /** Compiles an element's members. */\r\n  compileMembers(element: Element): void {\r\n    var members = element.members;\r\n    if (members) for (let element of members.values()) this.compileElement(element);\r\n  }\r\n\r\n  /** Compiles a file's exports. */\r\n  compileExports(file: File): void {\r\n    var exports = file.exports;\r\n    if (exports) for (let element of exports.values()) this.compileElement(element);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) {\r\n      for (let exportStar of exportsStar) {\r\n        this.compileFile(exportStar);\r\n        this.compileExports(exportStar);\r\n      }\r\n    }\r\n  }\r\n\r\n  // files\r\n\r\n  /** Compiles the file matching the specified path. */\r\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var file: File;\r\n    var filesByName = this.program.filesByName;\r\n    var pathWithIndex: string;\r\n    if (filesByName.has(normalizedPathWithoutExtension)) {\r\n      file = filesByName.get(normalizedPathWithoutExtension)!;\r\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\r\n      file = filesByName.get(pathWithIndex)!;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n      return;\r\n    }\r\n    this.compileFile(file);\r\n  }\r\n\r\n  /** Compiles the specified file. */\r\n  compileFile(file: File): void {\r\n    if (file.is(CommonFlags.COMPILED)) return;\r\n    file.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements within the file's start function\r\n    var startFunction = file.startFunction;\r\n    var previousBody = this.currentBody;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // compile top-level statements\r\n    var previousFlow = this.currentFlow;\r\n    var flow = startFunction.flow;\r\n    this.currentFlow = flow;\r\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\r\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\r\n    }\r\n    this.finishAutoreleases(flow, startFunctionBody);\r\n    this.currentFlow = previousFlow;\r\n    this.currentBody = previousBody;\r\n\r\n    // if top-level statements are present, make the per-file start function and call it in start\r\n    if (startFunctionBody.length) {\r\n      let module = this.module;\r\n      let locals = startFunction.localsByIndex;\r\n      let numLocals = locals.length;\r\n      let varTypes = new Array<NativeType>(numLocals);\r\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\r\n      module.addFunction(\r\n        startFunction.internalName,\r\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\r\n        varTypes,\r\n        startFunctionBody.length > 1\r\n          ? module.block(null, startFunctionBody)\r\n          : startFunctionBody[0]\r\n      );\r\n      previousBody.push(\r\n        module.call(startFunction.internalName, null, NativeType.None)\r\n      );\r\n    }\r\n  }\r\n\r\n  // === Globals ==================================================================================\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var initExpr: ExpressionRef = 0;\r\n    var initAutoreleaseSkipped: bool = false;\r\n    var typeNode = global.typeNode;\r\n    var initializerNode = global.initializerNode;\r\n\r\n    if (!global.is(CommonFlags.RESOLVED)) {\r\n\r\n      // Resolve type if annotated\r\n      if (typeNode) {\r\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\r\n        if (!resolvedType) return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(resolvedType);\r\n\r\n      // Otherwise infer type from initializer\r\n      } else if (initializerNode) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\r\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(this.currentType);\r\n\r\n      // Error if there's neither a type nor an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          global.identifierNode.range.atEnd\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\r\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\r\n      return true;\r\n    }\r\n\r\n    var type = global.type;\r\n    var nativeType = type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    // Handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // Constant global or mutable globals enabled\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        mangleImportName(global, global.declaration);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType,\r\n          !isDeclaredConstant\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // Importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          global.declaration.range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // The MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // Evaluate initializer if present\r\n    if (initializerNode) {\r\n      if (!initExpr) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, type,\r\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // Explicitly inline if annotated\r\n      if (isDeclaredInline) {\r\n        if (initializeInStart) {\r\n          this.warning(\r\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\r\n            initializerNode.range\r\n          );\r\n        } else {\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // Initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      if (isDeclaredInline) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\r\n        );\r\n      }\r\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\r\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\r\n      this.currentBody.push(\r\n        module.global_set(internalName, initExpr)\r\n      );\r\n    } else if (!isDeclaredInline) { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // === Enums ====================================================================================\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueNode = val.valueNode;\r\n        val.set(CommonFlags.COMPILED);\r\n        let previousFlow = this.currentFlow;\r\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = element.file.startFunction.flow;\r\n        }\r\n        let initExpr: ExpressionRef;\r\n        if (valueNode) {\r\n          initExpr = this.compileExpression(valueNode, Type.i32,\r\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            initExpr = module.precomputeExpression(initExpr);\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              if (element.is(CommonFlags.CONST)) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueNode.range\r\n                );\r\n              }\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.i32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              (<EnumValue>member).identifierNode.range.atEnd\r\n            );\r\n          }\r\n          initExpr = module.binary(BinaryOp.AddI32,\r\n            module.global_get(previousValue.internalName, NativeType.I32),\r\n            module.i32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                member.declaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        this.currentFlow = previousFlow;\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\r\n          this.currentBody.push(\r\n            this.makeGlobalAssignment(val, initExpr, false)\r\n          );\r\n          previousValueIsMut = true;\r\n        } else {\r\n          if (isInline) {\r\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\r\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\r\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            }\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n          }\r\n          val.isImmutable = true;\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // === Functions ================================================================================\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: NamedTypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): Function | null {\r\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return null;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles the body of a function within the specified flow. */\r\n  compileFunctionBody(\r\n    /** Function to compile. */\r\n    instance: Function,\r\n    /** Target array of statements. */\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var module = this.module;\r\n    var bodyNode = assert(instance.prototype.bodyNode);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = this.currentFlow;\r\n\r\n    // compile statements\r\n    if (bodyNode.kind == NodeKind.BLOCK) {\r\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\r\n    } else {\r\n      // must be an expression statement if not a block\r\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\r\n\r\n      // must be an arrow function\r\n      assert(instance.prototype.arrowKind);\r\n\r\n      // none of the following can be an arrow function\r\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n\r\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      if (!stmts) stmts = [ expr ];\r\n      else stmts.push(expr);\r\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\r\n        let indexBefore = stmts.length;\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n        let canOverflow = flow.canOverflow(expr, returnType);\r\n        let nonNull = flow.isNonnull(expr, returnType);\r\n        if (stmts.length > indexBefore) {\r\n          let temp = flow.getAndFreeTempLocal(returnType);\r\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\r\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\r\n        }\r\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\r\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\r\n      }\r\n    }\r\n\r\n    // make constructors return their instance pointer\r\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n      assert(instance.is(CommonFlags.INSTANCE));\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n\r\n      if (!flow.is(FlowFlags.TERMINATES)) {\r\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n\r\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\r\n        if (!flow.is(FlowFlags.ALLOCATES)) {\r\n          // {\r\n          //   if (!this) this = <ALLOC>\r\n          //   this.a = X\r\n          //   this.b = Y\r\n          // }\r\n          stmts.push(\r\n            module.if(\r\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                module.local_get(thisLocal.index, nativeSizeType)\r\n              ),\r\n              module.local_set(thisLocal.index,\r\n                this.makeRetain(\r\n                  this.makeAllocation(<Class>classInstance)\r\n                ),\r\n              )\r\n            )\r\n          );\r\n          this.makeFieldInitialization(<Class>classInstance, stmts);\r\n        }\r\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\r\n        this.finishAutoreleases(flow, stmts);\r\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\r\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\r\n      }\r\n\r\n      // check that super has been called if this is a derived class\r\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\r\n        this.error(\r\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\r\n          instance.prototype.declaration.range\r\n        );\r\n      }\r\n\r\n    // if this is a normal function, make sure that all branches terminate\r\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        instance.prototype.functionTypeNode.returnType.range\r\n      );\r\n    }\r\n\r\n    return stmts;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n\r\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var signature = instance.signature;\r\n    var bodyNode = instance.prototype.bodyNode;\r\n\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var funcRef: FunctionRef;\r\n\r\n    // concrete function\r\n    if (bodyNode) {\r\n\r\n      // must not be ambient\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      // cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decoratorNodes = instance.decoratorNodes;\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n      // compile body in this function's context\r\n      let previousFlow = this.currentFlow;\r\n      let flow = instance.flow;\r\n      this.currentFlow = flow;\r\n      let stmts = new Array<ExpressionRef>();\r\n\r\n      // retain each argument for as long as the function lives\r\n      let index = 0;\r\n      let thisType = signature.thisType;\r\n      if (thisType) {\r\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n        ++index;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\r\n        let type = parameterTypes[i];\r\n        if (type.isManaged) {\r\n          stmts.push(\r\n            module.drop(\r\n              this.makeRetain(\r\n                module.local_get(index, type.toNativeType())\r\n              )\r\n            )\r\n          );\r\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\r\n        }\r\n      }\r\n\r\n      this.compileFunctionBody(instance, stmts);\r\n      if (!flow.is(FlowFlags.TERMINATES)) {\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n      }\r\n      this.currentFlow = previousFlow;\r\n\r\n      // create the function\r\n      funcRef = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\r\n      );\r\n\r\n    // imported function\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\r\n\r\n      // create the import\r\n      module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n      funcRef = module.getFunction(instance.internalName);\r\n    }\r\n\r\n    instance.finalize(module, funcRef);\r\n    this.currentType = previousType;\r\n    return true;\r\n  }\r\n\r\n  // === Classes ==================================================================================\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: NamedTypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    var prototype = instance.prototype;\r\n    var staticMembers = (<ClassPrototype>prototype).members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                (<FunctionPrototype>element).identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let getter = (<PropertyPrototype>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                getter.identifierNode\r\n              );\r\n            }\r\n            let setter = (<PropertyPrototype>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                setter.identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterInstance;\r\n            if (getter) this.compileFunction(getter);\r\n            let setter = (<Property>element).setterInstance;\r\n            if (setter) this.compileFunction(setter);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: NamedTypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // === Memory ===================================================================================\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var rtHeaderSize = program.runtimeHeaderSize;\r\n    var stringInstance = assert(program.stringInstance);\r\n    var stringSegment: MemorySegment;\r\n    var segments = this.stringSegments;\r\n    if (segments.has(stringValue)) {\r\n      stringSegment = segments.get(stringValue)!; // reuse\r\n    } else {\r\n      let length = stringValue.length;\r\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\r\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\r\n      for (let i = 0; i < length; ++i) {\r\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\r\n      }\r\n      stringSegment = this.addMemorySegment(buffer);\r\n      segments.set(stringValue, stringSegment);\r\n    }\r\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\r\n    this.currentType = stringInstance.type;\r\n    if (this.options.isWasm64) {\r\n      return this.module.i64(i64_low(ref), i64_high(ref));\r\n    } else {\r\n      assert(i64_is_u32(ref));\r\n      return this.module.i32(i64_low(ref));\r\n    }\r\n  }\r\n\r\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\r\n    var program = this.program;\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var bufferInstance = assert(program.arrayBufferInstance);\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\r\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\r\n    var pos = runtimeHeaderSize;\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buf, pos);\r\n              pos += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buf, pos);\r\n              pos += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buf, pos);\r\n              pos += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buf, pos);\r\n          pos += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    assert(pos == buf.length);\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\r\n    var program = this.program;\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\r\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\r\n    var arrayLength = i32(bufferLength / elementType.byteSize);\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\r\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\r\n\r\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\r\n    assert(!program.options.isWasm64); // TODO\r\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  // === Table ====================================================================================\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.internalName);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // === Statements ===============================================================================\r\n\r\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\r\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\r\n      statement = (<ExportDefaultStatement>statement).declaration;\r\n    }\r\n    switch (statement.kind) {\r\n      case NodeKind.CLASSDECLARATION: {\r\n        let memberStatements = (<ClassDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.ENUMDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\r\n        assert(element.kind == ElementKind.ENUM);\r\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        let memberStatements = (<NamespaceDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        let declarations = (<VariableStatement>statement).declarations;\r\n        for (let i = 0, k = declarations.length; i < k; ++i) {\r\n          let element = this.program.getElementByDeclaration(declarations[i]);\r\n          assert(element.kind == ElementKind.GLOBAL);\r\n          if (\r\n            !element.is(CommonFlags.AMBIENT) && // delay imports\r\n            !element.hasDecorator(DecoratorFlags.LAZY)\r\n          ) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.FIELDDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\r\n        if (element.kind == ElementKind.GLOBAL) { // static\r\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.EXPORT: {\r\n        if ((<ExportStatement>statement).internalPath != null) {\r\n          this.compileFileByPath(\r\n            <string>(<ExportStatement>statement).internalPath,\r\n            <StringLiteralExpression>(<ExportStatement>statement).path\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.IMPORT: {\r\n        this.compileFileByPath(\r\n          (<ImportStatement>statement).internalPath,\r\n          (<ImportStatement>statement).path\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION:\r\n      case NodeKind.METHODDECLARATION:\r\n      case NodeKind.INTERFACEDECLARATION:\r\n      case NodeKind.INDEXSIGNATUREDECLARATION:\r\n      case NodeKind.TYPEDECLARATION: break;\r\n      default: { // otherwise a top-level statement that is part of the start function's body\r\n        let stmt = this.compileStatement(statement);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  compileStatement(\r\n    statement: Statement,\r\n    isLastInBody: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.nop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // TODO: integrate inner type declaration into flow\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        stmt = module.unreachable();\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.unreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(\r\n    statements: Statement[],\r\n    isBody: bool = false,\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    if (!stmts) {\r\n      stmts = new Array<ExpressionRef>(numStatements);\r\n      stmts.length = 0;\r\n    }\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(\r\n    statement: BlockStatement\r\n  ): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var outerFlow = this.currentFlow;\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\r\n    this.currentFlow = outerFlow;\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileBreakStatement(\r\n    statement: BreakStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    var flow = this.currentFlow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var parent = flow.parent;\r\n    while (parent !== null && parent.breakLabel == breakLabel) {\r\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\r\n      parent = parent.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.br(breakLabel));\r\n    flow.set(FlowFlags.BREAKS);\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileContinueStatement(\r\n    statement: ContinueStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFlow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var current: Flow | null = flow.parent;\r\n    while (current && current.continueLabel === continueLabel) {\r\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\r\n      current = current.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.br(continueLabel));\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileDoStatement(\r\n    statement: DoStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(\r\n        this.compileStatement(statement.statement)\r\n      );\r\n    }\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.i32),\r\n        this.currentType\r\n      )\r\n    );\r\n    var alwaysFalse = false;\r\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n      assert(getExpressionType(condExpr) == NativeType.I32);\r\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\r\n    }\r\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\r\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\r\n\r\n    // (block $break            ;; (1) skip if no breaks\r\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\r\n    //   (...)                  ;; (3)\r\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\r\n    //  )\r\n    // )\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n\r\n    if (fallsThrough && !alwaysFalse) { // (4)\r\n      stmts.push(module.br(continueLabel, condExpr));\r\n    }\r\n    var expr = flatten(module, stmts, NativeType.None);\r\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\r\n      expr = module.loop(continueLabel, expr);\r\n    }\r\n    if (breaks) { // (1)\r\n      expr = module.block(breakLabel, [ expr ]);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    if (!terminates) this.performAutoreleases(innerFlow, stmts);\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    outerFlow.inherit(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  compileEmptyStatement(\r\n    statement: EmptyStatement\r\n  ): ExpressionRef {\r\n    return this.module.nop();\r\n  }\r\n\r\n  compileExpressionStatement(\r\n    statement: ExpressionStatement\r\n  ): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\r\n  }\r\n\r\n  compileForStatement(\r\n    statement: ForStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // Set up and use the inner flow\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    // Compile the initializer\r\n    var initializer = statement.initializer;\r\n    var initExpr: ExpressionRef = 0;\r\n    if (initializer) initExpr = this.compileStatement(initializer);\r\n\r\n    // Compile the condition\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = module.precomputeExpression(\r\n        this.makeIsTrueish(\r\n          this.compileExpression(<Expression>statement.condition, Type.bool),\r\n          this.currentType\r\n        )\r\n      );\r\n      // Simplify if the condition is constant\r\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n        assert(getExpressionType(condExpr) == NativeType.I32);\r\n        if (getConstValueI32(condExpr) == /* false */ 0) {\r\n          let stmts = new Array<ExpressionRef>();\r\n          if (initExpr) stmts.push(initExpr);\r\n          this.performAutoreleases(innerFlow, stmts);\r\n          innerFlow.freeScopedLocals();\r\n          outerFlow.popBreakLabel();\r\n          this.currentFlow = outerFlow;\r\n          return flatten(module, stmts, NativeType.None);\r\n        }\r\n        alwaysTrue = true;\r\n      }\r\n    } else { // Omitted condition is always true\r\n      condExpr = module.i32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n\r\n    // Compile incrementor\r\n    var incrementor = statement.incrementor;\r\n    var incrExpr: ExpressionRef = 0;\r\n    if (incrementor) incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\r\n\r\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\r\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; innerFlow.breakLabel = breakLabel;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    var loopLabel = \"loop|\" + label;\r\n    var bodyStatement = statement.statement;\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(this.compileStatement(bodyStatement));\r\n    }\r\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\r\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\r\n\r\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\r\n    //  (initializer)         ;; (2) [may be empty]\r\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\r\n    //   (br_if !cond $break) ;; (4) skip if always true\r\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\r\n    //    (...)               ;; (6)\r\n    //   )\r\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\r\n    //   (br $loop)           ;; (8) skip if skipping (3)\r\n    //  )\r\n    // )\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n    var needsLabel = !alwaysTrue || breaks;\r\n\r\n    var loop = new Array<ExpressionRef>();\r\n    if (!alwaysTrue) { // (4)\r\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\r\n    }\r\n    if (continues) { // (5)\r\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\r\n        loop.push(module.block(continueLabel, stmts));\r\n      }\r\n    } else {\r\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\r\n    }\r\n    var expr: ExpressionRef;\r\n    if (fallsThrough || continues) { // (3)\r\n      if (incrExpr) loop.push(incrExpr); // (7)\r\n      this.performAutoreleases(innerFlow, loop);\r\n      loop.push(module.br(loopLabel)); // (8)\r\n      if (initExpr) { // (2)\r\n        expr = module.block(needsLabel ? breakLabel : null, [\r\n          initExpr,\r\n          module.loop(loopLabel, module.block(null, loop))\r\n        ]);\r\n      } else {\r\n        expr = module.block(needsLabel ? breakLabel : null, [\r\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\r\n        ]);\r\n      }\r\n    } else {\r\n      if (initExpr) loop.unshift(initExpr); // (2)\r\n      this.performAutoreleases(innerFlow, loop);\r\n      expr = module.block(needsLabel ? breakLabel : null, loop);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(\r\n    statement: IfStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileStatement(ifTrue)\r\n        : ifFalse\r\n          ? this.compileStatement(ifFalse)\r\n          : module.nop();\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueStmts = new Array<ExpressionRef>();\r\n    var ifTrueFlow = outerFlow.fork();\r\n    this.currentFlow = ifTrueFlow;\r\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\r\n    if (ifTrue.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\r\n    } else {\r\n      ifTrueStmts.push(this.compileStatement(ifTrue));\r\n    }\r\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\r\n    ifTrueFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    if (ifFalse) {\r\n      let ifFalseFlow = outerFlow.fork();\r\n      this.currentFlow = ifFalseFlow;\r\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\r\n      let ifFalseStmts = new Array<ExpressionRef>();\r\n      if (ifFalse.kind == NodeKind.BLOCK) {\r\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\r\n      } else {\r\n        ifFalseStmts.push(this.compileStatement(ifFalse));\r\n      }\r\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\r\n      ifFalseFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n      return module.if(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None),\r\n        flatten(module, ifFalseStmts, NativeType.None)\r\n      );\r\n    } else {\r\n      outerFlow.inheritConditional(ifTrueFlow);\r\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\r\n      return module.if(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None)\r\n      );\r\n    }\r\n    // TODO: Detect neglected condition\r\n    // if (!foo) {\r\n    //   foo = [notNull]\r\n    // }\r\n    // foo // is possibly null\r\n  }\r\n\r\n  compileReturnStatement(\r\n    statement: ReturnStatement,\r\n    isLastInBody: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = this.currentFlow;\r\n    var returnType = flow.returnType;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\r\n\r\n    var valueExpression = statement.value;\r\n    if (valueExpression) {\r\n      if (returnType == Type.void) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          valueExpression.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let constraints = Constraints.CONV_IMPLICIT;\r\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\r\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\r\n\r\n      // when returning a local, and it is already retained, skip the final set\r\n      // of retaining it as the return value and releasing it as a variable\r\n      if (!this.skippedAutoreleases.has(expr)) {\r\n        if (returnType.isManaged) {\r\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\r\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\r\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // remember return states\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\r\n\r\n    } else if (returnType != Type.void) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        statement.range, \"void\", returnType.toString()\r\n      );\r\n      expr = module.unreachable();\r\n    }\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // Make sure that the return value is retained for the caller\r\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\r\n\r\n    if (returnType != Type.void && stmts.length) {\r\n      let temp = flow.getAndFreeTempLocal(returnType);\r\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n      stmts.unshift(\r\n        module.local_set(temp.index, expr)\r\n      );\r\n      expr = module.local_get(temp.index, returnType.toNativeType());\r\n    }\r\n    flow.freeScopedLocals();\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if (isLastInBody && expr && returnType != Type.void) {\r\n      if (!stmts.length) return expr;\r\n      stmts.push(expr);\r\n      return module.block(null, stmts, returnType.toNativeType());\r\n    }\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\r\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\r\n      // stmts.push(module.createUnreachable());\r\n      return module.block(null, stmts);\r\n    }\r\n\r\n    // Otherwise emit a normal return\r\n    if (!stmts.length) return module.return(expr);\r\n    stmts.push(module.return(expr));\r\n    return module.block(null, stmts);\r\n  }\r\n\r\n  compileSwitchStatement(\r\n    statement: SwitchStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var outerFlow = this.currentFlow;\r\n    var context = outerFlow.pushBreakLabel();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.local_set( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32,\r\n        Constraints.CONV_IMPLICIT\r\n      )\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.binary(BinaryOp.EqI32,\r\n            module.local_get(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32,\r\n              Constraints.CONV_IMPLICIT\r\n            )\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    outerFlow.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.br((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\r\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\r\n    var commonConditional = 0;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let innerFlow = outerFlow.fork();\r\n      this.currentFlow = innerFlow;\r\n      let breakLabel = \"break|\" + context;\r\n      innerFlow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminates = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n        }\r\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\r\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\r\n          break;\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\r\n        commonCategorical &= innerFlow.flags;\r\n      }\r\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n      // Switch back to the parent flow\r\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\r\n      innerFlow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      innerFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    outerFlow.popBreakLabel();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\r\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\r\n    // TODO: what about local states?\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(\r\n    statement: ThrowStatement\r\n  ): ExpressionRef {\r\n    var flow = this.currentFlow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    var value = statement.value;\r\n    var message: Expression | null = null;\r\n    if (value.kind == NodeKind.NEW) {\r\n      let newArgs = (<NewExpression>value).arguments;\r\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\r\n    }\r\n    stmts.push(compileAbort(this, message, statement));\r\n\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileTryStatement(\r\n    statement: TryStatement\r\n  ): ExpressionRef {\r\n    // TODO: can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\r\n  compileVariableStatement(\r\n    statement: VariableStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n    var flow = this.currentFlow;\r\n    var initializers = new Array<ExpressionRef>();\r\n    var resolver = this.resolver;\r\n\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      let initAutoreleaseSkipped = false;\r\n\r\n      // Resolve type if annotated\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\r\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n          );\r\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        }\r\n\r\n      // Otherwise infer type from initializer\r\n      } else if (declaration.initializer) {\r\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\r\n          Constraints.WILL_RETAIN\r\n        ); // reports\r\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n\r\n      // Error if there's neither a type nor an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n\r\n      // Handle constants, and try to inline if value is static\r\n      let isConst = declaration.is(CommonFlags.CONST);\r\n      let isStatic = false;\r\n      if (isConst) {\r\n        if (initExpr) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(name, -1, type, flow.parentFunction);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return module.unreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = flow.scopedLocals;\r\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.unreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isStatic = true;\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n\r\n      // Otherwise compile as mutable\r\n      if (!isStatic) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          let existingLocal = flow.getScopedLocal(name);\r\n          if (existingLocal) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, declaration.name.text\r\n            );\r\n            local = existingLocal;\r\n          } else {\r\n            local = flow.addScopedLocal(name, type);\r\n          }\r\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\r\n        } else {\r\n          if (flow.lookupLocal(name)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, name\r\n            );\r\n            continue;\r\n          }\r\n          local = flow.parentFunction.addLocal(type, name, declaration);\r\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\r\n        }\r\n        let isManaged = type.isManaged;\r\n        if (initExpr) {\r\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n          if (isManaged) {\r\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n            initializers.push(\r\n              module.local_set(local.index,\r\n                initAutoreleaseSkipped\r\n                  ? initExpr\r\n                  : this.makeRetain(initExpr)\r\n              )\r\n            );\r\n          } else {\r\n            initializers.push(\r\n              module.local_set(local.index, initExpr)\r\n            );\r\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\r\n            }\r\n          }\r\n        } else {\r\n          if (isManaged) {\r\n            // This is necessary because the first use (and assign) of the local could be taking place\r\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\r\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\r\n            // initialized but becomes released later on, whatever was stored before would be released.\r\n            // TODO: Detect this condition inside of a loop instead?\r\n            initializers.push(\r\n              module.local_set(local.index,\r\n                type.toNativeZero(module)\r\n              )\r\n            );\r\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\r\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return initializers.length == 0\r\n      ? 0\r\n      : flatten(module, initializers, NativeType.None);\r\n  }\r\n\r\n  compileVoidStatement(\r\n    statement: VoidStatement\r\n  ): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void,\r\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\r\n    );\r\n  }\r\n\r\n  compileWhileStatement(\r\n    statement: WhileStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // Compile condition\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Simplify if the condition is constant\r\n    var alwaysTrue = false;\r\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n      assert(getExpressionType(condExpr) == NativeType.I32);\r\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\r\n      alwaysTrue = true;\r\n    }\r\n\r\n    // Compile body\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(this.compileStatement(statement.statement));\r\n    }\r\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\r\n\r\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\r\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\r\n    //   (br_if !cond $break) ;; (3) skip if always true\r\n    //   (...)                ;; (4)\r\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\r\n    //  )\r\n    // )\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n\r\n    if (fallsThrough) { // (5)\r\n      this.performAutoreleases(innerFlow, stmts);\r\n      stmts.push(module.br(continueLabel));\r\n    }\r\n    if (!alwaysTrue) { // (3)\r\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\r\n    }\r\n    var expr = flatten(module, stmts, NativeType.None);\r\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\r\n      expr = module.loop(continueLabel, expr);\r\n    }\r\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\r\n      expr = module.block(breakLabel, [ expr ]);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  // === Expressions ==============================================================================\r\n\r\n  /** Compiles the value of an inlined constant element. */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.i32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.i64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.i64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.unreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    this.currentType = contextualType;\r\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.unreachable();\r\n      }\r\n    }\r\n    // ensure conversion and wrapping in case the respective function doesn't on its own\r\n    var currentType = this.currentType;\r\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\r\n    if (currentType != contextualType) {\r\n      if (constraints & Constraints.CONV_EXPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      }\r\n    }\r\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\r\n    // must go through this function, with the respective per-kind functions not being used directly.\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, constraints)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    /** Original type. */\r\n    fromType: Type,\r\n    /** New type. */\r\n    toType: Type,\r\n    /** Whether the conversion is explicit.*/\r\n    explicit: bool,\r\n    /** Whether the result should be wrapped, if a small integer. */\r\n    wrap: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\r\n\r\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (!explicit) {\r\n        if (fromType.nonNullableType == toType) {\r\n          this.error(\r\n            DiagnosticCode.Object_is_possibly_null,\r\n            reportNode.range\r\n          ); // recoverable\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n            reportNode.range, fromType.toString(), toType.toString()\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.unary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.unary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType == Type.bool) {\r\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType == Type.bool) {\r\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.drop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (toType == Type.bool) {\r\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\r\n          wrap = false;\r\n        } else if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.unary(\r\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrap = false;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrap = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrap\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(\r\n    expression: AssertionExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\r\n    switch (expression.assertionKind) {\r\n      case AssertionKind.PREFIX:\r\n      case AssertionKind.AS: {\r\n        let flow = this.currentFlow;\r\n        let toType = this.resolver.resolveType( // reports\r\n          assert(expression.toType),\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!toType) return this.module.unreachable();\r\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\r\n      }\r\n      case AssertionKind.NONNULL: {\r\n        assert(!expression.toType);\r\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\r\n        let type = this.currentType;\r\n        if (this.currentFlow.isNonnull(expr, type)) {\r\n          this.info(\r\n            DiagnosticCode.Expression_is_never_null,\r\n            expression.expression.range\r\n          );\r\n        } else if (!this.options.noAssert) {\r\n          let module = this.module;\r\n          let flow = this.currentFlow;\r\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\r\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\r\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\r\n          expr = module.if(\r\n            module.local_tee(tempIndex, expr),\r\n            module.local_get(tempIndex, type.toNativeType()),\r\n            module.unreachable()\r\n          );\r\n        }\r\n        this.currentType = this.currentType.nonNullableType;\r\n        return expr;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"<\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \">\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"<=\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \">=\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.unary(UnaryOp.AllTrueI8x16,\r\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ANYREF: {\r\n            // TODO: ref.eq\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.unreachable();\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\r\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ANYREF: {\r\n            // TODO: !ref.eq\r\n            this.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              expression.range\r\n            );\r\n            expr = module.unreachable();\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"+\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"-\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"*\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"**\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        let targetType = leftType;\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            this.currentType, Type.f64,\r\n            false, false,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.unreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n          if (compound && targetType != this.currentType) {\r\n            // this yields a proper error if target is i32 for example\r\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"/\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"%\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.unreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.unreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"<<\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"<<\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \">>\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \">>\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \">>>\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \">>>\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"&\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"&\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"|\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"|\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"^\", leftType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"^\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\r\n        let flow = this.currentFlow;\r\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\r\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfTrue(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            this.makeIsTrueish(rightExpr, rightType),\r\n            module.i32(0)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.local_tee(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInElse = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInElse = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.local_get(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            rightExpr,\r\n            retainLeftInElse\r\n              ? this.makeRetain(\r\n                  module.local_get(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.local_get(temp.index, leftType.toNativeType())\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.if(\r\n              this.makeIsTrueish(leftExpr, this.currentType),\r\n              rightExpr,\r\n              expr\r\n            );\r\n\r\n          // if not possible, tee left to a temp\r\n          } else {\r\n            let tempLocal = flow.getTempLocal(leftType);\r\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\r\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\r\n            expr = module.if(\r\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\r\n              rightExpr,\r\n              module.local_get(tempLocal.index, leftType.toNativeType())\r\n            );\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\r\n        let flow = this.currentFlow;\r\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\r\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfFalse(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            module.i32(1),\r\n            this.makeIsTrueish(rightExpr, rightType)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.local_tee(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInThen = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInThen = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\r\n            // TODO: usually, false'ish means left is null, but this might not hold\r\n            // once implicit conversion with strings is performed and left is \"\", so:\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.local_get(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            retainLeftInThen\r\n              ? this.makeRetain(\r\n                  module.local_get(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.local_get(temp.index, leftType.toNativeType()),\r\n            rightExpr\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.if(\r\n              this.makeIsTrueish(leftExpr, leftType),\r\n              expr,\r\n              rightExpr\r\n            );\r\n\r\n          // if not possible, tee left to a temp. local\r\n          } else {\r\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\r\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\r\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\r\n            expr = module.if(\r\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\r\n              module.local_get(tempLocal.index, leftType.toNativeType()),\r\n              rightExpr\r\n            );\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.unreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = resolver.lookupExpression(left, this.currentFlow);\r\n    if (!target) return module.unreachable();\r\n    var targetType = resolver.getTypeOfElement(target) || Type.void;\r\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, this.currentType.toString(), targetType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    return this.makeAssignment(\r\n      target,\r\n      expr, // TODO: delay release above if possible?\r\n      left,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\r\n    // is a bad idea currently. so this assumes that the type matches.\r\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var rightType: Type;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      rightType = operatorInstance.signature.parameterTypes[0];\r\n    } else {\r\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\r\n      // local states, like having retained locals that actually do not even exist, possibly\r\n      // releasing something random in that local before and evil things like that. Hence this\r\n      // assumes that LHS type matches, which in turn means that static overloads must be\r\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\r\n      // things like multiple static overloads for different combinations of LHS/RHS types.\r\n      // We might want that at some point of course, but requires to complete the resolver so\r\n      // it can actually resolve every kind of expression without ever having to recompile.\r\n      rightType = operatorInstance.signature.parameterTypes[1];\r\n    }\r\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\r\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var flow = this.currentFlow;\r\n    var target = resolver.lookupExpression(expression, flow); // reports\r\n    if (!target) return this.module.unreachable();\r\n    var thisExpression = resolver.currentThisExpression;\r\n    var elementExpression = resolver.currentElementExpression;\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        // not yet compiled if a static field compiled as a global\r\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return this.module.unreachable();\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n        break;\r\n      }\r\n      case ElementKind.INDEXSIGNATURE: {\r\n        let parent = (<IndexSignature>target).parent;\r\n        assert(parent.kind == ElementKind.CLASS);\r\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n        if (!indexedSet) {\r\n          let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, (<Class>parent).internalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, (<Class>parent).internalName\r\n            );\r\n          }\r\n          return this.module.unreachable();\r\n        }\r\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\r\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.unreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    return this.makeAssignment(\r\n      target,\r\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\r\n      expression,\r\n      thisExpression,\r\n      elementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  /** Makes an assignment expression or block, assigning a value to a target. */\r\n  makeAssignment(\r\n    /** Target element, e.g. a Local. */\r\n    target: Element,\r\n    /** Value expression that has been compiled in a previous step already. */\r\n    valueExpr: ExpressionRef,\r\n    /** Expression reference. Has already been compiled to `valueExpr`. */\r\n    valueExpression: Expression,\r\n    /** `this` expression reference if a field or property set. */\r\n    thisExpression: Expression | null,\r\n    /** Index expression reference if an indexed set. */\r\n    indexExpression: Expression | null,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\r\n    // everything else must insert the skipped autorelease now. See (*)\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          this.currentType = tee ? (<Local>target).type : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\r\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range,\r\n            target.internalName\r\n          );\r\n          this.currentType = tee ? (<Global>target).type : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let initializerNode = (<Field>target).initializerNode;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            initializerNode\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, (<Field>target).internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        return this.makeFieldAssignment(<Field>target,\r\n          valueExpr,\r\n          // FIXME: explicit type (currently fails due to missing null checking)\r\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\r\n          tee\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return module.unreachable();\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\r\n        // otherwise call the setter first, then the getter\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!getterInstance) return module.unreachable();\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        return module.block(null, [\r\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\r\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) {\r\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\r\n        }\r\n        // otherwise call the setter first, then the getter\r\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\r\n        let tempLocalIndex = tempLocal.index;\r\n        return module.block(null, [\r\n          this.makeCallDirect(setterInstance, [ // set and remember the target\r\n            module.local_tee(tempLocalIndex, thisExpr),\r\n            valueExpr\r\n          ], valueExpression),\r\n          this.makeCallDirect(getterInstance, [ // get from remembered target\r\n            module.local_get(tempLocalIndex, nativeReturnType)\r\n          ], valueExpression)\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.INDEXSIGNATURE: {\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let parent = (<IndexSignature>target).parent;\r\n        assert(parent.kind == ElementKind.CLASS);\r\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            valueExpression.range, parent.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n        if (!indexedSet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n            valueExpression.range, parent.internalName\r\n          );\r\n          this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        let targetType = (<Class>parent).type;\r\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\r\n        if (tee) {\r\n          let tempLocalTarget = flow.getTempLocal(targetType);\r\n          let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\r\n          let returnType = indexedGet.signature.returnType;\r\n          flow.freeTempLocal(tempLocalTarget);\r\n          return module.block(null, [\r\n            this.makeCallDirect(indexedSet, [\r\n              module.local_tee(tempLocalTarget.index, thisExpr),\r\n              module.local_tee(tempLocalElement.index, elementExpr),\r\n              valueExpr\r\n            ], valueExpression),\r\n            this.makeCallDirect(indexedGet, [\r\n              module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n              module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n            ], valueExpression)\r\n          ], returnType.toNativeType());\r\n        } else {\r\n          return this.makeCallDirect(indexedSet, [\r\n            thisExpr,\r\n            elementExpr,\r\n            valueExpr\r\n          ], valueExpression);\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      valueExpression.range\r\n    );\r\n    return module.unreachable();\r\n  }\r\n\r\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\r\n  private makeLocalAssignment(\r\n    /** The local to assign to. */\r\n    local: Local,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var type = local.type;\r\n    assert(type != Type.void);\r\n    var flow = this.currentFlow;\r\n    var localIndex = local.index;\r\n\r\n    if (type.is(TypeFlags.NULLABLE)) {\r\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\r\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\r\n    }\r\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\r\n\r\n    if (type.isManaged) {\r\n      let module = this.module;\r\n      let nativeType = type.toNativeType();\r\n\r\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n        if (this.skippedAutoreleases.has(valueExpr)) {\r\n          valueExpr = this.makeSkippedRelease(\r\n            module.local_get(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __skippedRelease(local, value))\r\n            this.currentType = type;\r\n            return module.local_tee(localIndex, valueExpr);\r\n          } else { // local = __skippedRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.local_set(localIndex, valueExpr);\r\n          }\r\n        } else {\r\n          valueExpr = this.makeRetainRelease(\r\n            module.local_get(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __retainRelease(local, value))\r\n            this.currentType = type;\r\n            return module.local_tee(localIndex, valueExpr);\r\n          } else { // local = __retainRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.local_set(localIndex, valueExpr);\r\n          }\r\n        }\r\n      } else {\r\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\r\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\r\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\r\n        if (tee) { // TEE(local = __retain(value, local))\r\n          this.currentType = type;\r\n          return module.local_tee(localIndex, valueExpr);\r\n        } else { // local = __retain(value, local)\r\n          this.currentType = Type.void;\r\n          return module.local_set(localIndex, valueExpr);\r\n        }\r\n      }\r\n    } else {\r\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n      }\r\n      if (tee) { // TEE(local = value)\r\n        this.currentType = type;\r\n        return this.module.local_tee(localIndex, valueExpr);\r\n      } else { // local = value\r\n        this.currentType = Type.void;\r\n        return this.module.local_set(localIndex, valueExpr);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\r\n  private makeGlobalAssignment(\r\n    /** The global to assign to. */\r\n    global: Global,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var type = global.type;\r\n    assert(type != Type.void);\r\n    var nativeType = type.toNativeType();\r\n\r\n    if (type.isManaged) {\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // (global = __skippedRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.block(null, [\r\n            module.global_set(global.internalName,\r\n              this.makeSkippedRelease(\r\n                module.global_get(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.global_get(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __skippedRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.global_set(global.internalName,\r\n            this.makeSkippedRelease(\r\n              module.global_get(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // (global = __retainRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.block(null, [\r\n            module.global_set(global.internalName,\r\n              this.makeRetainRelease(\r\n                module.global_get(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.global_get(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __retainRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.global_set(global.internalName,\r\n            this.makeRetainRelease(\r\n              module.global_get(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\r\n      if (tee) { // (global = value), global\r\n        this.currentType = type;\r\n        return module.block(null, [\r\n          module.global_set(global.internalName, valueExpr),\r\n          module.global_get(global.internalName, nativeType)\r\n        ], nativeType);\r\n      } else { // global = value\r\n        this.currentType = Type.void;\r\n        return module.global_set(global.internalName,\r\n          valueExpr\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\r\n  makeFieldAssignment(\r\n    /** The field to assign to. */\r\n    field: Field,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** The value of `this`. */\r\n    thisExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var fieldType = field.type;\r\n    var nativeFieldType = fieldType.toNativeType();\r\n    assert(field.parent.kind == ElementKind.CLASS);\r\n    var thisType = (<Class>field.parent).type;\r\n    var nativeThisType = thisType.toNativeType();\r\n\r\n    if (fieldType.isManaged && thisType.isManaged) {\r\n      let tempThis = flow.getTempLocal(thisType);\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return module.block(null, [\r\n            module.store(fieldType.byteSize,\r\n              module.local_tee(tempThis.index, thisExpr),\r\n              this.makeSkippedRelease(\r\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.local_get(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.local_tee(tempValue.index, valueExpr), // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.local_get(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.store(fieldType.byteSize,\r\n            module.local_tee(tempThis.index, thisExpr),\r\n            this.makeSkippedRelease(\r\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.local_get(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr, // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return module.block(null, [\r\n            module.store(fieldType.byteSize,\r\n              module.local_tee(tempThis.index, thisExpr),\r\n              this.makeRetainRelease(\r\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.local_get(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.local_tee(tempValue.index, valueExpr) // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.local_get(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.store(fieldType.byteSize,\r\n            module.local_tee(tempThis.index, thisExpr),\r\n            this.makeRetainRelease(\r\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.local_get(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      if (tee) { // (this.field = (t1 = value)), t1\r\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n        this.currentType = fieldType;\r\n        return module.block(null, [\r\n          module.store(fieldType.byteSize,\r\n            thisExpr,\r\n            module.local_tee(tempValue.index, valueExpr),\r\n            nativeFieldType, field.memoryOffset\r\n          ),\r\n          module.local_get(tempValue.index, nativeFieldType)\r\n        ], nativeFieldType);\r\n      } else { // this.field = value\r\n        this.currentType = Type.void;\r\n        return module.store(fieldType.byteSize,\r\n          thisExpr,\r\n          valueExpr,\r\n          nativeFieldType, field.memoryOffset\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Compiles a call expression according to the specified context. */\r\n  compileCallExpression(\r\n    /** Call expression to compile. */\r\n    expression: CallExpression,\r\n    /** Contextual type indicating the return type the caller expects, if any. */\r\n    contextualType: Type,\r\n    /** Constraints indicating contextual conditions. */\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // handle call to super\r\n    if (expression.expression.kind == NodeKind.SUPER) {\r\n      let flow = this.currentFlow;\r\n      let actualFunction = flow.actualFunction;\r\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n        this.error(\r\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n\r\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let baseClassInstance = assert((<Class>classInstance).base);\r\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n\r\n      // {\r\n      //   this = super(this || <ALLOC>, ...args)\r\n      //   this.a = X\r\n      //   this.b = Y\r\n      // }\r\n      let theCall = this.compileCallDirect(\r\n        this.ensureConstructor(baseClassInstance, expression),\r\n        expression.arguments,\r\n        expression,\r\n        module.if(\r\n          module.local_get(thisLocal.index, nativeSizeType),\r\n          module.local_get(thisLocal.index, nativeSizeType),\r\n          this.makeRetain(\r\n            this.makeAllocation(<Class>classInstance)\r\n          )\r\n        ),\r\n        Constraints.WILL_RETAIN\r\n      );\r\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\r\n      let stmts: ExpressionRef[] = [\r\n        module.local_set(thisLocal.index, theCall)\r\n      ];\r\n      this.makeFieldInitialization(<Class>classInstance, stmts);\r\n\r\n      // check that super had been called before accessing `this`\r\n      if (flow.isAny(\r\n        FlowFlags.ALLOCATES |\r\n        FlowFlags.CONDITIONALLY_ALLOCATES\r\n      )) {\r\n        this.error(\r\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\r\n      this.currentType = Type.void;\r\n      return module.block(null, stmts);\r\n    }\r\n\r\n    // otherwise resolve normally\r\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\r\n    if (!target) return module.unreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            flow.actualFunction.parent, // relative to caller\r\n            makeMap<string,Type>(flow.contextualTypeArguments),\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let contextualTypeArguments = makeMap<string,Type>(flow.contextualTypeArguments);\r\n\r\n          // fill up contextual types with auto for each generic component\r\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n          let numTypeParameters = typeParameterNodes.length;\r\n          let typeParameterNames = new Set<string>();\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let name = typeParameterNodes[i].name.text;\r\n            contextualTypeArguments.set(name, Type.auto);\r\n            typeParameterNames.add(name);\r\n          }\r\n\r\n          let parameterNodes = prototype.functionTypeNode.parameters;\r\n          let numParameters = parameterNodes.length;\r\n          let argumentNodes = expression.arguments;\r\n          let numArguments = argumentNodes.length;\r\n\r\n          // infer types with generic components while updating contextual types\r\n          for (let i = 0; i < numParameters; ++i) {\r\n            let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameters.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.unreachable();\r\n            }\r\n            let typeNode = parameterNodes[i].type;\r\n            if (typeNode.hasGenericComponent(typeParameterNodes)) {\r\n              this.resolver.inferGenericType(typeNode, argumentExpression, flow, contextualTypeArguments, typeParameterNames);\r\n            }\r\n          }\r\n\r\n          // apply concrete types to the generic function signature\r\n          let resolvedTypeArguments = Array.create<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let name = typeParameterNodes[i].name.text;\r\n            if (contextualTypeArguments.has(name)) {\r\n              let inferredType = contextualTypeArguments.get(name)!;\r\n              if (inferredType != Type.auto) {\r\n                resolvedTypeArguments[i] = inferredType;\r\n                continue;\r\n              }\r\n            }\r\n            // unused template, e.g. `function test<T>(): void {...}` called as `test()`\r\n            // invalid because the type is effectively unknown inside the function body\r\n            this.error(\r\n              DiagnosticCode.Type_argument_expected,\r\n              expression.expression.range.atEnd\r\n            );\r\n            return this.module.unreachable();\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            makeMap<string,Type>(flow.contextualTypeArguments)\r\n          );\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(prototype, null);\r\n        }\r\n        if (!instance) return this.module.unreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          constraints\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\r\n          indexArg = module.load(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\r\n        break;\r\n      }\r\n\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\r\n        if (!getterInstance) return module.unreachable();\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\r\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\r\n        );\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        break;\r\n      }\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression,\r\n      0,\r\n      contextualType == Type.void\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(typeParameterNodes),\r\n        typeArgumentNodes,\r\n        this.currentFlow.actualFunction.parent,\r\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.unreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Checks that an unsafe expression is allowed. */\r\n  private checkUnsafe(reportNode: Node): void {\r\n    // Library files may always use unsafe features\r\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\r\n      this.error(\r\n        DiagnosticCode.Expression_is_unsafe,\r\n        reportNode.range\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      this.currentType = signature.returnType;\r\n      return this.module.unreachable();\r\n    }\r\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\r\n\r\n    // Inline if explicitly requested\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let parameterTypes = signature.parameterTypes;\r\n        assert(numArguments <= parameterTypes.length);\r\n        // compile argument expressions\r\n        let args = new Array<ExpressionRef>(numArguments);\r\n        for (let i = 0; i < numArguments; ++i) {\r\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n          );\r\n        }\r\n        // make the inlined call (is aware of autoreleases)\r\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\r\n        if (this.currentType.isManaged) {\r\n          if (!(constraints & Constraints.WILL_RETAIN)) {\r\n            expr = this.makeAutorelease(expr, this.currentFlow);\r\n          } else {\r\n            this.skippedAutoreleases.add(expr);\r\n          }\r\n        }\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    if (signature.returnType.isManaged) {\r\n      if (constraints & Constraints.WILL_DROP) {\r\n        // Skip autorelease and simply release\r\n        return this.makeCallDirect(instance, operands, reportNode, true);\r\n      } else if (constraints & Constraints.WILL_RETAIN) {\r\n        // Skip autorelease and remember\r\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\r\n        this.skippedAutoreleases.add(expr);\r\n        return expr;\r\n      } else {\r\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\r\n      }\r\n    }\r\n    return this.makeCallDirect(instance, operands, reportNode,\r\n      (constraints & Constraints.WILL_DROP) != 0\r\n    );\r\n  }\r\n\r\n  makeCallInline(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null,\r\n    thisArg: ExpressionRef = 0,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var numArguments = operands ? operands.length : 0;\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    var numParameters = parameterTypes.length;\r\n\r\n    // Create a new inline flow and use it to compile the function as a block\r\n    var previousFlow = this.currentFlow;\r\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\r\n    var body = [];\r\n    var usedLocals = new Set<i32>();\r\n\r\n    // Prepare compiled arguments right to left, keeping track of used locals.\r\n    for (let i = numArguments - 1; i >= 0; --i) {\r\n      // This is necessary because a later expression must not set an earlier argument local, which\r\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\r\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\r\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\r\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\r\n      let paramExpr = operands![i];\r\n      let paramType = parameterTypes[i];\r\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\r\n      findUsedLocals(paramExpr, usedLocals);\r\n      // inlining is aware of wrap/nonnull states:\r\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\r\n      // inlining is aware of skipped autoreleases:\r\n      if (paramType.isManaged) {\r\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\r\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n      }\r\n      body.unshift(\r\n        module.local_set(argumentLocal.index, paramExpr)\r\n      );\r\n    }\r\n    if (thisArg) {\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let thisType = assert(instance.signature.thisType);\r\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\r\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n      body.unshift(\r\n        module.local_set(thisLocal.index, thisArg)\r\n      );\r\n      let baseInstance = (<Class>classInstance).base;\r\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\r\n    } else {\r\n      assert(!instance.signature.thisType);\r\n    }\r\n\r\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\r\n    // side-effects within earlier expressions because these already happened on set.\r\n    this.currentFlow = flow;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initType = parameterTypes[i];\r\n      let initExpr = this.compileExpression(\r\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\r\n        initType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\r\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\r\n      if (initType.isManaged) {\r\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n        body.push(\r\n          module.local_set(argumentLocal.index,\r\n            this.makeRetain(initExpr)\r\n          )\r\n        );\r\n      } else {\r\n        body.push(\r\n          module.local_set(argumentLocal.index, initExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    this.compileFunctionBody(instance, body);\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    if (!flow.is(FlowFlags.TERMINATES)) {\r\n      this.performAutoreleases(flow, body);\r\n      this.finishAutoreleases(flow, body);\r\n    }\r\n    flow.freeScopedLocals();\r\n    var returnType = flow.returnType;\r\n    this.currentFlow = previousFlow;\r\n\r\n    // Create an outer block that we can break to when returning a value out of order\r\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\r\n    var returnType = originalSignature.returnType;\r\n    var thisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\r\n    trampoline = new Function(\r\n      original.name + \"|trampoline\",\r\n      original.prototype,\r\n      trampolineSignature,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFlow = this.currentFlow;\r\n    var flow = trampoline.flow;\r\n    this.currentFlow = flow;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.block(names[0], [\r\n      module.block(\"outOfRange\", [\r\n        module.switch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.binary(\r\n                BinaryOp.SubI32,\r\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\r\n                module.i32(minArguments)\r\n              )\r\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\r\n        )\r\n      ]),\r\n      module.unreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.local_set(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.unreachable();\r\n      }\r\n      body = module.block(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\r\n    }\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var stmts: ExpressionRef[] = [ body ];\r\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\r\n    if (returnType != Type.void) {\r\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\r\n    } else {\r\n      stmts.push(theCall);\r\n      this.performAutoreleases(flow, stmts);\r\n    }\r\n    flow.freeScopedLocals();\r\n    this.currentFlow = previousFlow;\r\n\r\n    var funcRef = module.addFunction(\r\n      trampoline.internalName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        returnType,\r\n        thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.block(null, stmts, returnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        BuiltinSymbols.argc,\r\n        NativeType.I32,\r\n        true,\r\n        module.i32(0)\r\n      );\r\n    }\r\n    return BuiltinSymbols.argc;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.global_set(this.ensureArgcVar(),\r\n          module.local_get(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\r\n    }\r\n    return BuiltinSymbols.setargc;\r\n  }\r\n\r\n  // <reference-counting>\r\n\r\n  /** Makes retain call, retaining the expression's value. */\r\n  makeRetain(expr: ExpressionRef): ExpressionRef {\r\n    var retainInstance = this.program.retainInstance;\r\n    this.compileFunction(retainInstance);\r\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\r\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // if ((t1=newExpr) != (t2=oldExpr)) {\r\n    //   __retain(t1);\r\n    //   __release(t2);\r\n    // }, t1\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\r\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\r\n    flow.freeTempLocal(temp1);\r\n    return module.block(null, [\r\n      module.if(\r\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\r\n          module.local_tee(temp1.index, newExpr),\r\n          module.local_tee(temp2.index, oldExpr)\r\n        ),\r\n        module.block(null, [\r\n          module.drop(\r\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\r\n          ),\r\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\r\n        ])\r\n      ),\r\n      module.local_get(temp1.index, nativeSizeType)\r\n    ], nativeSizeType);\r\n  }\r\n\r\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\r\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // TODO: this helper can be eliminated altogether if the current logic holds\r\n    // (t1=newExpr), __release(oldExpr), t1\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\r\n    return module.block(null, [\r\n      module.local_set(temp.index, newExpr),\r\n      this.makeRelease(oldExpr),\r\n      module.local_get(temp.index, nativeSizeType)\r\n    ], nativeSizeType);\r\n  }\r\n\r\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\r\n  makeRelease(expr: ExpressionRef): ExpressionRef {\r\n    var releaseInstance = this.program.releaseInstance;\r\n    this.compileFunction(releaseInstance);\r\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\r\n  }\r\n\r\n  /** Makes an automatic release call at the end of the current flow. */\r\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\r\n    // FIXME: loses track of nonNull state?\r\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\r\n  }\r\n\r\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\r\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\r\n    // NOTE: Can't remove the local.tee completely because it's already compiled\r\n    // and a child of something else. Preventing the final release however should\r\n    // make it optimize away.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\r\n        if (isLocalTee(expr)) {\r\n          let index = getLocalSetIndex(expr);\r\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\r\n            // Assumes that the expression actually belongs to the flow and that\r\n            // top-level autoreleases are never undone. While that's true, it's\r\n            // not necessary to check presence in scopedLocals.\r\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\r\n            return index;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\r\n        if (getBlockName(expr) === null) { // must not be a break target\r\n          let count = getBlockChildCount(expr);\r\n          if (count) {\r\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Attemps to move a final autorelease from one flow to a parent.\r\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\r\n   * retain would have been written already.\r\n   */\r\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\r\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\r\n    // eliminate the now unnecessary temporary local.tee because it is already part of\r\n    // another expression in the tree. But optimizing should collapse locals again.\r\n    var index = this.undoAutorelease(expr, fromInnerFlow);\r\n    return ~index\r\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\r\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow. */\r\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      let module = this.module;\r\n      for (let local of scopedLocals.values()) {\r\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          let localIndex = local.index;\r\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n            stmts.push(\r\n              this.makeRelease(\r\n                module.local_get(localIndex, local.type.toNativeType())\r\n              )\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\r\n  performAutoreleasesWithValue(\r\n    flow: Flow,\r\n    valueExpr: ExpressionRef,\r\n    valueType: Type,\r\n    stmts: ExpressionRef[] | null = null,\r\n    clearFlags: bool = true\r\n  ): ExpressionRef {\r\n    if (!stmts) stmts = new Array<ExpressionRef>();\r\n    stmts.push(\r\n      this.module.nop()\r\n    );\r\n    var lengthBefore = stmts.length;\r\n    this.performAutoreleases(flow, stmts, clearFlags);\r\n    if (stmts.length > lengthBefore) {\r\n      let nativeType = valueType.toNativeType();\r\n      let temp = flow.getAndFreeTempLocal(valueType);\r\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n      let module = this.module;\r\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\r\n      stmts.push(\r\n        module.local_get(temp.index, nativeType) // append get\r\n      );\r\n      return module.block(null, stmts, nativeType);\r\n    } else if (stmts.length > 1) {\r\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\r\n      return this.module.block(null, stmts, valueType.toNativeType());\r\n    }\r\n    return valueExpr;\r\n  }\r\n\r\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\r\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\r\n    var module = this.module;\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      // traverse to the top-most flow containing the inlined function's\r\n      // locals as scoped locals and release these instead.\r\n      let parent: Flow | null;\r\n      while (parent = flow.parent) flow = parent;\r\n      this.performAutoreleases(flow, stmts, false);\r\n    } else {\r\n      for (let local of flow.parentFunction.localsByIndex) {\r\n        let localIndex = local.index;\r\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n          stmts.push(\r\n            this.makeRelease(\r\n              module.local_get(localIndex, local.type.toNativeType())\r\n            )\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // </reference-counting>\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null,\r\n    reportNode: Node,\r\n    immediatelyDropped: bool = false,\r\n    /** Skip the usual autorelease and manage this at the callsite instead. */\r\n    skipAutorelease: bool = false\r\n  ): ExpressionRef {\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let expr: ExpressionRef;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          let theOperands = assert(operands);\r\n          assert(theOperands.length);\r\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\r\n        } else {\r\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\r\n        }\r\n        if (this.currentType.isManaged) {\r\n          if (!skipAutorelease) {\r\n            expr = this.makeAutorelease(expr, this.currentFlow);\r\n          } else {\r\n            this.skippedAutoreleases.add(expr);\r\n          }\r\n        }\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.unreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\r\n      assert(parameterNodes.length == parameterTypes.length);\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (initializer) {\r\n          if (nodeIsConstantValue(initializer.kind)) {\r\n            operands.push(this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              Constraints.CONV_IMPLICIT\r\n            ));\r\n            continue;\r\n          }\r\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i]);\r\n          if (resolved) {\r\n            if (resolved.kind == ElementKind.GLOBAL) {\r\n              let global = <Global>resolved;\r\n              if (this.compileGlobal(global)) {\r\n                if (global.is(CommonFlags.INLINED)) {\r\n                  operands.push(\r\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\r\n                  );\r\n                } else {\r\n                  operands.push(\r\n                    this.convertExpression(\r\n                      module.global_get(global.internalName, global.type.toNativeType()),\r\n                      global.type, parameterTypes[i], false, false, initializer\r\n                    )\r\n                  );\r\n                }\r\n                continue;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n        allOptionalsAreConstant = false;\r\n      }\r\n      if (!allOptionalsAreConstant) {\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.unreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\r\n          this.currentType = returnType;\r\n          if (returnType.isManaged) {\r\n            if (immediatelyDropped) {\r\n              expr = this.makeRelease(expr);\r\n              this.currentType = Type.void;\r\n            } else if (!skipAutorelease) {\r\n              expr = this.makeAutorelease(expr);\r\n            } else {\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n          return module.block(null, [\r\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\r\n            expr\r\n          ], this.currentType.toNativeType());\r\n        }\r\n      }\r\n    }\r\n\r\n    // If the return value is of a reference type it has not yet been released but is in flight\r\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\r\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\r\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else if (!skipAutorelease) {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.unreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return module.block(null, [\r\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\r\n        module.i32(numArguments)\r\n      ),\r\n      expr\r\n    ], this.currentType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(\r\n    expression: CommaExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\r\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\r\n    return this.module.block(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(\r\n    expression: ElementAccessExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var targetExpression = expression.expression;\r\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\r\n    if (targetType) {\r\n      if (targetType.is(TypeFlags.REFERENCE)) {\r\n        let classReference = targetType.classReference;\r\n        if (classReference) {\r\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\r\n          if (indexedGet) {\r\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\r\n              Constraints.CONV_IMPLICIT\r\n            );\r\n            return this.compileCallDirect(indexedGet, [\r\n              expression.elementExpression\r\n            ], expression, thisArg, constraints);\r\n          }\r\n        }\r\n      }\r\n      this.error(\r\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n        expression.expression.range, targetType.toString()\r\n      );\r\n    }\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileFunctionExpression(\r\n    expression: FunctionExpression,\r\n    contextualSignature: Signature | null,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\r\n    assert(!declaration.typeParameters); // function expression cannot be generic\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n    var prototype = new FunctionPrototype(\r\n      declaration.name.text.length\r\n        ? declaration.name.text\r\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\r\n      actualFunction,\r\n      declaration,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var instance: Function | null;\r\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\r\n\r\n    // compile according to context. this differs from a normal function in that omitted parameter\r\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\r\n    if (contextualSignature) {\r\n      let signatureNode = prototype.functionTypeNode;\r\n      let parameterNodes = signatureNode.parameters;\r\n      let numPresentParameters = parameterNodes.length;\r\n\r\n      // must not require more than the maximum number of parameters\r\n      let parameterTypes = contextualSignature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      if (numPresentParameters > numParameters) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          expression.range, numParameters.toString(), numPresentParameters.toString()\r\n        );\r\n        return this.module.unreachable();\r\n      }\r\n\r\n      // check non-omitted parameter types\r\n      let parameterNames = new Array<string>(numPresentParameters);\r\n      for (let i = 0; i < numPresentParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        parameterNames[i] = parameterNode.name.text; // use actual name\r\n        if (!isTypeOmitted(parameterNode.type)) {\r\n          let resolvedType = this.resolver.resolveType(\r\n            parameterNode.type,\r\n            actualFunction.parent,\r\n            contextualTypeArguments\r\n          );\r\n          if (!resolvedType) return this.module.unreachable();\r\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\r\n            );\r\n            return this.module.unreachable();\r\n          }\r\n        }\r\n        // any unused parameters are inherited but ignored\r\n      }\r\n\r\n      // check non-omitted return type\r\n      let returnType = contextualSignature.returnType;\r\n      if (!isTypeOmitted(signatureNode.returnType)) {\r\n        let resolvedType = this.resolver.resolveType(\r\n          signatureNode.returnType,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.unreachable();\r\n        if (\r\n          returnType == Type.void\r\n            ? resolvedType != Type.void\r\n            : !resolvedType.isStrictlyAssignableTo(returnType)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n      }\r\n\r\n      // check explicit this type\r\n      let thisType = contextualSignature.thisType;\r\n      let thisTypeNode = signatureNode.explicitThisType;\r\n      if (thisTypeNode) {\r\n        if (!thisType) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            thisTypeNode.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let resolvedType = this.resolver.resolveType(\r\n          thisTypeNode,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.unreachable();\r\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n      }\r\n\r\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\r\n      signature.requiredParameters = numParameters; // !\r\n      signature.parameterNames = parameterNames;\r\n      instance = new Function(\r\n        prototype.name,\r\n        prototype,\r\n        signature,\r\n        contextualTypeArguments\r\n      );\r\n      if (!this.compileFunction(instance)) return this.module.unreachable();\r\n      this.currentType = contextualSignature.type;\r\n\r\n    // otherwise compile like a normal function\r\n    } else {\r\n      instance = this.compileFunctionUsingTypeArguments(\r\n        prototype,\r\n        [],\r\n        contextualTypeArguments\r\n      );\r\n      if (!instance) return this.module.unreachable();\r\n      this.currentType = instance.signature.type;\r\n    }\r\n\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.unreachable()\r\n      : this.module.i32(index);\r\n  }\r\n\r\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\r\n  private maybeCompileEnclosingSource(expression: Expression): void {\r\n    var internalPath = expression.range.source.internalPath;\r\n    var filesByName = this.program.filesByName;\r\n    assert(filesByName.has(internalPath));\r\n    var enclosingFile = filesByName.get(internalPath)!;\r\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\r\n      this.compileFileByPath(internalPath, expression);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        let classReference = contextualType.classReference;\r\n        if (contextualType.is(TypeFlags.REFERENCE) && classReference !== null) {\r\n          this.currentType = classReference.type.asNullable();\r\n        } else {\r\n          this.currentType = options.usizeType; // TODO: anyref context yields <usize>0\r\n        }\r\n        return options.isWasm64\r\n          ? module.i64(0)\r\n          : module.i32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.i32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.i32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // {\r\n              //   if (!this) this = <ALLOC>\r\n              //   this.a = X\r\n              //   this.b = Y\r\n              //   return this\r\n              // }\r\n              let stmts: ExpressionRef[] = [\r\n                module.if(\r\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                    module.local_get(thisLocal.index, nativeSizeType)\r\n                  ),\r\n                  module.local_set(thisLocal.index,\r\n                    this.makeRetain(\r\n                      this.makeAllocation(<Class>classInstance)\r\n                    )\r\n                  )\r\n                )\r\n              ];\r\n              this.makeFieldInitialization(<Class>classInstance, stmts);\r\n              stmts.push(\r\n                module.local_get(thisLocal.index, nativeSizeType)\r\n              );\r\n              this.currentType = thisLocal.type;\r\n              return module.block(null, stmts, nativeSizeType);\r\n            }\r\n          }\r\n          // if not a constructor, `this` type can differ\r\n          let thisType = assert(actualFunction.signature.thisType);\r\n          this.currentType = thisType;\r\n          return module.local_get(thisLocal.index, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.unreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = this.currentFlow;\r\n        let actualFunction = flow.actualFunction;\r\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\r\n            // TS1034 in the parser effectively limits this to property accesses\r\n            this.error(\r\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\r\n              expression.range\r\n            );\r\n          }\r\n        }\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.local_get(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let baseClassInstance = (<Class>classInstance).base;\r\n          if (baseClassInstance) {\r\n            let superType = baseClassInstance.type;\r\n            this.currentType = superType;\r\n            return module.local_get(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    this.maybeCompileEnclosingSource(expression);\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.lookupIdentifierExpression( // reports\r\n      expression,\r\n      flow,\r\n      this.currentEnum || actualFunction\r\n    );\r\n    if (!target) return module.unreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\r\n          type = type.nonNullableType;\r\n        }\r\n        this.currentType = type;\r\n        return this.module.local_get(localIndex, type.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.unreachable();\r\n        }\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\r\n        }\r\n        this.currentType = type;\r\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.unreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          makeMap<string,Type>(flow.contextualTypeArguments)\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.i32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\r\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\r\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\r\n    var actualType = this.currentType;\r\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\r\n    this.currentType = Type.bool;\r\n    if (!expectedType) return module.unreachable();\r\n\r\n    // instanceof <basic> - must be exact\r\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\r\n      return module.block(null, [\r\n        module.drop(expr),\r\n        module.i32(actualType == expectedType ? 1 : 0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // <basic> instanceof <reference> - always false\r\n    if (!actualType.is(TypeFlags.REFERENCE)) {\r\n      return module.block(null, [\r\n        module.drop(expr),\r\n        module.i32(0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // both LHS and RHS are references now\r\n    var nativeSizeType = actualType.toNativeType();\r\n\r\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\r\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\r\n\r\n      // downcast - check statically\r\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\r\n        return module.binary(\r\n          nativeSizeType == NativeType.I64\r\n            ? BinaryOp.NeI64\r\n            : BinaryOp.NeI32,\r\n          expr,\r\n          actualType.toNativeZero(module)\r\n        );\r\n      }\r\n\r\n      // upcast - check dynamically\r\n      if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          return module.if(\r\n            module.unary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.local_tee(tempLocal.index, expr),\r\n            ),\r\n            module.i32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.local_get(tempLocal.index, nativeSizeType),\r\n              module.i32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n        }\r\n      }\r\n\r\n    // either none or both nullable\r\n    } else {\r\n\r\n      // downcast - check statically\r\n      if (actualType.isAssignableTo(expectedType)) {\r\n        return module.block(null, [\r\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\r\n          module.i32(1)\r\n        ], NativeType.I32);\r\n\r\n      // upcast - check dynamically\r\n      } else if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          // FIXME: the temp local and the if can be removed here once flows\r\n          // perform null checking, which would error earlier when checking\r\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          return module.if(\r\n            module.unary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.local_tee(tempLocal.index, expr),\r\n            ),\r\n            module.i32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.local_get(tempLocal.index, nativeSizeType),\r\n              module.i32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // false\r\n    return module.block(null, [\r\n      module.drop(expr),\r\n      module.i32(0)\r\n    ], NativeType.I32);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints,\r\n    implicitlyNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitlyNegate);\r\n        let classType = contextualType.classReference;\r\n        if (classType) {\r\n          if (classType.prototype == this.program.arrayPrototype) {\r\n            return this.compileArrayLiteral(\r\n              assert(classType.typeArguments)[0],\r\n              (<ArrayLiteralExpression>expression).elementExpressions,\r\n              constraints,\r\n              expression\r\n            );\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.f32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.f64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\r\n        this.currentType = type;\r\n        switch (type.kind) {\r\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\r\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\r\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\r\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\r\n          default: return module.i32(i64_low(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    constraints: Constraints,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var program = this.program;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\r\n    var arrayType = arrayInstance.type;\r\n    var flow = this.currentFlow;\r\n\r\n    // block those here so compiling expressions doesn't conflict\r\n    var tempThis = flow.getTempLocal(arrayType);\r\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\r\n\r\n    // compile value expressions and find out whether all are constant\r\n    var length = expressions.length;\r\n    var values = new Array<ExpressionRef>(length);\r\n    var isStatic = true;\r\n    var nativeElementType = elementType.toNativeType();\r\n    for (let i = 0; i < length; ++i) {\r\n      let expression = expressions[i];\r\n      let expr = expression\r\n        ? module.precomputeExpression(\r\n            this.compileExpression(<Expression>expression, elementType,\r\n              Constraints.CONV_IMPLICIT\r\n            )\r\n          )\r\n        : elementType.toNativeZero(module);\r\n      if (getExpressionId(expr) == ExpressionId.Const) {\r\n        assert(getExpressionType(expr) == nativeElementType);\r\n      } else {\r\n        isStatic = false;\r\n      }\r\n      values[i] = expr;\r\n    }\r\n\r\n    // if the array is static, make a static arraybuffer segment\r\n    if (isStatic) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n\r\n      let runtimeHeaderSize = program.runtimeHeaderSize;\r\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\r\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\r\n\r\n      // make both the buffer and array header static if assigned to a global. this can't be done\r\n      // if inside of a function because each invocation must create a new array reference then.\r\n      if (constraints & Constraints.PREFER_STATIC) {\r\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\r\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\r\n        this.currentType = arrayType;\r\n        return program.options.isWasm64\r\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\r\n          : this.module.i32(i64_low(arrayAddress));\r\n\r\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\r\n      } else {\r\n        // makeArray(length, alignLog2, classId, staticBuffer)\r\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\r\n          module.i32(length),\r\n          program.options.isWasm64\r\n            ? module.i64(elementType.alignLog2)\r\n            : module.i32(elementType.alignLog2),\r\n          module.i32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\r\n            : module.i32(i64_low(bufferAddress))\r\n        ], reportNode);\r\n        this.currentType = arrayType;\r\n        return this.makeAutorelease(this.makeRetain(expr));\r\n      }\r\n    }\r\n\r\n    // otherwise compile an explicit instantiation with indexed sets\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      this.currentType = arrayType;\r\n      return module.unreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\r\n    stmts.push(\r\n      module.local_set(tempThis.index,\r\n        this.makeCallDirect(program.allocArrayInstance, [\r\n          module.i32(length),\r\n          program.options.isWasm64\r\n            ? module.i64(elementType.alignLog2)\r\n            : module.i32(elementType.alignLog2),\r\n          module.i32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.i64(0)\r\n            : module.i32(0)\r\n        ], reportNode),\r\n      )\r\n    );\r\n    // tempData = tempThis.dataStart\r\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\r\n    assert(dataStart.kind == ElementKind.FIELD);\r\n    stmts.push(\r\n      module.local_set(tempDataStart.index,\r\n        module.load(arrayType.byteSize, false,\r\n          module.local_get(tempThis.index, nativeArrayType),\r\n          nativeArrayType,\r\n          (<Field>dataStart).memoryOffset\r\n        )\r\n      )\r\n    );\r\n    var isManaged = elementType.isManaged;\r\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\r\n      let valueExpr = values[i];\r\n      if (isManaged) {\r\n        // value = __retain(value)\r\n        valueExpr = this.makeRetain(valueExpr);\r\n      }\r\n      // store<T>(tempData, value, immOffset)\r\n      stmts.push(\r\n        module.store(elementType.byteSize,\r\n          module.local_get(tempDataStart.index, nativeArrayType),\r\n          valueExpr,\r\n          nativeElementType,\r\n          i << alignLog2\r\n        )\r\n      );\r\n    }\r\n    // -> tempThis\r\n    stmts.push(\r\n      module.local_get(tempThis.index, nativeArrayType)\r\n    );\r\n    flow.freeTempLocal(tempThis);\r\n    flow.freeTempLocal(tempDataStart);\r\n    this.currentType = arrayType;\r\n    return module.block(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\r\n      // object literal and use them to call the ctor while not generating a store.\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.unreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.local_set(\r\n      tempLocal.index,\r\n      this.makeRetain(\r\n        this.makeAllocation(classReference)\r\n      )\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    this.currentType = classReference.type;\r\n    return module.block(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(\r\n    expression: NewExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.lookupExpression( // reports\r\n      expression.expression,\r\n      flow\r\n    );\r\n    if (!target) return module.unreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.unreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        makeMap<string,Type>(flow.contextualTypeArguments)\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        flow.actualFunction.parent, // relative to caller\r\n        makeMap<string,Type>(flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.unreachable();\r\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\r\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\r\n  }\r\n\r\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\r\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\r\n    var instance = classInstance.constructorInstance;\r\n    if (instance) {\r\n      // do not attempt to compile it if inlined anyway\r\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\r\n      return instance;\r\n    }\r\n\r\n    // clone base constructor if a derived class\r\n    var baseClass = classInstance.base;\r\n    if (baseClass) {\r\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          // declaration is important, i.e. to access optional parameter initializers\r\n          (<FunctionDeclaration>baseCtor.declaration).clone()\r\n        ),\r\n        baseCtor.signature,\r\n        null\r\n      );\r\n\r\n    // otherwise make a default constructor\r\n    } else {\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\r\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\r\n          )\r\n        ),\r\n        new Signature(this.program, null, classInstance.type, classInstance.type),\r\n        null\r\n      );\r\n    }\r\n\r\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\r\n    instance.set(CommonFlags.COMPILED);\r\n    instance.prototype.setResolvedInstance(\"\", instance);\r\n    classInstance.constructorInstance = instance;\r\n    var previousFlow = this.currentFlow;\r\n    var flow = instance.flow;\r\n    this.currentFlow = flow;\r\n\r\n    // generate body\r\n    var signature = instance.signature;\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var stmts = new Array<ExpressionRef>();\r\n\r\n    // {\r\n    //   if (!this) this = <ALLOC>\r\n    //   IF_DERIVED: this = super(this, ...args)\r\n    //   this.a = X\r\n    //   this.b = Y\r\n    //   return this\r\n    // }\r\n    var allocExpr = this.makeAllocation(classInstance);\r\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\r\n    stmts.push(\r\n      module.if(\r\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n          module.local_get(0, nativeSizeType)\r\n        ),\r\n        module.local_set(0, allocExpr)\r\n      )\r\n    );\r\n    if (baseClass) {\r\n      let parameterTypes = signature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      let operands = new Array<ExpressionRef>(1 + numParameters);\r\n      operands[0] = module.local_get(0, nativeSizeType);\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\r\n      }\r\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\r\n      stmts.push(\r\n        module.local_set(0,\r\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\r\n        )\r\n      );\r\n    }\r\n    this.makeFieldInitialization(classInstance, stmts);\r\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\r\n    flow.freeScopedLocals();\r\n    this.currentFlow = previousFlow;\r\n\r\n    // make the function\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var locals = instance.localsByIndex;\r\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\r\n    var numOperands = 1 + signature.parameterTypes.length;\r\n    var numLocals = locals.length;\r\n    if (numLocals > numOperands) {\r\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\r\n    }\r\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\r\n    instance.finalize(module, funcRef);\r\n    return instance;\r\n  }\r\n\r\n  compileInstantiate(\r\n    /** Class to instantiate. */\r\n    classInstance: Class,\r\n    /** Constructor arguments. */\r\n    argumentExpressions: Expression[],\r\n    /** Contextual flags. */\r\n    constraints: Constraints,\r\n    /** Node to report on. */\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var ctor = this.ensureConstructor(classInstance, reportNode);\r\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\r\n    var expr = this.compileCallDirect( // no need for another autoreleased local\r\n      ctor,\r\n      argumentExpressions,\r\n      reportNode,\r\n      this.options.usizeType.toNativeZero(this.module),\r\n      constraints\r\n    );\r\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\r\n      this.currentType = classInstance.type; // important because a super ctor could be called\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    expression: PropertyAccessExpression,\r\n    ctxType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    this.maybeCompileEnclosingSource(expression);\r\n\r\n    var resolver = this.resolver;\r\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\r\n    if (!target) return module.unreachable();\r\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static field\r\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>theEnum)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.unreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\r\n        }\r\n        assert((<EnumValue>target).type == Type.i32);\r\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\r\n        this.currentType = (<Field>target).type;\r\n        return module.load(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\r\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\r\n        if (getterPrototype) {\r\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\r\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\r\n        }\r\n        return module.unreachable();\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        return this.compileCallDirect(getterInstance, [], expression,\r\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\r\n        );\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n\r\n        if (prototype.is(CommonFlags.STATIC)) {\r\n          let instance = this.compileFunctionUsingTypeArguments(\r\n            prototype,\r\n            [],\r\n            makeMap<string,Type>(),\r\n            expression,\r\n          );\r\n          if (instance == null) {\r\n            return module.unreachable();\r\n          } else {\r\n            this.currentType = instance.type;\r\n            return module.i32(this.ensureFunctionTableEntry(instance));\r\n          }\r\n        }\r\n\r\n        this.error(\r\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\r\n          expression.range, prototype.name\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileTernaryExpression(\r\n    expression: TernaryExpression,\r\n    ctxType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    var condExpr = this.module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(expression.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    // FIXME: skips common denominator, inconsistently picking left type\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileExpression(ifThen, ctxType)\r\n        : this.compileExpression(ifElse, ctxType);\r\n    }\r\n\r\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\r\n\r\n    var ifThenFlow = outerFlow.fork();\r\n    this.currentFlow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\r\n    var ifThenType = this.currentType;\r\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\r\n\r\n    var ifElseFlow = outerFlow.fork();\r\n    this.currentFlow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpression(ifElse, ctxType, inheritedConstraints);\r\n    var ifElseType = this.currentType;\r\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\r\n\r\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\r\n      );\r\n      this.currentType = ctxType;\r\n      return this.module.unreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType, commonType,\r\n      false, false,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType, commonType,\r\n      false, false,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n\r\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\r\n      if (!IfThenAutoreleaseSkipped) {\r\n        ifThenExpr = this.makeRetain(ifThenExpr);\r\n        IfThenAutoreleaseSkipped = true;\r\n      } else {\r\n        ifElseExpr = this.makeRetain(ifElseExpr);\r\n        ifElseAutoreleaseSkipped = true;\r\n      }\r\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\r\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\r\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\r\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\r\n      // }\r\n    }\r\n\r\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\r\n    ifThenFlow.freeScopedLocals();\r\n\r\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\r\n    ifElseFlow.freeScopedLocals();\r\n\r\n    this.currentFlow = outerFlow;\r\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\r\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\r\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n    return expr;\r\n  }\r\n\r\n  compileUnaryPostfixExpression(\r\n    expression: UnaryPostfixExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType.exceptVoid,\r\n      Constraints.NONE\r\n    );\r\n\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n\r\n    // if the value isn't dropped, a temp. local is required to remember the original value,\r\n    // except if a static overload is found, which reverses the use of a temp. (see below)\r\n    var tempLocal: Local | null = null;\r\n    if (contextualType != Type.void) {\r\n      tempLocal = flow.getTempLocal(this.currentType);\r\n      getValue = module.local_tee(\r\n        tempLocal.index,\r\n        getValue\r\n      );\r\n    }\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\r\n            if (overload) {\r\n              let isInstance = overload.is(CommonFlags.INSTANCE);\r\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\r\n                getValue = getLocalSetValue(getValue);\r\n                flow.freeTempLocal(tempLocal);\r\n                tempLocal = null;\r\n              }\r\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n              if (isInstance) break;\r\n              return expr; // here\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          if (tempLocal) flow.freeTempLocal(tempLocal);\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(\r\n              BinaryOp.AddI32,\r\n              getValue,\r\n              module.i32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.binary(\r\n              options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(\r\n              BinaryOp.AddI64,\r\n              getValue,\r\n              module.i64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(\r\n              BinaryOp.AddF32,\r\n              getValue,\r\n              module.f32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(\r\n              BinaryOp.AddF64,\r\n              getValue,\r\n              module.f64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"++\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\r\n            if (overload) {\r\n              let isInstance = overload.is(CommonFlags.INSTANCE);\r\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\r\n                getValue = getLocalSetValue(getValue);\r\n                flow.freeTempLocal(tempLocal);\r\n                tempLocal = null;\r\n              }\r\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n              if (overload.is(CommonFlags.INSTANCE)) break;\r\n              return expr; // here\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          if (tempLocal) flow.freeTempLocal(tempLocal);\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(\r\n              BinaryOp.SubI32,\r\n              getValue,\r\n              module.i32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.binary(\r\n              options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(\r\n              BinaryOp.SubI64,\r\n              getValue,\r\n              module.i64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(\r\n              BinaryOp.SubF32,\r\n              getValue,\r\n              module.f32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(\r\n              BinaryOp.SubF64,\r\n              getValue,\r\n              module.f64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"--\", this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    var resolver = this.resolver;\r\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\r\n    if (!target) {\r\n      if (tempLocal) flow.freeTempLocal(tempLocal);\r\n      return module.unreachable();\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (!tempLocal) {\r\n      return this.makeAssignment(\r\n        target,\r\n        expr,\r\n        expression.operand,\r\n        resolver.currentThisExpression,\r\n        resolver.currentElementExpression,\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\r\n    var setValue = this.makeAssignment(\r\n      target,\r\n      expr, // includes a tee of getValue to tempLocal\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      false\r\n    );\r\n\r\n    this.currentType = tempLocal.type;\r\n    flow.freeTempLocal(tempLocal);\r\n    var nativeType = tempLocal.type.toNativeType();\r\n\r\n    return module.block(null, [\r\n      setValue,\r\n      module.local_get(tempLocal.index, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"+\", this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"-\", this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.unary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.unary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"-\", this.currentType.toString()\r\n            );\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\r\n              return expr; // skip re-assign\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"++\", this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"++\", this.currentType.toString()\r\n            );\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\r\n              return expr; // skip re-assign\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"--\", this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"--\", this.currentType.toString()\r\n            );\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n          }\r\n          this.error(\r\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n            expression.range, \"~\", this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        } else {\r\n          expr = this.convertExpression(expr,\r\n            this.currentType, this.currentType.intType,\r\n            false, false,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, \"~\", this.currentType.toString()\r\n            );\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        return this.compileTypeof(expression, contextualType, constraints);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\r\n    if (!target) return module.unreachable();\r\n    return this.makeAssignment(\r\n      target,\r\n      expr,\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileTypeof(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var operand = expression.operand;\r\n    var expr: ExpressionRef = 0;\r\n    var stringInstance = this.program.stringInstance;\r\n    var typeString: string;\r\n    if (operand.kind == NodeKind.NULL) {\r\n      typeString = \"object\"; // special since `null` without type context is usize\r\n    } else {\r\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\r\n      if (!element) {\r\n        switch (operand.kind) {\r\n          case NodeKind.PROPERTYACCESS:\r\n          case NodeKind.ELEMENTACCESS: {\r\n            operand = operand.kind == NodeKind.PROPERTYACCESS\r\n              ? (<PropertyAccessExpression>operand).expression\r\n              : (<ElementAccessExpression>operand).expression;\r\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\r\n            if (!targetType) {\r\n              this.currentType = stringInstance.type;\r\n              return this.module.unreachable();\r\n            }\r\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\r\n            break;\r\n          }\r\n          case NodeKind.IDENTIFIER: break; // ignore error\r\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\r\n        }\r\n        typeString = \"undefined\";\r\n      } else {\r\n        switch (element.kind) {\r\n          case ElementKind.CLASS_PROTOTYPE:\r\n          case ElementKind.NAMESPACE:\r\n          case ElementKind.ENUM: {\r\n            typeString = \"object\";\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            typeString = \"function\";\r\n            break;\r\n          }\r\n          default: {\r\n            expr = this.compileExpression(operand, Type.auto);\r\n            let type = this.currentType;\r\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\r\n            if (type.is(TypeFlags.REFERENCE)) {\r\n              let signatureReference = type.signatureReference;\r\n              if (signatureReference) {\r\n                typeString = \"function\";\r\n              } else {\r\n                let classReference = type.classReference;\r\n                if (classReference) {\r\n                  if (classReference.prototype === stringInstance.prototype) {\r\n                    typeString = \"string\";\r\n                  } else {\r\n                    typeString = \"object\";\r\n                  }\r\n                } else {\r\n                  typeString = \"anyref\"; // TODO?\r\n                }\r\n              }\r\n            } else if (type == Type.bool) {\r\n              typeString = \"boolean\";\r\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\r\n              typeString = \"number\";\r\n            } else {\r\n              typeString = \"undefined\"; // failed to compile?\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentType = stringInstance.type;\r\n    return expr\r\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\r\n      : this.ensureStaticString(typeString);\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.binary(BinaryOp.ShrI32,\r\n                module.binary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.i32(24)\r\n                ),\r\n                module.i32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.binary(BinaryOp.ShrI32,\r\n                module.binary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.i32(16)\r\n                ),\r\n                module.i32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.binary(BinaryOp.AndI32,\r\n            expr,\r\n            module.i32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.binary(BinaryOp.AndI32,\r\n            expr,\r\n            module.i32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          // bool is special in that it compares to 0 instead of masking with 0x1\r\n          expr = module.binary(BinaryOp.NeI32,\r\n            expr,\r\n            module.i32(0)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var parentFunction = this.currentFlow.parentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    parentFunction.debugLocations.push(range);\r\n  }\r\n\r\n  // === Specialized code generation ==============================================================\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.unary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.unary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\r\n      case TypeKind.ISIZE: {\r\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\r\n      }\r\n      // case TypeKind.ANYREF: {\r\n      //   TODO: ref.is_null\r\n      // }\r\n      default: {\r\n        assert(false);\r\n        return module.i32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.BOOL: // not a mask, just != 0\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\r\n      }\r\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\r\n      }\r\n      // case TypeKind.ANYREF: {\r\n      //   TODO: !ref.is_null\r\n      // }\r\n      default: {\r\n        assert(false);\r\n        return module.i32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\r\n  makeAllocation(\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\r\n    var program = this.program;\r\n    assert(classInstance.program == program);\r\n    var module = this.module;\r\n    var options = this.options;\r\n    this.currentType = classInstance.type;\r\n    var allocInstance = program.allocInstance;\r\n    this.compileFunction(allocInstance);\r\n    return module.call(allocInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.i64(classInstance.currentMemoryOffset)\r\n        : module.i32(classInstance.currentMemoryOffset),\r\n      module.i32(\r\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\r\n          ? 0\r\n          : classInstance.id\r\n      )\r\n    ], options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes the initializers for a class's fields. */\r\n  makeFieldInitialization(\r\n    classInstance: Class,\r\n    stmts: ExpressionRef[] = []\r\n  ): ExpressionRef[] {\r\n    var members = classInstance.members;\r\n    if (!members) return [];\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\r\n    var thisLocalIndex = isInline\r\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n      : 0;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    for (let member of members.values()) {\r\n      if (\r\n        member.kind != ElementKind.FIELD || // not a field\r\n        member.parent != classInstance      // inherited field\r\n      ) continue;\r\n\r\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\r\n      let fieldType = field.type;\r\n      let nativeFieldType = fieldType.toNativeType();\r\n      let fieldPrototype = field.prototype;\r\n      let initializerNode = fieldPrototype.initializerNode;\r\n      let parameterIndex = fieldPrototype.parameterIndex;\r\n      let initExpr: ExpressionRef;\r\n      if (initializerNode) { // use initializer\r\n        initExpr = this.compileExpression(initializerNode, fieldType, // reports\r\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n        );\r\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\r\n          initExpr = this.makeRetain(initExpr);\r\n        }\r\n      } else if (parameterIndex >= 0) { // initialized via parameter (here: a local)\r\n        initExpr = module.local_get(\r\n          isInline\r\n            ? assert(flow.lookupLocal(field.name)).index\r\n            : 1 + parameterIndex, // this is local 0\r\n          nativeFieldType\r\n        );\r\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\r\n      } else { // initialize with zero\r\n        initExpr = fieldType.toNativeZero(module);\r\n      }\r\n      stmts.push(\r\n        module.store(fieldType.byteSize,\r\n          module.local_get(thisLocalIndex, nativeSizeType),\r\n          initExpr,\r\n          nativeFieldType,\r\n          field.memoryOffset\r\n        )\r\n      );\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  makeInstanceOfClass(\r\n    expr: ExpressionRef,\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var idTemp = flow.getTempLocal(Type.i32);\r\n    var idExpr = module.load(4, false,\r\n      module.binary(BinaryOp.SubI32,\r\n        expr,\r\n        module.i32(this.program.runtimeHeaderSize)\r\n      ),\r\n      NativeType.I32\r\n    );\r\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\r\n    var conditions: ExpressionRef[] = [];\r\n    conditions.push(\r\n      module.drop( // br_if returns the value too\r\n        module.br(label,\r\n          module.binary(BinaryOp.EqI32, // classId == class.id\r\n            module.local_tee(idTemp.index, idExpr),\r\n            module.i32(classInstance.id)\r\n          ),\r\n          module.i32(1) // ? true\r\n        )\r\n      )\r\n    );\r\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\r\n    // TODO: simplify if there are none\r\n    conditions.push(\r\n      module.i32(0) // : false\r\n    );\r\n    flow.freeTempLocal(idTemp);\r\n    flow.popBreakLabel();\r\n    return module.block(label, conditions, NativeType.I32);\r\n  }\r\n\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement\r\n): void {\r\n  // by default, use the file name as the module name\r\n  mangleImportName_moduleName = declaration.range.source.simplePath;\r\n  // and the internal name of the element within that file as the element name\r\n  mangleImportName_elementName = mangleInternalName(\r\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\r\n  );\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    // if one argument is given, override just the element name\r\n    // if two arguments are given, override both module and element name\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n\r\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\r\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\r\n  var length = stmts.length;\r\n  if (length == 0) return module.nop(); // usually filtered out again\r\n  if (length == 1) {\r\n    let single = stmts[0];\r\n    if (getExpressionType(single) == type) return single;\r\n    if (getExpressionId(single) == ExpressionId.Block) {\r\n      let count = getBlockChildCount(single);\r\n      let children = new Array<ExpressionRef>(count);\r\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\r\n      return module.block(getBlockName(single), children, type);\r\n    }\r\n  }\r\n  return module.block(null, stmts,\r\n    type == NativeType.Auto\r\n      ? getExpressionType(stmts[length - 1])\r\n      : type\r\n  );\r\n}\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  User_defined_0 = 102,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Mutable_value_cannot_be_inlined = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  An_allocator_must_be_present_to_use_0 = 214,\r\n  Optional_parameter_must_have_an_initializer = 215,\r\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\r\n  Function_0_cannot_be_inlined_into_itself = 217,\r\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\r\n  Optional_properties_are_not_supported = 219,\r\n  Expression_must_be_a_compile_time_constant = 220,\r\n  Module_cannot_have_multiple_start_functions = 221,\r\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\r\n  _0_must_be_a_power_of_two = 223,\r\n  Expression_is_unsafe = 224,\r\n  Expression_is_never_null = 225,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  An_export_assignment_cannot_have_modifiers = 1120,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\r\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\r\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Object_is_possibly_null = 2531,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\r\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\r\n  Duplicate_property_0 = 2718,\r\n  Type_0_has_no_call_signatures = 2757,\r\n  File_0_not_found = 6054,\r\n  Numeric_separators_are_not_allowed_here = 6188,\r\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\r\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\r\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 102: return \"User-defined: {0}\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Mutable value cannot be inlined.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 214: return \"An allocator must be present to use '{0}'.\";\r\n    case 215: return \"Optional parameter must have an initializer.\";\r\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\r\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\r\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\r\n    case 219: return \"Optional properties are not supported.\";\r\n    case 220: return \"Expression must be a compile-time constant.\";\r\n    case 221: return \"Module cannot have multiple start functions.\";\r\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\r\n    case 223: return \"'{0}' must be a power of two.\";\r\n    case 224: return \"Expression is unsafe.\";\r\n    case 225: return \"Expression is never 'null'.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1120: return \"An export assignment cannot have modifiers.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\r\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\r\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2531: return \"Object is possibly 'null'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\r\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\r\n    case 2718: return \"Duplicate property '{0}'.\";\r\n    case 2757: return \"Type '{0}' has no call signatures.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    case 6188: return \"Numeric separators are not allowed here.\";\r\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\r\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\r\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  Constraints,\r\n  RuntimeFeatures,\r\n  flatten\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression,\r\n  CallExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  AtomicRMWOp,\r\n  SIMDExtractOp,\r\n  SIMDReplaceOp,\r\n  SIMDShiftOp,\r\n  SIMDTernaryOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  Relooper,\r\n  RelooperBlockRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Field,\r\n  Global,\r\n  DecoratorFlags,\r\n  Element\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  LocalFlags\r\n} from \"./flow\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  Feature,\r\n  TypeinfoFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\n/** Symbols of various compiler built-ins. */\r\nexport namespace BuiltinSymbols {\r\n  // std/builtins.ts\r\n  export const isInteger = \"~lib/builtins/isInteger\";\r\n  export const isFloat = \"~lib/builtins/isFloat\";\r\n  export const isBoolean = \"~lib/builtins/isBoolean\";\r\n  export const isSigned = \"~lib/builtins/isSigned\";\r\n  export const isReference = \"~lib/builtins/isReference\";\r\n  export const isString = \"~lib/builtins/isString\";\r\n  export const isArray = \"~lib/builtins/isArray\";\r\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\r\n  export const isFunction = \"~lib/builtins/isFunction\";\r\n  export const isNullable = \"~lib/builtins/isNullable\";\r\n  export const isDefined = \"~lib/builtins/isDefined\";\r\n  export const isConstant = \"~lib/builtins/isConstant\";\r\n  export const isManaged = \"~lib/builtins/isManaged\";\r\n  export const isVoid = \"~lib/builtins/isVoid\";\r\n\r\n  export const clz = \"~lib/builtins/clz\";\r\n  export const ctz = \"~lib/builtins/ctz\";\r\n  export const popcnt = \"~lib/builtins/popcnt\";\r\n  export const rotl = \"~lib/builtins/rotl\";\r\n  export const rotr = \"~lib/builtins/rotr\";\r\n  export const abs = \"~lib/builtins/abs\";\r\n  export const max = \"~lib/builtins/max\";\r\n  export const min = \"~lib/builtins/min\";\r\n  export const ceil = \"~lib/builtins/ceil\";\r\n  export const floor = \"~lib/builtins/floor\";\r\n  export const copysign = \"~lib/builtins/copysign\";\r\n  export const nearest = \"~lib/builtins/nearest\";\r\n  export const reinterpret = \"~lib/builtins/reinterpret\";\r\n  export const sqrt = \"~lib/builtins/sqrt\";\r\n  export const trunc = \"~lib/builtins/trunc\";\r\n  export const load = \"~lib/builtins/load\";\r\n  export const store = \"~lib/builtins/store\";\r\n  export const atomic_load = \"~lib/builtins/atomic.load\";\r\n  export const atomic_store = \"~lib/builtins/atomic.store\";\r\n  export const atomic_add = \"~lib/builtins/atomic.add\";\r\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\r\n  export const atomic_and = \"~lib/builtins/atomic.and\";\r\n  export const atomic_or = \"~lib/builtins/atomic.or\";\r\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\r\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\r\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\r\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\r\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\r\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\r\n\r\n  export const sizeof = \"~lib/builtins/sizeof\";\r\n  export const alignof = \"~lib/builtins/alignof\";\r\n  export const offsetof = \"~lib/builtins/offsetof\";\r\n  export const nameof = \"~lib/builtins/nameof\";\r\n  export const lengthof = \"~lib/builtins/lengthof\";\r\n  export const select = \"~lib/builtins/select\";\r\n  export const unreachable = \"~lib/builtins/unreachable\";\r\n  export const changetype = \"~lib/builtins/changetype\";\r\n  export const assert = \"~lib/builtins/assert\";\r\n  export const unchecked = \"~lib/builtins/unchecked\";\r\n  export const call_direct = \"~lib/builtins/call_direct\";\r\n  export const call_indirect = \"~lib/builtins/call_indirect\";\r\n  export const instantiate = \"~lib/builtins/instantiate\";\r\n  export const idof = \"~lib/builtins/idof\";\r\n\r\n  export const i8 = \"~lib/builtins/i8\";\r\n  export const i16 = \"~lib/builtins/i16\";\r\n  export const i32 = \"~lib/builtins/i32\";\r\n  export const i64 = \"~lib/builtins/i64\";\r\n  export const isize = \"~lib/builtins/isize\";\r\n  export const u8 = \"~lib/builtins/u8\";\r\n  export const u16 = \"~lib/builtins/u16\";\r\n  export const u32 = \"~lib/builtins/u32\";\r\n  export const u64 = \"~lib/builtins/u64\";\r\n  export const usize = \"~lib/builtins/usize\";\r\n  export const bool = \"~lib/builtins/bool\";\r\n  export const f32 = \"~lib/builtins/f32\";\r\n  export const f64 = \"~lib/builtins/f64\";\r\n  export const v128 = \"~lib/builtins/v128\";\r\n  export const void_ = \"~lib/builtins/void\";\r\n\r\n  export const i32_clz = \"~lib/builtins/i32.clz\";\r\n  export const i64_clz = \"~lib/builtins/i64.clz\";\r\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\r\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\r\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\r\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\r\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\r\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\r\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\r\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\r\n\r\n  export const f32_abs = \"~lib/builtins/f32.abs\";\r\n  export const f64_abs = \"~lib/builtins/f64.abs\";\r\n  export const f32_max = \"~lib/builtins/f32.max\";\r\n  export const f64_max = \"~lib/builtins/f64.max\";\r\n  export const f32_min = \"~lib/builtins/f32.min\";\r\n  export const f64_min = \"~lib/builtins/f64.min\";\r\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\r\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\r\n  export const f32_floor = \"~lib/builtins/f32.floor\";\r\n  export const f64_floor = \"~lib/builtins/f64.floor\";\r\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\r\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\r\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\r\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\r\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\r\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\r\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\r\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\r\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\r\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\r\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\r\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\r\n\r\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\r\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\r\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\r\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\r\n  export const i32_load = \"~lib/builtins/i32.load\";\r\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\r\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\r\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\r\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\r\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\r\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\r\n  export const i64_load = \"~lib/builtins/i64.load\";\r\n  export const f32_load = \"~lib/builtins/f32.load\";\r\n  export const f64_load = \"~lib/builtins/f64.load\";\r\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\r\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\r\n  export const i32_store = \"~lib/builtins/i32.store\";\r\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\r\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\r\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\r\n  export const i64_store = \"~lib/builtins/i64.store\";\r\n  export const f32_store = \"~lib/builtins/f32.store\";\r\n  export const f64_store = \"~lib/builtins/f64.store\";\r\n\r\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\r\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\r\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\r\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\r\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\r\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\r\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\r\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\r\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\r\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\r\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\r\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\r\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\r\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\r\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\r\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\r\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\r\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\r\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\r\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\r\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\r\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\r\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\r\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\r\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\r\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\r\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\r\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\r\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\r\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\r\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\r\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\r\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\r\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\r\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\r\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\r\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\r\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\r\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\r\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\r\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\r\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\r\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\r\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\r\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\r\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\r\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\r\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\r\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\r\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\r\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\r\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\r\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\r\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\r\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\r\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\r\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\r\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\r\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\r\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\r\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\r\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\r\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\r\n  export const i32_wait = \"~lib/builtins/i32.wait\";\r\n  export const i64_wait = \"~lib/builtins/i64.wait\";\r\n\r\n  export const v128_splat = \"~lib/builtins/v128.splat\";\r\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\r\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\r\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\r\n  export const v128_load = \"~lib/builtins/v128.load\";\r\n  export const v128_store = \"~lib/builtins/v128.store\";\r\n  export const v128_add = \"~lib/builtins/v128.add\";\r\n  export const v128_sub = \"~lib/builtins/v128.sub\";\r\n  export const v128_mul = \"~lib/builtins/v128.mul\";\r\n  export const v128_div = \"~lib/builtins/v128.div\";\r\n  export const v128_neg = \"~lib/builtins/v128.neg\";\r\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\r\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\r\n  export const v128_shl = \"~lib/builtins/v128.shl\";\r\n  export const v128_shr = \"~lib/builtins/v128.shr\";\r\n  export const v128_and = \"~lib/builtins/v128.and\";\r\n  export const v128_or = \"~lib/builtins/v128.or\";\r\n  export const v128_xor = \"~lib/builtins/v128.xor\";\r\n  export const v128_not = \"~lib/builtins/v128.not\";\r\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\r\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\r\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\r\n  export const v128_min = \"~lib/builtins/v128.min\";\r\n  export const v128_max = \"~lib/builtins/v128.max\";\r\n  export const v128_abs = \"~lib/builtins/v128.abs\";\r\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\r\n  export const v128_eq = \"~lib/builtins/v128.eq\";\r\n  export const v128_ne = \"~lib/builtins/v128.ne\";\r\n  export const v128_lt = \"~lib/builtins/v128.lt\";\r\n  export const v128_le = \"~lib/builtins/v128.le\";\r\n  export const v128_gt = \"~lib/builtins/v128.gt\";\r\n  export const v128_ge = \"~lib/builtins/v128.ge\";\r\n  export const v128_convert = \"~lib/builtins/v128.convert\";\r\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\r\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\r\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\r\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\r\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\r\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\r\n\r\n  export const i8x16 = \"~lib/builtins/i8x16\";\r\n  export const i16x8 = \"~lib/builtins/i16x8\";\r\n  export const i32x4 = \"~lib/builtins/i32x4\";\r\n  export const i64x2 = \"~lib/builtins/i64x2\";\r\n  export const f32x4 = \"~lib/builtins/f32x4\";\r\n  export const f64x2 = \"~lib/builtins/f64x2\";\r\n\r\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\r\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\r\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\r\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\r\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\r\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\r\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\r\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\r\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\r\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\r\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\r\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\r\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\r\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\r\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\r\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\r\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\r\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\r\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\r\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\r\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\r\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\r\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\r\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\r\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\r\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\r\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\r\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\r\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\r\n\r\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\r\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\r\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\r\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\r\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\r\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\r\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\r\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\r\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\r\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\r\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\r\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\r\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\r\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\r\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\r\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\r\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\r\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\r\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\r\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\r\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\r\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\r\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\r\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\r\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\r\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\r\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\r\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\r\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\r\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\r\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\r\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\r\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\r\n\r\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\r\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\r\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\r\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\r\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\r\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\r\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\r\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\r\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\r\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\r\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\r\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\r\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\r\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\r\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\r\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\r\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\r\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\r\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\r\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\r\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\r\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\r\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\r\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\r\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\r\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\r\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\r\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\r\n\r\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\r\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\r\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\r\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\r\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\r\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\r\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\r\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\r\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\r\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\r\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\r\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\r\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\r\n\r\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\r\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\r\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\r\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\r\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\r\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\r\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\r\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\r\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\r\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\r\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\r\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\r\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\r\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\r\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\r\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\r\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\r\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\r\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\r\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\r\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\r\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\r\n\r\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\r\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\r\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\r\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\r\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\r\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\r\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\r\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\r\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\r\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\r\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\r\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\r\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\r\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\r\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\r\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\r\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\r\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\r\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\r\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\r\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\r\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\r\n\r\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\r\n\r\n  // internals\r\n  export const heap_base = \"~lib/heap/__heap_base\";\r\n  export const rtti_base = \"~lib/rt/__rtti_base\";\r\n  export const visit_globals = \"~lib/rt/__visit_globals\";\r\n  export const visit_members = \"~lib/rt/__visit_members\";\r\n\r\n  // std/diagnostics.ts\r\n  export const ERROR = \"~lib/diagnostics/ERROR\";\r\n  export const WARNING = \"~lib/diagnostics/WARNING\";\r\n  export const INFO = \"~lib/diagnostics/INFO\";\r\n\r\n  // std/memory.ts\r\n  export const memory_size = \"~lib/memory/memory.size\";\r\n  export const memory_grow = \"~lib/memory/memory.grow\";\r\n  export const memory_copy = \"~lib/memory/memory.copy\";\r\n  export const memory_fill = \"~lib/memory/memory.fill\";\r\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\r\n  export const memory_free = \"~lib/memory/memory.free\";\r\n  export const memory_reset = \"~lib/memory/memory.reset\";\r\n\r\n  // std/runtime.ts\r\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\r\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\r\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\r\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\r\n  export const runtime_register = \"~lib/util/runtime/register\";\r\n  export const runtime_discard = \"~lib/util/runtime/discard\";\r\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\r\n\r\n  // std/typedarray.ts\r\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\r\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\r\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\r\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\r\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\r\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\r\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\r\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\r\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\r\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\r\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\r\n\r\n  // compiler generated\r\n  export const started = \"~lib/started\";\r\n  export const argc = \"~lib/argc\";\r\n  export const setargc = \"~lib/setargc\";\r\n  export const capabilities = \"~lib/capabilities\";\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  /* Compiler reference. */\r\n  compiler: Compiler,\r\n  /** Respective function prototype. */\r\n  prototype: FunctionPrototype,\r\n  /** Pre-resolved type arguments. */\r\n  typeArguments: Type[] | null,\r\n  /** Operand expressions. */\r\n  operands: Expression[],\r\n  /** Contextual type. */\r\n  contextualType: Type,\r\n  /** Respective call expression. */\r\n  reportNode: CallExpression,\r\n  /** Indicates that contextual type is ASM type. */\r\n  isAsm: bool = false\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\r\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\r\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\r\n\r\n  var directize = false;\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // === Static type evaluation =================================================================\r\n\r\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type == Type.bool\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        let classReference = type.classReference;\r\n        if (classReference) {\r\n          let stringInstance = compiler.program.stringInstance;\r\n          if (stringInstance && classReference.isAssignableTo(stringInstance)) return module.i32(1);\r\n        }\r\n      }\r\n      return module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        let classReference = type.classReference;\r\n        if (classReference) {\r\n          return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\r\n        }\r\n      }\r\n      return module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        let classReference = type.classReference;\r\n        if (classReference) {\r\n          return module.i32(classReference.isArrayLike ? 1 : 0);\r\n        }\r\n      }\r\n      return module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.signatureReference ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let element = compiler.resolver.lookupExpression(\r\n        operands[0],\r\n        compiler.currentFlow,\r\n        Type.auto,\r\n        ReportMode.SWALLOW\r\n      );\r\n      return module.i32(element ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let expr = compiler.compileExpression(operands[0], Type.auto);\r\n      compiler.currentType = Type.bool;\r\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.isManaged ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isVoid: { // isVoid<T>() -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.lengthof: { // lengthof<T>() -> i32\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.i32;\r\n      if (!type) return module.unreachable();\r\n\r\n      // Report if there is no call signature\r\n      let signatureReference = type.signatureReference;\r\n      if (!signatureReference) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_has_no_call_signatures,\r\n          reportNode.range, \"1\", (typeArguments ? typeArguments.length : 1).toString(10)\r\n        );\r\n        return module.unreachable();\r\n      }\r\n\r\n      let parameterNames = signatureReference.parameterNames;\r\n      return module.i32(!parameterNames ? 0 : parameterNames.length);\r\n    }\r\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.i32(byteSize);\r\n        } else {\r\n          expr = module.i64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.i64(byteSize, 0);\r\n        } else {\r\n          expr = module.i32(byteSize);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      assert(isPowerOf2(byteSize));\r\n      let alignLog2 = ctz<i32>(byteSize);\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.i32(alignLog2);\r\n        } else {\r\n          expr = module.i64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.i64(alignLog2, 0);\r\n        } else {\r\n          expr = module.i32(alignLog2);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let typeArgument = typeArguments![0];\r\n      let classType = typeArgument.classReference;\r\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classType !== null)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.i32(offset);\r\n        } else {\r\n          return module.i64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.i64(offset);\r\n        } else {\r\n          return module.i32(offset);\r\n        }\r\n      }\r\n    }\r\n    case BuiltinSymbols.nameof: {\r\n      // Check to make sure a parameter or a type was passed to the builtin\r\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      if (!resultType) return module.unreachable();\r\n\r\n      let value: string;\r\n      if (resultType.is(TypeFlags.REFERENCE)) {\r\n        let classReference = resultType.classReference;\r\n        if (classReference) {\r\n          value = classReference.name;\r\n        } else {\r\n          let signatureReference = resultType.signatureReference;\r\n          if (signatureReference) {\r\n            value = \"Function\";\r\n          } else {\r\n            value = \"Anyref\";\r\n          }\r\n        }\r\n      } else {\r\n        switch (resultType.kind) {\r\n          case TypeKind.BOOL: { value = \"bool\"; break; }\r\n          case TypeKind.I8: { value = \"i8\"; break; }\r\n          case TypeKind.U8: { value = \"u8\"; break; }\r\n          case TypeKind.I16: { value = \"i16\"; break; }\r\n          case TypeKind.U16: { value = \"u16\"; break; }\r\n          case TypeKind.I32: { value = \"i32\"; break; }\r\n          case TypeKind.U32: { value = \"u32\"; break; }\r\n          case TypeKind.F32: { value = \"f32\"; break; }\r\n          case TypeKind.I64: { value = \"i64\"; break; }\r\n          case TypeKind.U64: { value = \"u64\"; break; }\r\n          case TypeKind.F64: { value = \"f64\"; break; }\r\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\r\n          case TypeKind.USIZE: { value = \"usize\"; break; }\r\n          case TypeKind.V128: { value = \"v128\"; break; }\r\n          // If the kind is not set properly, throw an error.\r\n          // The default case falls through to satisfy that value is always set, and never null.\r\n          default: assert(false);\r\n          case TypeKind.VOID: { value = \"void\"; break; }\r\n        }\r\n      }\r\n\r\n      return compiler.ensureStaticString(value);\r\n    }\r\n\r\n    // === Math ===================================================================================\r\n\r\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\r\n    case BuiltinSymbols.ctz:\r\n    case BuiltinSymbols.popcnt: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.clz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.ClzI64\r\n                : UnaryOp.ClzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.ctz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.CtzI64\r\n                : UnaryOp.CtzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.popcnt: {\r\n          switch (compiler.currentType.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.PopcntI64\r\n                : UnaryOp.PopcntI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\r\n            type\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.binary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflows\r\n    }\r\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\r\n            type\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.binary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflowws\r\n    }\r\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal1 = flow.getTempLocal(Type.i32);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 31)) ^ (x >> 31)\r\n          expr = module.binary(BinaryOp.XorI32,\r\n            module.binary(BinaryOp.AddI32,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(BinaryOp.ShrI32,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  module.i32(31)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, NativeType.I32)\r\n            ),\r\n            module.local_get(tempLocalIndex2, NativeType.I32)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let options = compiler.options;\r\n          let flow = compiler.currentFlow;\r\n          let wasm64 = options.isWasm64;\r\n\r\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\r\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  wasm64 ? module.i64(63) : module.i32(31)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\r\n            ),\r\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          let tempLocal1 = flow.getTempLocal(Type.i64);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 63)) ^ (x >> 63)\r\n          expr = module.binary(BinaryOp.XorI64,\r\n            module.binary(BinaryOp.AddI64,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(BinaryOp.ShrI64,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  module.i64(63)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, NativeType.I64)\r\n            ),\r\n            module.local_get(tempLocalIndex2, NativeType.I64)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\r\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\r\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtI64\r\n            : BinaryOp.GtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtU64\r\n            : BinaryOp.GtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type);\r\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\r\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.select(\r\n        module.local_tee(tempLocal0.index, arg0),\r\n        module.local_tee(tempLocal1.index, arg1),\r\n        module.binary(op,\r\n          module.local_get(tempLocal0.index, nativeType),\r\n          module.local_get(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\r\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\r\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtI64\r\n            : BinaryOp.LtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtU64\r\n            : BinaryOp.LtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type);\r\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\r\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.select(\r\n        module.local_tee(tempLocal0.index, arg0),\r\n        module.local_tee(tempLocal1.index, arg1),\r\n        module.binary(op,\r\n          module.local_get(tempLocal0.index, nativeType),\r\n          module.local_get(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\r\n    case BuiltinSymbols.floor: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: return arg0; // considered rounded\r\n        case TypeKind.F32: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF32\r\n            : UnaryOp.FloorF32;\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF64\r\n            : UnaryOp.FloorF64;\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        // TODO: does an integer version make sense?\r\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\r\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          let arg0 = compiler.compileExpression(operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            Constraints.CONV_IMPLICIT\r\n          );\r\n          expr = module.unary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = type;\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n\r\n    // === Memory access ==========================================================================\r\n\r\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        contextualType != Type.auto &&\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let numOperands = operands.length;\r\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (numOperands == 3) {\r\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[2].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.load(\r\n        type.byteSize,\r\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset,\r\n        immAlign\r\n      );\r\n    }\r\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (operands.length == 4) {\r\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[3].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\r\n    }\r\n\r\n    // === Atomics ================================================================================\r\n\r\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      if (!type.is(TypeFlags.INTEGER)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.atomic_load(\r\n        type.byteSize,\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(\r\n            operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\r\n    }\r\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\r\n    case BuiltinSymbols.atomic_sub:\r\n    case BuiltinSymbols.atomic_and:\r\n    case BuiltinSymbols.atomic_or:\r\n    case BuiltinSymbols.atomic_xor:\r\n    case BuiltinSymbols.atomic_xchg: {\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.unreachable();\r\n      }\r\n      let op: AtomicRMWOp;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\r\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\r\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\r\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\r\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\r\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.atomic_rmw(\r\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      let arg2 = compiler.compileExpression(operands[2],\r\n        inType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        arg2 = compiler.convertExpression(arg2,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[2]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.atomic_cmpxchg(\r\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = compiler.compileExpression(operands[1], type,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg2 = compiler.compileExpression(operands[2],\r\n        Type.i64,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\r\n    }\r\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32) -> i32\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = compiler.compileExpression(operands[1],\r\n        Type.i32,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.atomic_notify(arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.atomic_fence: { // fence() -> void\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.atomic_fence();\r\n    }\r\n\r\n    // === Control flow ===========================================================================\r\n\r\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.auto);\r\n      let type = compiler.currentType;\r\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpression(operands[2], Type.bool),\r\n        compiler.currentType // ^\r\n      );\r\n      compiler.currentType = type;\r\n      return module.select(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      checkArgsRequired(operands, 0, reportNode, compiler);\r\n      return module.unreachable();\r\n    }\r\n\r\n    // === Memory =================================================================================\r\n\r\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.host(HostOp.MemorySize);\r\n    }\r\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.host(HostOp.MemoryGrow, null, [\r\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\r\n      ]);\r\n    }\r\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.unreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.memory_copy(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.unreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.memory_fill(arg0, arg1, arg2);\r\n    }\r\n\r\n    // === Helpers ================================================================================\r\n\r\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let toType = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], toType);\r\n      let fromType = compiler.currentType;\r\n      compiler.currentType = toType;\r\n      if (fromType.size != toType.size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return arg0;\r\n    }\r\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) {\r\n        if (typeArguments) {\r\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\r\n          compiler.currentType = typeArguments[0].nonNullableType;\r\n        }\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // if the assertion can be proven statically, omit it\r\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\r\n        switch (getExpressionType(arg0)) {\r\n          case NativeType.I32: {\r\n            if (getConstValueI32(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            if (getConstValueF32(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            if (getConstValueF64(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // return ifTrueish if assertions are disabled\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) { // simplify if dropped anyway\r\n          compiler.currentType = Type.void;\r\n          return module.nop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      // otherwise call abort if the assertion is false-ish\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n      compiler.currentType = type.nonNullableType;\r\n      let expr: ExpressionRef;\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        compiler.currentType = Type.void;\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI32, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI64, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            expr = module.if(\r\n              module.unary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.f32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.f64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        compiler.currentType = type.nonNullableType;\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFlow;\r\n            let tempLocal = flow.getAndFreeTempLocal(type);\r\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\r\n            expr = module.if(\r\n              module.local_tee(tempLocal.index, arg0),\r\n              module.local_get(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI64,\r\n                module.local_tee(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\r\n            expr = module.if(\r\n              module.unary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.local_tee(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF32,\r\n                module.local_tee(tempLocal.index, arg0),\r\n                module.f32(0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF64,\r\n                module.local_tee(tempLocal.index, arg0),\r\n                module.f64(0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let flow = compiler.currentFlow;\r\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      // eliminate unnecessary tees by preferring contextualType(=void)\r\n      let expr = compiler.compileExpression(operands[0], contextualType);\r\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.call_direct: directize = true;\r\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\r\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\r\n      let arg0Type = compiler.currentType;\r\n      if (!(\r\n        arg0Type == Type.u32 ||                                      // either plain index\r\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\r\n      )) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let parameterTypes = new Array<Type>(numOperands);\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\r\n        let operandType = compiler.currentType;\r\n        parameterTypes[i] = operandType;\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      if (directize) {\r\n        // if the index expression is precomputable to a constant value, emit a direct call\r\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\r\n          assert(getExpressionType(arg0) == NativeType.I32);\r\n          let index = getConstValueI32(arg0);\r\n          let functionTable = compiler.functionTable;\r\n          if (index >= 0 && index < functionTable.length) {\r\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.call_indirect(arg0, operandExprs, typeName);\r\n    }\r\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\r\n      ) return module.unreachable();\r\n      let typeArgument = typeArguments![0];\r\n      let classInstance = typeArgument.classReference;\r\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = classInstance.type;\r\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\r\n    }\r\n\r\n    // === User-defined diagnostics ===============================================================\r\n\r\n    case BuiltinSymbols.ERROR: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.WARNING: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.nop();\r\n    }\r\n    case BuiltinSymbols.INFO: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.nop();\r\n    }\r\n\r\n    // === Portable type conversions ==============================================================\r\n\r\n    case BuiltinSymbols.i8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i8;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i16;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.isize: {\r\n      let isizeType = compiler.options.isizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = isizeType;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u8;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u16;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.usize: {\r\n      let usizeType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = usizeType;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.bool: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\r\n    }\r\n\r\n    // === SIMD ===================================================================================\r\n\r\n    case BuiltinSymbols.v128: // alias for now\r\n    case BuiltinSymbols.i8x16: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 16, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 16; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI8(getConstValueI32(expr), bytes, i);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i16x8: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 8, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 8; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI16(getConstValueI32(expr), bytes, i << 1);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI32(getConstValueI32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I64);\r\n          let off = i << 3;\r\n          writeI32(getConstValueI64Low(expr), bytes, off);\r\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.f32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F32);\r\n          writeF32(getConstValueF32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.f64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F64);\r\n          writeF64(getConstValueF64(expr), bytes, i << 3);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = UnaryOp.SplatI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = UnaryOp.SplatI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = UnaryOp.SplatI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = UnaryOp.SplatI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? UnaryOp.SplatI64x2\r\n            : UnaryOp.SplatI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = UnaryOp.SplatF32x4; break; }\r\n        case TypeKind.F64: { op = UnaryOp.SplatF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = type;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDExtractOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneI8x16; break; }\r\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneU8x16; break; }\r\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneI16x8; break; }\r\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneU16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDExtractOp.ExtractLaneI64x2\r\n            : SIMDExtractOp.ExtractLaneI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = type;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = type;\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.simd_extract(op, arg0, idx);\r\n    }\r\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDReplaceOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDReplaceOp.ReplaceLaneI64x2\r\n            : SIMDReplaceOp.ReplaceLaneI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_replace(op, arg0, idx, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let laneWidth = type.byteSize;\r\n      let laneCount = 16 / laneWidth;\r\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\r\n      if (\r\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.F32:\r\n        case TypeKind.F64: break;\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let mask = new Uint8Array(16);\r\n      let maxIdx = (laneCount << 1) - 1;\r\n      for (let i = 0; i < laneCount; ++i) {\r\n        let operand = operands[2 + i];\r\n        let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\r\n        if (getExpressionId(argN) != ExpressionId.Const) {\r\n          compiler.error(\r\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n            operand.range\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n        assert(getExpressionType(argN) == NativeType.I32);\r\n        let idx = getConstValueI32(argN);\r\n        if (idx < 0 || idx > maxIdx) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n        switch (laneWidth) {\r\n          case 1: {\r\n            writeI8(idx, mask, i);\r\n            break;\r\n          }\r\n          case 2: {\r\n            let off8 = i << 1;\r\n            let idx8 = idx << 1;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            break;\r\n          }\r\n          case 4: {\r\n            let off8 = i << 2;\r\n            let idx8 = idx << 2;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            break;\r\n          }\r\n          case 8: {\r\n            let off8 = i << 3;\r\n            let idx8 = idx << 3;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            writeI8(idx8 + 4, mask, off8 + 4);\r\n            writeI8(idx8 + 5, mask, off8 + 5);\r\n            writeI8(idx8 + 6, mask, off8 + 6);\r\n            writeI8(idx8 + 7, mask, off8 + 7);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_shuffle(arg0, arg1, mask);\r\n    }\r\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_sub:\r\n    case BuiltinSymbols.v128_mul:\r\n    case BuiltinSymbols.v128_div:\r\n    case BuiltinSymbols.v128_add_saturate:\r\n    case BuiltinSymbols.v128_sub_saturate:\r\n    case BuiltinSymbols.v128_min:\r\n    case BuiltinSymbols.v128_max:\r\n    case BuiltinSymbols.v128_eq:\r\n    case BuiltinSymbols.v128_ne:\r\n    case BuiltinSymbols.v128_lt:\r\n    case BuiltinSymbols.v128_le:\r\n    case BuiltinSymbols.v128_gt:\r\n    case BuiltinSymbols.v128_ge:\r\n    case BuiltinSymbols.v128_narrow: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_add: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.AddI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.AddI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.AddI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.AddI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.AddI64x2\r\n                : BinaryOp.AddI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.AddF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.AddF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.SubI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.SubI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.SubI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.SubI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.SubI64x2\r\n                : BinaryOp.SubI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.SubF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.SubF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_mul: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.MulI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.MulI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.MulI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.MulF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MulF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.MulI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_div: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.DivF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.DivF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_add_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.AddSatI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.AddSatU8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.AddSatI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.AddSatU16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.SubSatI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.SubSatU8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.SubSatI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.SubSatU16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_min: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MinF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MinF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_max: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MaxF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MaxF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_eq: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.EqI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.EqI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.EqI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.EqF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.EqF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.EqI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ne: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.NeI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.NeI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.NeI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.NeF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.NeF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.NeI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_lt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LtI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LtU8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LtI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LtU16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LtI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LtU32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LtF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LtF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LtI32x4\r\n                  : BinaryOp.LtU32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_le: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LeI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LeU8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LeI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LeU16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LeI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LeU32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LeF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LeF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LeI32x4\r\n                  : BinaryOp.LeU32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_gt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GtI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GtU8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GtI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GtU16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GtI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GtU32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GtF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GtF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GtI32x4\r\n                  : BinaryOp.GtU32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ge: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GeI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GeU8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GeI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GeU16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GeI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GeU32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GeF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GeF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GeI32x4\r\n                  : BinaryOp.GeU32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_narrow: {\r\n          switch (type.kind) {\r\n            case TypeKind.I16: { op = BinaryOp.NarrowI16x8ToI8x16; break; }\r\n            case TypeKind.U16: { op = BinaryOp.NarrowU16x8ToU8x16; break; }\r\n            case TypeKind.I32: { op = BinaryOp.NarrowI32x4ToI16x8; break; }\r\n            case TypeKind.U32: { op = BinaryOp.NarrowU32x4ToU16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\r\n    case BuiltinSymbols.v128_abs:\r\n    case BuiltinSymbols.v128_sqrt:\r\n    case BuiltinSymbols.v128_convert:\r\n    case BuiltinSymbols.v128_trunc_sat:\r\n    case BuiltinSymbols.v128_widen_low:\r\n    case BuiltinSymbols.v128_widen_high: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_neg: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.NegI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.NegI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.NegI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.NegI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.NegI64x2\r\n                : UnaryOp.NegI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = UnaryOp.NegF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.NegF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_abs: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.AbsF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.AbsF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sqrt: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.SqrtF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.SqrtF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_convert: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.ConvertI32x4ToF32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.ConvertU32x4ToF32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.ConvertI64x2ToF64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.ConvertU64x2ToF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_trunc_sat: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.TruncSatF32x4ToI32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.TruncSatF32x4ToU32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.TruncSatF64x2ToI64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.TruncSatF64x2ToU64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_widen_low: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8: { op = UnaryOp.WidenLowI8x16ToI16x8; break; }\r\n            case TypeKind.U8: { op = UnaryOp.WidenLowU8x16ToU16x8; break; }\r\n            case TypeKind.I16: { op = UnaryOp.WidenLowI16x8ToI32x4; break; }\r\n            case TypeKind.U16: { op = UnaryOp.WidenLowU16x8ToU32x4; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_widen_high: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8: { op = UnaryOp.WidenHighI8x16ToI16x8; break; }\r\n            case TypeKind.U8: { op = UnaryOp.WidenHighU8x16ToU16x8; break; }\r\n            case TypeKind.I16: { op = UnaryOp.WidenHighI16x8ToI32x4; break; }\r\n            case TypeKind.U16: { op = UnaryOp.WidenHighU16x8ToU32x4; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\r\n    case BuiltinSymbols.v128_shr: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDShiftOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_shl: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShlI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShlI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShlI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShlI64x2\r\n                : SIMDShiftOp.ShlI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_shr: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrI8x16; break; }\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrU8x16; break; }\r\n            case TypeKind.I16: { op = SIMDShiftOp.ShrI16x8; break; }\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShrU16x8; break; }\r\n            case TypeKind.I32: { op = SIMDShiftOp.ShrI32x4; break; }\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShrU32x4; break; }\r\n            case TypeKind.I64: { op = SIMDShiftOp.ShrI64x2; break; }\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShrU64x2; break; }\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrI64x2\r\n                : SIMDShiftOp.ShrI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrU64x2\r\n                : SIMDShiftOp.ShrU32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_shift(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_or:\r\n    case BuiltinSymbols.v128_xor: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndV128; break; }\r\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrV128; break; }\r\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorV128; break; }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.unary(UnaryOp.NotV128, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.simd_ternary(SIMDTernaryOp.Bitselect, arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\r\n    case BuiltinSymbols.v128_all_true: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_any_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AnyTrueI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AnyTrueI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AnyTrueI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AnyTrueI64x2\r\n                : UnaryOp.AnyTrueI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_all_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AllTrueI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AllTrueI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AllTrueI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AllTrueI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AllTrueI64x2\r\n                : UnaryOp.AllTrueI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.bool;\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_qfma:   // qfma(a: v128, b: v128, c: v128) -> v128\r\n    case BuiltinSymbols.v128_qfms: { // qfms(a: v128, b: v128, c: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDTernaryOp;\r\n      let type = typeArguments![0];\r\n      if (type == Type.f32) {\r\n        op = prototype.internalName == BuiltinSymbols.v128_qfma\r\n           ? SIMDTernaryOp.QFMAF32x4\r\n           : SIMDTernaryOp.QFMSF32x4;\r\n      } else if (type == Type.f64) {\r\n        op = prototype.internalName == BuiltinSymbols.v128_qfma\r\n           ? SIMDTernaryOp.QFMAF64x2\r\n           : SIMDTernaryOp.QFMSF64x2;\r\n      } else {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.simd_ternary(op, arg0, arg1, arg2);\r\n    }\r\n\r\n    // === Internal runtime =======================================================================\r\n\r\n    case BuiltinSymbols.idof: {\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.u32;\r\n      if (!type) return module.unreachable();\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        let signatureReference = type.signatureReference;\r\n        if (signatureReference) {\r\n          return module.i32(signatureReference.id);\r\n        }\r\n        let classReference = type.classReference;\r\n        if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n          return module.i32(classReference.id);\r\n        }\r\n      }\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.typeArgumentsRange\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.visit_globals: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\r\n      compiler.currentType = Type.void;\r\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\r\n    }\r\n    case BuiltinSymbols.visit_members: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\r\n      compiler.currentType = Type.void;\r\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\r\n    }\r\n  }\r\n\r\n  // try to defer inline asm to a concrete built-in\r\n  {\r\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\r\n    if (expr) {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      return expr;\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Cannot_find_name_0,\r\n    reportNode.expression.range, prototype.internalName\r\n  );\r\n  return module.unreachable();\r\n}\r\n\r\n/** Tries to defer an inline-assembler-like call to a built-in function. */\r\nfunction tryDeferASM(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  /* tslint:disable:max-line-length */\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  if (compiler.options.hasFeature(Feature.THREADS)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\r\n    }\r\n  }\r\n  if (compiler.options.hasFeature(Feature.SIMD)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\r\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_narrow_i16x8_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_narrow_i16x8_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u16, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\r\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_narrow_i32x4_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_narrow_i32x4_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_widen_low_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_widen_low_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_widen_high_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_widen_high_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u8, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_sat_f32x4_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_sat_f32x4_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_widen_low_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_widen_low_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_widen_high_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_widen_high_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u16, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_sat_f64x2_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_sat_f64x2_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\r\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_i32x4_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_i32x4_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\r\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_i64x2_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_i64x2_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    }\r\n  }\r\n  /* tslint:enable:max-line-length */\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  assert(compiler.program.elementsByName.has(name));\r\n  var prototype = compiler.program.elementsByName.get(name)!;\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(\r\n    compiler,\r\n    <FunctionPrototype>prototype,\r\n    [ typeArgument ],\r\n    operands,\r\n    contextualType,\r\n    reportNode,\r\n    /* isAsm */ true\r\n  );\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringInstance = compiler.program.stringInstance;\r\n  if (!stringInstance) return module.unreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\r\n\r\n  var messageArg: ExpressionRef;\r\n  if (message !== null) {\r\n    // The message argument works much like an arm of an IF that does not become executed if the\r\n    // assertion succeeds respectively is only being computed if the program actually crashes.\r\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\r\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\r\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\r\n  } else {\r\n    messageArg = stringInstance.type.toNativeZero(module);\r\n  }\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.block(null, [\r\n    module.call(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.i32(reportNode.range.line),\r\n        module.i32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.unreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the `visit_globals` function. */\r\nexport function compileVisitGlobals(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n  var visitInstance = assert(compiler.program.visitInstance);\r\n\r\n  compiler.compileFunction(visitInstance);\r\n\r\n  for (let element of compiler.program.elementsByName.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let globalType = global.type;\r\n    let classType = globalType.classReference;\r\n    if (\r\n      globalType.is(TypeFlags.REFERENCE) &&\r\n      classType !== null &&\r\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\r\n      global.is(CommonFlags.COMPILED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        if (i64_low(value) || i64_high(value)) {\r\n          exprs.push(\r\n            module.call(visitInstance.internalName, [\r\n              compiler.options.isWasm64\r\n                ? module.i64(i64_low(value), i64_high(value))\r\n                : module.i32(i64_low(value))\r\n            ], NativeType.None)\r\n          );\r\n        }\r\n      } else {\r\n        exprs.push(\r\n          module.if(\r\n            module.local_tee(1,\r\n              module.global_get(global.internalName, nativeSizeType)\r\n            ),\r\n            module.call(visitInstance.internalName, [\r\n              module.local_get(1, nativeSizeType), // tempRef != null\r\n              module.local_get(0, NativeType.I32) // cookie\r\n            ], NativeType.None)\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\r\n    exprs.length\r\n      ? module.block(null, exprs)\r\n      : module.nop()\r\n  );\r\n}\r\n\r\n/** Compiles the `visit_members` function. */\r\nexport function compileVisitMembers(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var usizeType = program.options.usizeType;\r\n  var nativeSizeType = usizeType.toNativeType();\r\n  var nativeSizeSize = usizeType.byteSize;\r\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\r\n  var managedClasses = program.managedClasses;\r\n  var visitInstance = assert(program.visitInstance);\r\n  var blocks = new Array<RelooperBlockRef>();\r\n  var relooper = Relooper.create(module);\r\n\r\n  var outer = relooper.addBlockWithSwitch(\r\n    module.nop(),\r\n    module.load(nativeSizeSize, false,\r\n      nativeSizeType == NativeType.I64\r\n        ? module.binary(BinaryOp.SubI64,\r\n            module.local_get(0, nativeSizeType),\r\n            module.i64(8)\r\n          )\r\n        : module.binary(BinaryOp.SubI32,\r\n            module.local_get(0, nativeSizeType),\r\n            module.i32(8) // rtId is at -8\r\n          ),\r\n      NativeType.I32,\r\n      0\r\n    )\r\n  );\r\n\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(instance.type.isManaged);\r\n    assert(id == lastId++);\r\n\r\n    let visitImpl: Element | null;\r\n    let code = new Array<ExpressionRef>();\r\n\r\n    // if a library element, check if it implements a custom traversal function\r\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\r\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\r\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\r\n        code.push(\r\n          module.unreachable()\r\n        );\r\n      } else {\r\n        let visitSig = visitFunc.signature;\r\n        assert(\r\n          visitSig.parameterTypes.length == 1 &&\r\n          visitSig.parameterTypes[0] == Type.u32 &&\r\n          visitSig.returnType == Type.void &&\r\n          visitSig.thisType == instance.type\r\n        );\r\n        code.push(\r\n          module.call(visitFunc.internalName, [\r\n            module.local_get(0, nativeSizeType), // ref\r\n            module.local_get(1, NativeType.I32)  // cookie\r\n          ], NativeType.None)\r\n        );\r\n      }\r\n\r\n    // otherwise generate traversal logic for own fields\r\n    } else {\r\n      let members = instance.members;\r\n      if (members) {\r\n        for (let member of members.values()) {\r\n          if (member.kind == ElementKind.FIELD) {\r\n            if ((<Field>member).parent === instance) {\r\n              let fieldType = (<Field>member).type;\r\n              if (fieldType.isManaged) {\r\n                let fieldOffset = (<Field>member).memoryOffset;\r\n                assert(fieldOffset >= 0);\r\n                code.push(\r\n                  // if ($2 = value) FIELDCLASS~traverse($2)\r\n                  module.if(\r\n                    module.local_tee(2,\r\n                      module.load(nativeSizeSize, false,\r\n                        module.local_get(0, nativeSizeType),\r\n                        nativeSizeType, fieldOffset\r\n                      )\r\n                    ),\r\n                    module.call(visitInstance.internalName, [\r\n                      module.local_get(2, nativeSizeType), // ref\r\n                      module.local_get(1, NativeType.I32)  // cookie\r\n                    ], NativeType.None)\r\n                  )\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (!instance.base) code.push(module.return());\r\n    let block = relooper.addBlock(\r\n      flatten(module, code, NativeType.None)\r\n    );\r\n    relooper.addBranchForSwitch(outer, block, [ id ]);\r\n    blocks.push(block);\r\n  }\r\n  for (let [id, instance] of managedClasses) {\r\n    let base = instance.base;\r\n    if (base) {\r\n      relooper.addBranch(blocks[id], blocks[base.id]);\r\n    }\r\n  }\r\n  blocks.push(\r\n    relooper.addBlock(\r\n      module.unreachable()\r\n    )\r\n  );\r\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\r\n  compiler.compileFunction(visitInstance);\r\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\r\n}\r\n\r\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\r\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\r\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\r\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\r\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\r\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\r\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\r\n}\r\n\r\n/** Compiles runtime type information for use by stdlib. */\r\nexport function compileRTTI(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var managedClasses = program.managedClasses;\r\n  var count = managedClasses.size;\r\n  var size = 4 + 8 * count;\r\n  var data = new Uint8Array(size);\r\n  writeI32(count, data, 0);\r\n  var off = 4;\r\n  var abvInstance = program.arrayBufferViewInstance;\r\n  var abvPrototype = abvInstance.prototype;\r\n  var arrayPrototype = program.arrayPrototype;\r\n  var setPrototype = program.setPrototype;\r\n  var mapPrototype = program.mapPrototype;\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(id == lastId++);\r\n    let flags: TypeinfoFlags = 0;\r\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\r\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\r\n      let valueType = instance.getArrayValueType();\r\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\r\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\r\n    } else if (instance.extends(setPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\r\n      assert(typeArguments.length == 1);\r\n      flags |= TypeinfoFlags.SET;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n    } else if (instance.extends(mapPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\r\n      assert(typeArguments.length == 2);\r\n      flags |= TypeinfoFlags.MAP;\r\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\r\n    }\r\n    writeI32(flags, data, off); off += 4;\r\n    instance.rttiFlags = flags;\r\n    let base = instance.base;\r\n    writeI32(base ? base.id : 0, data, off); off += 4;\r\n  }\r\n  assert(off == size);\r\n  var usizeType = program.options.usizeType;\r\n  var segment = compiler.addMemorySegment(data);\r\n  if (usizeType.size == 8) {\r\n    let offset = segment.offset;\r\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\r\n  } else {\r\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\r\n  }\r\n}\r\n\r\n// Helpers\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments !== null && typeArguments.length) {\r\n      if (typeArguments.length > 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n        );\r\n        return null;\r\n      }\r\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\r\n    } else {\r\n      compiler.compileExpression(operands[0], Type.auto);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a compile-time constant immediate offset argument.*/\r\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Checks a call with a single required type argument. Returns `1` on error. */\r\nfunction checkTypeRequired(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n  } else {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", \"0\"\r\n    );\r\n  }\r\n  return 1;\r\n}\r\n\r\n/** Checks a call with a single optional type argument. Returns `1` on error. */\r\nfunction checkTypeOptional(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that is not generic. Returns `1` on error. */\r\nfunction checkTypeAbsent(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  prototype: FunctionPrototype\r\n): i32 {\r\n  if (typeArguments) {\r\n    prototype.program.error(\r\n      DiagnosticCode.Type_0_is_not_generic,\r\n      reportNode.typeArgumentsRange, prototype.internalName\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\r\nfunction checkArgsRequired(\r\n  operands: Expression[],\r\n  expected: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  if (operands.length != expected) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expected.toString(), operands.length.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\r\nfunction checkArgsOptional(\r\n  operands: Expression[],\r\n  expectedMinimum: i32,\r\n  expectedMaximum: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  var numOperands = operands.length;\r\n  if (numOperands < expectedMinimum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  } else if (numOperands > expectedMaximum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getLocalGetIndex,\r\n  getLocalSetIndex,\r\n  getLocalSetValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        this.push(\"$\");\r\n        this.push(getLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.LocalSet: {\r\n        this.push(\"$\");\r\n        this.push(getLocalSetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getLocalSetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GlobalGet:\r\n      case ExpressionId.GlobalSet: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.MemorySize: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.MemoryGrow: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicNotify:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.V128: return \"v128\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\n import {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property,\r\n  PropertyPrototype,\r\n  File\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  SourceKind\r\n } from \"./ast\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Already seen elements. */\r\n  seen: Map<Element,string> = new Map();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all elements and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\r\n    }\r\n  }\r\n\r\n  /** Visits all exported elements of a file. */\r\n  visitFile(file: File): void {\r\n    var members = file.exports;\r\n    if (members) {\r\n      for (let [name, member] of members) this.visitElement(name, member);\r\n    }\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) {\r\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\r\n    }\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(name: string, element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    var seen = this.seen;\r\n    if (seen.has(element)) {\r\n      this.visitAlias(name, element, <string>seen.get(element));\r\n      return;\r\n    }\r\n    seen.set(element, name);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(name, <ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterInstance;\r\n        if (getter) this.visitFunction(name, getter);\r\n        let setter = prop.setterInstance;\r\n        if (setter) this.visitFunction(name, setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\r\n        break;\r\n      }\r\n      case ElementKind.TYPEDEFINITION: break;\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(name: string, element: ClassPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\r\n    // var instances = element.instances;\r\n    // if (instances) {\r\n    //   for (let instance of instances.values()) {\r\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\r\n    //   }\r\n    // }\r\n    assert(false);\r\n  }\r\n\r\n  abstract visitGlobal(name: string, element: Global): void;\r\n  abstract visitEnum(name: string, element: Enum): void;\r\n  abstract visitFunction(name: string, element: Function): void;\r\n  abstract visitClass(name: string, element: Class): void;\r\n  abstract visitInterface(name: string, element: Interface): void;\r\n  abstract visitField(name: string, element: Field): void;\r\n  abstract visitNamespace(name: string, element: Element): void;\r\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(name: string, element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(name);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(name: string, element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(name: string, element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(name);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(name: string, element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(name: string, element: Interface): void {\r\n    this.visitClass(name, element);\r\n  }\r\n\r\n  visitField(name: string, element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(name: string, element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitAlias(name: string, element: Element, originalName: string): void {\r\n    // TODO\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n  private unknown: Set<string> = new Set();\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(name: string, element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"export const \");\r\n      else sb.push(\"export var \");\r\n    }\r\n    sb.push(name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(name, element);\r\n  }\r\n\r\n  visitEnum(name: string, element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"export enum \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(name, element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(name: string, element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(\"get \");\r\n      sb.push(name); // 'get:funcName' internally\r\n      sb.push(\"(): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\r\n      sb.push(name);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(name, element);\r\n  }\r\n\r\n  visitClass(name: string, element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"export interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"export class \");\r\n    }\r\n    sb.push(name);\r\n    // var base = element.base;\r\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n    //   sb.push(\" extends \");\r\n    //   sb.push(base.name); // TODO: fqn\r\n    // }\r\n    sb.push(\" {\\n\");\r\n    var staticMembers = element.prototype.members;\r\n    if (staticMembers) {\r\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\r\n    }\r\n    var instanceMembers = element.members;\r\n    if (instanceMembers) {\r\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(name: string, element: Interface): void {\r\n    this.visitClass(name, element);\r\n  }\r\n\r\n  visitField(name: string, element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(name: string, element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"export namespace \");\r\n      sb.push(name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitAlias(name: string, element: Element, originalName: string): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"export const \");\r\n    sb.push(name);\r\n    sb.push(\": typeof \");\r\n    sb.push(originalName);\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"any\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          let instances = (<FunctionPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instances = (<ClassPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling,\r\n  isIllegalVariableIdentifier\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  TypeNode,\r\n  NamedTypeNode,\r\n  FunctionTypeNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  IndexSignatureDeclaration,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n  /** Current file being parsed. */\r\n  currentSource: Source;\r\n  /** Dependency map **/\r\n  dependees: Map<string, Source> = new Map();\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    /** Source text of the file. */\r\n    text: string,\r\n    /** Normalized path of the file. */\r\n    path: string,\r\n    /** Whether this is an entry file. */\r\n    isEntry: bool\r\n  ): void {\r\n    // the frontend gives us paths with .ts endings\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.USER_ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX)\r\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n            ? SourceKind.LIBRARY_ENTRY\r\n            : SourceKind.LIBRARY\r\n          : SourceKind.USER\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n    this.currentSource = source;\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn, null);\r\n      if (statement) statements.push(statement);\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: NamespaceDeclaration | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [decorator];\r\n      else decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    var defaultStart: i32 = 0;\r\n    var defaultEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        defaultStart = tn.tokenPos;\r\n        defaultEnd = tn.pos;\r\n      }\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      } else {\r\n        if (startPos < 0) startPos = tn.tokenPos;\r\n        declareStart = startPos;\r\n        declareEnd = tn.pos;\r\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n      }\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        }\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\r\n            if (declareEnd) {\r\n              this.error(\r\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\r\n                tn.range(declareStart, declareEnd)\r\n              );\r\n            }\r\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\r\n            defaultStart = defaultEnd = 0; // consume\r\n          } else {\r\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\r\n          }\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n\r\n    // check if this an `export default` declaration\r\n    if (defaultEnd && statement !== null) {\r\n      switch (statement.kind) {\r\n        case NodeKind.ENUMDECLARATION:\r\n        case NodeKind.FUNCTIONDECLARATION:\r\n        case NodeKind.CLASSDECLARATION:\r\n        case NodeKind.INTERFACEDECLARATION:\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\r\n        }\r\n        default: {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(defaultStart, defaultEnd), \"default\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Obtains the dependee of the given imported file. */\r\n  getDependee(dependent: string): string | null {\r\n    var source = this.dependees.get(dependent);\r\n    if (source) return source.internalPath;\r\n    return null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    this.dependees.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): TypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: TypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseFunctionType(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \")\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n      let current = first;\r\n      let parameters: NamedTypeNode[] | null = null;\r\n      let nullable = false;\r\n\r\n      // Identifier ('.' Identifier)+\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n          current.next = next;\r\n          current = next;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range(tn.pos)\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\r\n          else parameters.push(<NamedTypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      while (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createNamedType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function type, as used in type declarations. */\r\n  tryParseFunctionType(\r\n    tn: Tokenizer\r\n  ): FunctionTypeNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: NamedTypeNode | null = null;\r\n    var isSignature: bool = false;\r\n    var firstParamNameNoType: IdentifierExpression | null = null;\r\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.NAMEDTYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <NamedTypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (!isSignature) {\r\n              if (tn.peek() == Token.COMMA) {\r\n                isSignature = true;\r\n                tn.discard(state);\r\n              }\r\n            }\r\n            if (isSignature) {\r\n              let param = new ParameterNode();\r\n              param.parameterKind = kind;\r\n              param.name = name;\r\n              param.type = Node.createOmittedType(tn.range().atEnd);\r\n              if (!parameters) parameters = [ param ];\r\n              else parameters.push(param);\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                param.type.range\r\n              ); // recoverable\r\n            } else if (!parameters) {\r\n              // on '(' Identifier ^',' we don't yet know whether this is a\r\n              // parenthesized or a function type, hence we have to delay the\r\n              // respective diagnostic until we know for sure.\r\n              firstParamNameNoType = name;\r\n              firstParamKind = kind;\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: TypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      if (!isSignature) {\r\n        isSignature = true;\r\n        tn.discard(state);\r\n        if (firstParamNameNoType) { // now we know\r\n          let param = new ParameterNode();\r\n          param.parameterKind = firstParamKind;\r\n          param.name = firstParamNameNoType;\r\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\r\n          if (!parameters) parameters = [ param ];\r\n          else parameters.push(param);\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            param.type.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createFunctionType(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (isIllegalVariableIdentifier(identifier.text)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        identifier.range\r\n      );\r\n    }\r\n    var flags = parentFlags;\r\n    if (tn.skip(Token.EXCLAMATION)) {\r\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n    }\r\n\r\n    var type: TypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    var range = Range.join(identifier.range, tn.range());\r\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\r\n      this.error(\r\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n        range);\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      range\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    var seenOptional = false;\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      if (typeParameter.defaultType !== null) {\r\n        seenOptional = true;\r\n      } else if (seenOptional) {\r\n        this.error(\r\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\r\n          typeParameter.range\r\n        );\r\n        typeParameter.defaultType = null;\r\n      }\r\n      if (!typeParameters) typeParameters = [ typeParameter ];\r\n      else typeParameters.push(typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (!(typeParameters && typeParameters.length)) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)? ('=' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: NamedTypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.NAMEDTYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <NamedTypeNode>t;\r\n      }\r\n      let defaultType: NamedTypeNode | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.NAMEDTYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        defaultType = <NamedTypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        defaultType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: NamedTypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: TypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\r\n          this.parseParametersThis = <NamedTypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: TypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: TypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createFunctionType(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      ArrowKind.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var arrowKind = ArrowKind.NONE;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    arrowKind: ArrowKind,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: TypeNode | null = null;\r\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n    }\r\n\r\n    if (arrowKind) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createFunctionType(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (arrowKind) {\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        body = this.parseBlockStatement(tn, false);\r\n      } else {\r\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\r\n      }\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      CommonFlags.NONE,\r\n      arrowKind,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    var extendsType: NamedTypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.NAMEDTYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <NamedTypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: NamedTypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\r\n          else implementsTypes.push(<NamedTypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    declaration.range.end = tn.pos;\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    declaration.range.end = tn.pos;\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators: DecoratorNode[] | null = null;\r\n    if (tn.skip(Token.AT)) {\r\n      do {\r\n        let decorator = this.parseDecorator(tn);\r\n        if (!decorator) break;\r\n        if (!decorators) decorators = [<DecoratorNode>decorator];\r\n        else decorators.push(<DecoratorNode>decorator);\r\n      } while (tn.skip(Token.AT));\r\n      if (decorators && isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n        );\r\n      }\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    var accessStart = 0;\r\n    var accessEnd = 0;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    }\r\n\r\n    var staticStart = 0;\r\n    var staticEnd = 0;\r\n    var abstractStart = 0;\r\n    var abstractEnd = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.peek() == Token.READONLY) {\r\n      let state = tn.mark();\r\n      tn.next();\r\n      if (tn.peek() != Token.COLON) { // modifier\r\n        tn.discard(state);\r\n        flags |= CommonFlags.READONLY;\r\n        readonlyStart = tn.tokenPos;\r\n        readonlyEnd = tn.pos;\r\n      } else { // identifier\r\n        tn.reset(state);\r\n      }\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    var name: IdentifierExpression;\r\n    if (isConstructor) {\r\n      name = Node.createConstructorExpression(tn.range());\r\n    } else {\r\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\r\n        // TODO: also handle symbols, which might have some of these modifiers\r\n        if (flags & CommonFlags.PUBLIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"public\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PROTECTED) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PRIVATE) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\r\n        if (!retIndex) return null;\r\n        tn.skip(Token.SEMICOLON);\r\n        return retIndex;\r\n      }\r\n      if (!tn.skipIdentifier()) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: TypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createFunctionType(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: TypeNode | null = null;\r\n      if (tn.skip(Token.QUESTION)) {\r\n        this.error(\r\n          DiagnosticCode.Optional_properties_are_not_supported,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      if (tn.skip(Token.EXCLAMATION)) {\r\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let range = tn.range(startPos, tn.pos);\r\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\r\n        this.error(\r\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n          range\r\n        );\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        range\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\r\n\r\n    // at: '[': 'key' ':' Type ']' ':' Type\r\n\r\n    if (decorators && decorators.length) {\r\n      this.error(\r\n        DiagnosticCode.Decorators_are_not_valid_here,\r\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n      ); // recoverable\r\n    }\r\n\r\n    var start = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let id = tn.readIdentifier();\r\n      if (id == \"key\") {\r\n        if (tn.skip(Token.COLON)) {\r\n          let keyType = this.parseType(tn);\r\n          if (!keyType) return null;\r\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              tn.range()\r\n            );\r\n            return null;\r\n          }\r\n          if (tn.skip(Token.CLOSEBRACKET)) {\r\n            if (tn.skip(Token.COLON)) {\r\n              let valueType = this.parseType(tn);\r\n              if (!valueType) return null;\r\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \":\"\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \":\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"key\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let declaration = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, declaration);\r\n          if (member) members.push(member);\r\n          else {\r\n            this.skipStatement(tn);\r\n            if (tn.skip(Token.ENDOFFILE)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        declaration.range.end = tn.pos;\r\n        tn.skip(Token.SEMICOLON);\r\n        return declaration;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    isDeclare: bool\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseExportMember(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.dependees.set(internalPath, this.currentSource);\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.dependees.set(internalPath, this.currentSource);\r\n            this.backlog.push(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportDefaultAlias(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    defaultStart: i32,\r\n    defaultEnd: i32\r\n  ): ExportStatement {\r\n\r\n    // at 'export' 'default': [Known-To-Be-]Identifier\r\n\r\n    var name = tn.readIdentifier();\r\n    var range = tn.range();\r\n    var ret = Node.createExportStatement([\r\n      Node.createExportMember(\r\n        Node.createIdentifierExpression(name, range),\r\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\r\n        range\r\n      )\r\n    ], null, false, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\r\n      let name = tn.readIdentifier();\r\n      let range = tn.range();\r\n      members = [\r\n        Node.createImportDeclaration(\r\n          Node.createIdentifierExpression(\"default\", range),\r\n          Node.createIdentifierExpression(name, range),\r\n          range\r\n        )\r\n      ];\r\n      if (tn.skip(Token.COMMA)) {\r\n        // TODO: default + star, default + members\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    } else { // import \"file\"\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.dependees.set(internalPath, this.currentSource);\r\n          this.backlog.push(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            ArrowKind.ARROW_PARENTHESIZED\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (\r\n                    !tn.skip(Token.COLON) &&\r\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\r\n                  ) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // optional parameter or parenthesized\r\n                case Token.QUESTION: {\r\n                  if (\r\n                    tn.skip(Token.COLON) ||   // optional parameter with type\r\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\r\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\r\n                  ) {\r\n                    tn.reset(state);\r\n                    return this.parseFunctionExpression(tn);\r\n                  }\r\n                  again = false; // parenthesized\r\n                  break;\r\n                  }\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.isQuoted = true;\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.isQuoted) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        let identifierText = tn.readIdentifier();\r\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\r\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\r\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [\r\n              Node.createParameter(\r\n                identifier,\r\n                Node.createOmittedType(identifier.range.atEnd),\r\n                null,\r\n                ParameterKind.DEFAULT,\r\n                identifier.range\r\n              )\r\n            ],\r\n            ArrowKind.ARROW_SINGLE,\r\n            startPos\r\n          );\r\n        }\r\n        return identifier;\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\r\n          this.error(\r\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\r\n            tn.range()\r\n          );\r\n        }\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): TypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments: TypeNode[] | null = null;\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      if (!typeArguments) typeArguments = [ type ];\r\n      else typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\r\n\r\n    var startPos = expr.range.start;\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        case Token.EXCLAMATION: {\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.NONNULL,\r\n            expr,\r\n            null,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (tn.skipIdentifier()) {\r\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            } else {\r\n              next = this.parseExpression(tn,\r\n                isRightAssociative(token)\r\n                  ? nextPrecedence\r\n                  : nextPrecedence + 1\r\n              );\r\n              if (!next) return null;\r\n            }\r\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\r\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\r\n              if (!expr) return null;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            next = this.parseExpression(tn,\r\n              isRightAssociative(token)\r\n                ? nextPrecedence\r\n                : nextPrecedence + 1\r\n            );\r\n            if (!next) return null;\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  private joinPropertyCall(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    expr: Expression,\r\n    call: CallExpression\r\n  ): Expression | null {\r\n    var callee = call.expression;\r\n    switch (callee.kind) {\r\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\r\n        call.expression = Node.createPropertyAccessExpression(\r\n          expr,\r\n          <IdentifierExpression>callee,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.CALL: { // join call target und wrap the original call around it\r\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\r\n        if (!inner) return null;\r\n        call.expression = inner;\r\n        call.range = tn.range(startPos, tn.pos);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          call.range\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return call;\r\n  }\r\n\r\n  private maybeParseCallExpression(\r\n    tn: Tokenizer,\r\n    expr: Expression\r\n  ): Expression {\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: TypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) break;\r\n        expr = Node.createCallExpression( // is again callable\r\n          expr,\r\n          typeArguments,\r\n          args,\r\n          tn.range(expr.range.start, tn.pos)\r\n        );\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          this.skipBlock(tn);\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET:\r\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\r\n  // of unreachable statements not actually emitted by the compiler. Optimizing\r\n  // StackIR removes these again, but may also suppress useless code emitted by\r\n  // the compiler that's then no longer visible in tests. Both not ideal.\r\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 2; // Target.JS\r\nglobalScope.ASC_NO_ASSERT = false;\r\nglobalScope.ASC_MEMORY_BASE = 0;\r\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\r\nglobalScope.ASC_SHRINK_LEVEL = 0;\r\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\r\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\r\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\r\nglobalScope.ASC_FEATURE_SIMD = false;\r\nglobalScope.ASC_FEATURE_THREADS = false;\r\n\r\nvar F64 = new Float64Array(1);\r\nvar U64 = new Uint32Array(F64.buffer);\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value:  127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value:  32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value:   0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value:     0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value:          0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: false, writable: false },\r\n  \"MAX_VALUE\": { value: true,  writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\r\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\r\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nif (!String.prototype.replaceAll) {\r\n  Object.defineProperty(String.prototype, \"replaceAll\", {\r\n    value: function replaceAll(search, replacment) {\r\n      var res = this.split(search).join(replacment);\r\n      if (!search.length) res = replacment + res + replacment;\r\n      return res;\r\n    }\r\n  });\r\n}\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isNullable\"] = function isNullable(arg) {\r\n  return true;\r\n}\r\n\r\nglobalScope[\"isReference\"] = function isReference(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isFunction\"] = function isFunction(arg) {\r\n  return typeof arg === \"function\";\r\n}\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\r\n  return expr\r\n    && typeof expr === 'object'\r\n    && typeof expr.length === 'number'\r\n    && expr.length >= 0\r\n    && Math.trunc(expr.length) === expr.length;\r\n};\r\n\r\nArray.create = function(capacity) {\r\n  var arr = new Array(capacity);\r\n  arr.length = 0;\r\n  return arr;\r\n};\r\n\r\nglobalScope[\"isDefined\"] = function isDefined(expr) {\r\n  return typeof expr !== \"undefined\";\r\n}\r\n\r\nglobalScope[\"isConstant\"] = function isConstant(expr) {\r\n  return false;\r\n};\r\n\r\nglobalScope[\"unchecked\"] = function unchecked(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\n\r\nObject.defineProperties(globalScope[\"JSMath\"], {\r\n  sincos_sin: { value: 0.0, writable: true },\r\n  sincos_cos: { value: 0.0, writable: true },\r\n  signbit: {\r\n    value: function signbit(x) {\r\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\r\n    }\r\n  },\r\n  sincos: {\r\n    value: function sincos(x) {\r\n      this.sincos_sin = Math.sin(x);\r\n      this.sincos_cos = Math.cos(x);\r\n    }\r\n  }\r\n});\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\r\n      HEAP.fill(value, dest, dest + size);\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    },\r\n    reset: globalScope[\"__memory_reset\"] || function reset() {\r\n      HEAP = new Uint8Array(0);\r\n      HEAP_OFFSET = 0;\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[(ptr | 0) + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[(ptr | 0) + (offset | 0)];\r\n};\r\n\r\nglobalScope[\"unmanaged\"] = function() {};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\r\n  /** Non-trapping float to integer operations. */\r\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  /** Bulk memory operations. */\r\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  /** SIMD types and operations. */\r\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\r\n  /** Threading and atomic operations. */\r\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\r\n  /** Exception handling operations. */\r\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\r\n  /** Tail call operations. */\r\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\r\n  /** Reference types. */\r\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64,\r\n  /** Portable. */\r\n  JS\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\r\n//    3                   2                   1\r\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\r\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\r\n// │                             count                             │\r\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\r\n// │                      Typeinfo#flags [id=0]                    │ id < count\r\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\r\n// │                      Typeinfo#base  [id=0]                    │\r\n// ├───────────────────────────────────────────────────────────────┤\r\n// │                              ...                              │\r\n\r\n/** Runtime type information data structure. */\r\n@unmanaged\r\nexport class Typeinfo {\r\n  /** Flags describing the shape of this class type. */\r\n  flags: TypeinfoFlags;\r\n  /** Base class id or `0` if none. */\r\n  base: u32;\r\n}\r\n\r\n/** Runtime type information flags. */\r\nexport const enum TypeinfoFlags {\r\n  /** No specific flags. */\r\n  NONE = 0,\r\n  /** Type is an `ArrayBufferView`. */\r\n  ARRAYBUFFERVIEW = 1 << 0,\r\n  /** Type is an `Array`. */\r\n  ARRAY = 1 << 1,\r\n  /** Type is a `Set`. */\r\n  SET = 1 << 2,\r\n  /** Type is a `Map`. */\r\n  MAP = 1 << 3,\r\n  /** Type is inherently acyclic. */\r\n  ACYCLIC = 1 << 4,\r\n  /** Value alignment of 1 byte. */\r\n  VALUE_ALIGN_0 = 1 << 5,\r\n  /** Value alignment of 2 bytes. */\r\n  VALUE_ALIGN_1 = 1 << 6,\r\n  /** Value alignment of 4 bytes. */\r\n  VALUE_ALIGN_2 = 1 << 7,\r\n  /** Value alignment of 8 bytes. */\r\n  VALUE_ALIGN_3 = 1 << 8,\r\n  /** Value alignment of 16 bytes. */\r\n  VALUE_ALIGN_4 = 1 << 9,\r\n  /** Value is a signed type. */\r\n  VALUE_SIGNED = 1 << 10,\r\n  /** Value is a float type. */\r\n  VALUE_FLOAT = 1 << 11,\r\n  /** Value type is nullable. */\r\n  VALUE_NULLABLE = 1 << 12,\r\n  /** Value type is managed. */\r\n  VALUE_MANAGED = 1 << 13,\r\n  /** Key alignment of 1 byte. */\r\n  KEY_ALIGN_0 = 1 << 14,\r\n  /** Key alignment of 2 bytes. */\r\n  KEY_ALIGN_1 = 1 << 15,\r\n  /** Key alignment of 4 bytes. */\r\n  KEY_ALIGN_2 = 1 << 16,\r\n  /** Key alignment of 8 bytes. */\r\n  KEY_ALIGN_3 = 1 << 17,\r\n  /** Key alignment of 16 bytes. */\r\n  KEY_ALIGN_4 = 1 << 18,\r\n  /** Key is a signed type. */\r\n  KEY_SIGNED = 1 << 19,\r\n  /** Key is a float type. */\r\n  KEY_FLOAT = 1 << 20,\r\n  /** Key type is nullable. */\r\n  KEY_NULLABLE = 1 << 21,\r\n  /** Key type is managed. */\r\n  KEY_MANAGED = 1 << 22\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport { Target, Feature } from \"./common\";\r\nimport { Compiler, Options } from \"./compiler\";\r\nimport { Decompiler } from \"./decompiler\";\r\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\r\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\r\nimport { Module } from \"./module\";\r\nimport { Parser } from \"./parser\";\r\nimport { Program } from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(\r\n  /** Source text of the file. */\r\n  text: string,\r\n  /** Normalized path of the file. */\r\n  path: string,\r\n  /** Whether this is an entry file. */\r\n  isEntry: bool = false,\r\n  /** Parser reference. */\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the path of the dependee of a given imported file. */\r\nexport function getDependee(parser: Parser, file: string): string | null {\r\n  return parser.getDependee(file);\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `sharedMemory` option. */\r\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\r\n  options.sharedMemory = sharedMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(alias, name);\r\n}\r\n\r\n/** Sets the `explicitStart` option. */\r\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\r\n  options.explicitStart = explicitStart;\r\n}\r\n\r\n/** Sets the `noUnsafe` option. */\r\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\r\n  options.noUnsafe = noUnsafe;\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\r\n/** Non-trapping float to int conversion operations. */\r\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\r\n/** Bulk memory operations. */\r\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\r\n/** SIMD types and operations. */\r\nexport const FEATURE_SIMD = Feature.SIMD;\r\n/** Threading and atomic operations. */\r\nexport const FEATURE_THREADS = Feature.THREADS;\r\n/** Exception handling operations. */\r\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\r\n/** Tail call operations. */\r\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\r\n/** Reference types. */\r\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Disables a specific feature. */\r\nexport function disableFeature(options: Options, feature: Feature): void {\r\n  options.features &= ~feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Obtains the source of the given file. */\r\nexport function getSource(program: Program, internalPath: string): string | null {\r\n  return program.getSource(internalPath);\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Builds a JSON file of a program's runtime type information. */\r\nexport function buildRTTI(program: Program): string {\r\n  var sb = new Array<string>();\r\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    sb.push(\"    \\\"\");\r\n    sb.push(cls.internalName);\r\n    sb.push(\"\\\",\\n\");\r\n  }\r\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    let base = cls.base;\r\n    sb.push(\"    \");\r\n    sb.push(base ? base.id.toString() : \"0\");\r\n    sb.push(\",\\n\");\r\n  }\r\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    sb.push(\"    \");\r\n    sb.push(cls.rttiFlags.toString());\r\n    sb.push(\",\\n\");\r\n  }\r\n  sb.push(\"  ]\\n}\\n\");\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n\r\n// Full API\r\nexport * from \"./ast\";\r\n// export * from \"./binary\";\r\nexport * from \"./common\";\r\nexport * from \"./compiler\";\r\nexport * from \"./decompiler\";\r\nexport * from \"./definitions\";\r\nexport * from \"./diagnosticMessages.generated\";\r\nexport * from \"./diagnostics\";\r\nexport * from \"./flow\";\r\nexport * from \"./module\";\r\nexport * from \"./parser\";\r\nexport * from \"./program\";\r\nexport * from \"./resolver\";\r\nexport * from \"./tokenizer\";\r\nexport * from \"./types\";\r\nexport * from \"./util/index\";\r\n","/** @module util *//***/\r\n\r\n/** Tests if the bit at the specified index is set within a 64-bit map. */\r\nexport function bitsetIs(map: I64, index: i32): bool {\r\n  assert(index >= 0 && index < 64);\r\n  return i64_ne(\r\n    i64_and(\r\n      map,\r\n      i64_shl(\r\n        i64_one,\r\n        i64_new(index)\r\n      )\r\n    ),\r\n    i64_zero\r\n  );\r\n}\r\n\r\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\r\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\r\n  assert(index >= 0 && index < 64);\r\n  return isSet\r\n    ? i64_or(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      )\r\n    : i64_and(\r\n        map,\r\n        i64_not(\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      );\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n  var midVal: u16;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + ((hi - lo) >> 1);\r\n    mid -= (mid & 1);\r\n    midVal = map[mid];\r\n    if (midVal <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < midVal) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\r\n  if (original) {\r\n    let cloned = new Array<V>(original.length);\r\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\r\n    return cloned;\r\n  }\r\n  return new Array<V>();\r\n}\r\n\r\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\r\n  if (original) {\r\n    let cloned = new Set<V>();\r\n    for (let v of original) cloned.add(v);\r\n    return cloned;\r\n  }\r\n  return new Set<V>();\r\n}\r\n\r\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\r\n  var cloned = new Map<K,V>();\r\n  if (original) {\r\n    for (let [k, v] of original) cloned.set(k, v);\r\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\r\n  } else if (overrides) {\r\n    for (let [k, v] of overrides) cloned.set(k, v);\r\n  }\r\n  return cloned;\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nimport {\r\n  PATH_DELIMITER\r\n} from \"../common\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + PATH_DELIMITER + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  if (pos <= 1) {\r\n    if (pos == 0) return \".\";\r\n    if (normalizedPath.charCodeAt(0) == separator) {\r\n      return normalizedPath;\r\n    }\r\n  }\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n"],"sourceRoot":""}