{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__18__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","Array","emitDiagnostic","info","warning","error","__export","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","Node","parent","flags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","endsWith","findDecorator","decorator","OperatorKind","diagnostics_1","types_1","ast_1","module_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","basicClasses","arrayBufferInstance","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","resolver","Resolver","sources","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","has","resolveClass","instance","Duplicate_identifier_0","programLevelInternalName","registerBasicClass","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","resolveFunction","parameterTypes","signatureReference","byteSize","typeKind","className","classElement","globalName","global","Global","withConstantIntegerValue","RESOLVED","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","READONLY","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","externalIdentifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","global_1","CONST","Element","program","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","applyClassTypeArguments","contextualTypeArguments","classTypeParameters","numClassTypeParameters","Function","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","global_2","getGetGlobalName","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","g","e","window","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","i64_shr_u","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","_f","_g","_h","_j","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","_k","_l","_m","_o","fullName","_p","_q","ctor","compileSourceByPath","reportNode","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","initExpr","resolvedType","resolveType","Type_expected","atEnd","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","makeMap","resolveFunctionInclTypeArguments","compileFunction","resultType","compileFunctionBody","compileStatements","An_implementation_cannot_be_declared_in_ambient_contexts","stmts","unshift","classInstance","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","alternativeReportNode","resolveClassInclTypeArguments","compileClass","staticMembers","ctorInstance","_e","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","PREFIX","NONNULL","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","operatorInstance","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","resolveExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","currentElementExpression","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","valueWithCorrectType","tee","thisExpression","currentThisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedGet","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","typeNode","argumentExpression","inferredType","concreteType","resolvedTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileGetter","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","thisLocal","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","compileCallIndirect","typeArgumentNodes","resolveTypeArguments","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","superType","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","resolveElementAccess","retainConstantType","_this_cannot_be_referenced_in_current_location","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","_super_can_only_be_referenced_in_a_derived_class","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","determineIntegerLiteralType","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","i64_is_u32","ensureStaticArray","elementType","byteLength","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Property_0_does_not_exist_on_type_1","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseClass","nativeDummy","propertyAccess","resolvePropertyAccess","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","allocateInstance","fieldType","nativeFieldType","fieldDeclaration","ReportMode","reportMode","REPORT","resolveSignature","numTypeArguments","paramType","instanceKey","placeholderType","Basic_type_0_cannot_be_nullable","Expected_0_type_arguments_but_got_1","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","minParameterCount","maxParameterCount","argumentCount","ensureResolvedLazyGlobal","contextualFunction","targetExpression","propertyName","elementAccess","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_bool","explicitLocal","classInstanceKey","classInstances","instance_1","numFunctionTypeArguments","signatureNode","functionTypeParameters","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","expectedTypeArguments","actualTypeArguments","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","inheritedMember","constructorPartial","baseField","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","overloadPrototype","operatorPartial","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_TARGET","F64","Float64Array","U64","Uint32Array","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","Math","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","signbit","Boolean","HEAP","HEAP_OFFSET","oldHeap","fill","dest","copy","src","copyWithin","F32","Float32Array","I32","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","mod","i64_rem_u","and","or","i64_xor","xor","shl","i64_shr","shr","shru","not","i64_eq","eq","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","SWALLOW","expr_1","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","tempLocal0","evaluateConstantOffset","alignLog2","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","stringType","messageArg","filenameArg","existingIndex","gcPrototype","gcInstance","nativeSizeSize","baseInstance","funcName","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","makeArray","cloned","makeSet","original_1","original_1_1","v","original_2","original_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD"],"mappings":"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AAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__18__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is an arrow function. */\n  ARROW = 1 << 19,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 20,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 21,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 22,\n  /** Is compiled. */\n  COMPILED = 1 << 23,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 24,\n  /** Is scoped. */\n  SCOPED = 1 << 25,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 26,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 27,\n  /** Is the main function. */\n  MAIN = 1 << 28,\n\n  // Other\n\n  QUOTED = 1 << 29\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    defaultType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    elem.defaultType = defaultType; if (defaultType) defaultType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; if (toType) toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: TypeNode,\n    valueType: CommonTypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType; keyType.parent = elem;\n    elem.valueType = valueType; valueType.parent = elem;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: TypeNode;\n  /** Value type. */\n  valueType: CommonTypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeParameterNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low,\n  getGetGlobalName\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents a module-level export. */\nclass ModuleExport {\n  element: Element;\n  identifier: IdentifierExpression;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\n  /** Classes backing basic types like `i32`. */\n  basicClasses: Map<TypeKind,Class> = new Map();\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference, if present. */\n  mainFunction: FunctionPrototype | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.resolver = new Resolver(this);\n    this.sources = [];\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              queuedExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              queuedExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let element = this.elementsLookup.get(name);\n          if (element) this.elementsLookup.set(alias, element);\n          else throw new Error(\"element not found: \" + name);\n        }\n      }\n    }\n\n    // register 'ArrayBuffer'\n    if (this.elementsLookup.has(\"ArrayBuffer\")) {\n      let element = assert(this.elementsLookup.get(\"ArrayBuffer\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n    }\n\n    // register 'Array'\n    if (this.elementsLookup.has(\"Array\")) {\n      let element = assert(this.elementsLookup.get(\"Array\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>element;\n    }\n\n    // register 'String'\n    if (this.elementsLookup.has(\"String\")) {\n      let element = assert(this.elementsLookup.get(\"String\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\n      if (instance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>element).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = instance;\n          this.typesLookup.set(\"string\", instance.type);\n        }\n      }\n    }\n\n    // register classes backing basic types\n    this.registerBasicClass(TypeKind.I8, \"I8\");\n    this.registerBasicClass(TypeKind.I16, \"I16\");\n    this.registerBasicClass(TypeKind.I32, \"I32\");\n    this.registerBasicClass(TypeKind.I64, \"I64\");\n    this.registerBasicClass(TypeKind.ISIZE, \"Isize\");\n    this.registerBasicClass(TypeKind.U8, \"U8\");\n    this.registerBasicClass(TypeKind.U16, \"U16\");\n    this.registerBasicClass(TypeKind.U32, \"U32\");\n    this.registerBasicClass(TypeKind.U64, \"U64\");\n    this.registerBasicClass(TypeKind.USIZE, \"Usize\");\n    this.registerBasicClass(TypeKind.BOOL, \"Bool\");\n    this.registerBasicClass(TypeKind.F32, \"F32\");\n    this.registerBasicClass(TypeKind.F64, \"F64\");\n\n    // register 'start'\n    {\n      let element = assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n\n    // register 'abort' if present\n    if (this.elementsLookup.has(\"abort\")) {\n      let element = <Element>this.elementsLookup.get(\"abort\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      if (instance) this.abortInstance = instance;\n    }\n\n    // register 'memory.allocate' if present\n    if (this.elementsLookup.has(\"memory\")) {\n      let element = <Element>this.elementsLookup.get(\"memory\");\n      let members = element.members;\n      if (members) {\n        if (members.has(\"allocate\")) {\n          element = assert(members.get(\"allocate\"));\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.memoryAllocateInstance = instance;\n        }\n      }\n    }\n\n    // register GC hooks if present\n    if (\n      this.elementsLookup.has(\"__gc_allocate\") &&\n      this.elementsLookup.has(\"__gc_link\") &&\n      this.elementsLookup.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n  }\n\n  private registerBasicClass(typeKind: TypeKind, className: string): void {\n    if (this.elementsLookup.has(className)) {\n      let element = assert(this.elementsLookup.get(className));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.basicClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    var global = new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n      .withConstantIntegerValue(value);\n    global.set(CommonFlags.RESOLVED);\n    this.elementsLookup.set(globalName, global);\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    var global = new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n      .withConstantFloatValue(value);\n    global.set(CommonFlags.RESOLVED);\n    this.elementsLookup.set(globalName, global);\n  }\n\n  /** Tries to locate an import by traversing exports and queued exports. */\n  private tryLocateImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  /** Checks that only supported decorators are present. */\n  private checkDecorators(\n    decorators: DecoratorNode[],\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (flag == DecoratorFlags.BUILTIN) {\n          if (decorator.range.source.isLibrary) {\n            presentFlags |= flag;\n          } else {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          }\n        } else if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Checks and sets up global options of an element. */\n  private checkGlobal(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    // alias globally if explicitly annotated @global or exported from a top-level library file\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n      }\n    }\n    // builtins use the global name directly\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\n      element.internalName = declaration.programLevelInternalName;\n    }\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: {\n          assert(false); // should have been reported while parsing\n          return;\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(false);\n      }\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      }\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobal(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    externalIdentifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = externalIdentifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = externalIdentifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if a top-level export of a library file\n    var source = externalIdentifier.range.source;\n    if (source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          externalIdentifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n\n    // add module level export if a top-level export of an entry file\n    } else if (source.isEntry) {\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\n        element,\n        identifier: externalIdentifier\n      });\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (this.elementsLookup.has(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          <Element>this.elementsLookup.get(referencedName),\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobal(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          if (existingExport.element !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: namespace,\n            identifier: declaration.name\n          });\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.INLINE |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: global,\n            identifier: declaration.name\n          });\n        }\n      }\n      this.checkGlobal(global, declaration);\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this.internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances by class type arguments and function type arguments. */\n  instances: Map<string,Map<string,Function>> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Applies class type arguments to the context of a partially resolved instance method. */\n  applyClassTypeArguments(contextualTypeArguments: Map<string,Type>): void {\n    var classTypeArguments = assert(this.classTypeArguments); // set only if partial\n    var classDeclaration = assert(this.classPrototype).declaration;\n    var classTypeParameters = classDeclaration.typeParameters;\n    var numClassTypeParameters = classTypeParameters.length;\n    assert(numClassTypeParameters == classTypeArguments.length);\n    for (let i = 0; i < numClassTypeParameters; ++i) {\n      contextualTypeArguments.set(\n        classTypeParameters[i].name.text,\n        classTypeArguments[i]\n      );\n    }\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (prototype.internalName != \"NATIVE_CODE\") { // e.g. generated constructor without a real prototype\n      if (!(prototype.is(CommonFlags.AMBIENT))) {\n        let localIndex = 0;\n        if (parent && parent.kind == ElementKind.CLASS) {\n          assert(this.is(CommonFlags.INSTANCE));\n          let local = new Local(\n            prototype.program,\n            \"this\",\n            localIndex++,\n            assert(signature.thisType)\n          );\n          this.localsByName.set(\"this\", local);\n          this.localsByIndex[local.index] = local;\n          let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n          if (inheritedTypeArguments) {\n            if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n            for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n              if (!this.contextualTypeArguments.has(inheritedName)) {\n                this.contextualTypeArguments.set(inheritedName, inheritedType);\n              }\n            }\n          }\n        } else {\n          assert(!this.is(CommonFlags.INSTANCE)); // internal error\n        }\n        let parameterTypes = signature.parameterTypes;\n        for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n          let parameterType = parameterTypes[i];\n          let parameterName = signature.getParameterName(i);\n          let local = new Local(\n            prototype.program,\n            parameterName,\n            localIndex++,\n            parameterType\n            // FIXME: declaration?\n          );\n          this.localsByName.set(parameterName, local);\n          this.localsByIndex[local.index] = local;\n        }\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n  /** This branch always calls super. Constructors only. */\n  CALLS_SUPER = 1 << 6,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 7,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 8,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 9,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 10,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 11,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 12,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 13,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: { // tee\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GetGlobal: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.currentFunction.program.elementsLookup.get(assert(getGetGlobalName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport const enum NativeType {\n  None = 0,        // _BinaryenTypeNone(),\n  I32  = 1,        // _BinaryenTypeInt32(),\n  I64  = 2,        // _BinaryenTypeInt64(),\n  F32  = 3,        // _BinaryenTypeFloat32(),\n  F64  = 4,        // _BinaryenTypeFloat64(),\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\n  Auto = -1        // _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n  // SIMDExtract = _BinaryenSIMDExtractId(),\n  // SIMDReplace = _BinaryenSIMDReplaceId(),\n  // SIMDShuffle = _BinaryenSIMDShuffleId(),\n  // SIMDBitselect = _BinaryenSIMDBitselectId(),\n  // SIMDShift = _BinaryenSIMDShiftId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\n// export enum SIMDOp {\n//   SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n//   SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n//   SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n//   SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n//   SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n//   SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n//   NotVec128 = _BinaryenNotVec128(),\n//   NegVecI8x16 = _BinaryenNegVecI8x16(),\n//   AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n//   AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n//   NegVecI16x8 = _BinaryenNegVecI16x8(),\n//   AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n//   AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n//   NegVecI32x4 = _BinaryenNegVecI32x4(),\n//   AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n//   AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n//   NegVecI64x2 = _BinaryenNegVecI64x2(),\n//   AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n//   AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n//   AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n//   NegVecF32x4 = _BinaryenNegVecF32x4(),\n//   SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n//   AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n//   NegVecF64x2 = _BinaryenNegVecF64x2(),\n//   SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n//   TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n//   TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n//   TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n//   TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n//   ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n//   ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n//   ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n//   ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\n//   EqVecI8x16 = _BinaryenEqVecI8x16(),\n//   NeVecI8x16 = _BinaryenNeVecI8x16(),\n//   LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n//   LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n//   LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n//   LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n//   GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n//   GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n//   GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n//   GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n//   EqVecI16x8 = _BinaryenEqVecI16x8(),\n//   NeVecI16x8 = _BinaryenNeVecI16x8(),\n//   LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n//   LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n//   LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n//   LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n//   GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n//   GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n//   GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n//   GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n//   EqVecI32x4 = _BinaryenEqVecI32x4(),\n//   NeVecI32x4 = _BinaryenNeVecI32x4(),\n//   LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n//   LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n//   LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n//   LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n//   GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n//   GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n//   GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n//   GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n//   EqVecF32x4 = _BinaryenEqVecF32x4(),\n//   NeVecF32x4 = _BinaryenNeVecF32x4(),\n//   LtVecF32x4 = _BinaryenLtVecF32x4(),\n//   LeVecF32x4 = _BinaryenLeVecF32x4(),\n//   GtVecF32x4 = _BinaryenGtVecF32x4(),\n//   GeVecF32x4 = _BinaryenGeVecF32x4(),\n//   EqVecF64x2 = _BinaryenEqVecF64x2(),\n//   NeVecF64x2 = _BinaryenNeVecF64x2(),\n//   LtVecF64x2 = _BinaryenLtVecF64x2(),\n//   LeVecF64x2 = _BinaryenLeVecF64x2(),\n//   GtVecF64x2 = _BinaryenGtVecF64x2(),\n//   GeVecF64x2 = _BinaryenGeVecF64x2(),\n//   AndVec128 = _BinaryenAndVec128(),\n//   OrVec128 = _BinaryenOrVec128(),\n//   XorVec128 = _BinaryenXorVec128(),\n//   AddVecI8x16 = _BinaryenAddVecI8x16(),\n//   AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n//   AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n//   SubVecI8x16 = _BinaryenSubVecI8x16(),\n//   SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n//   SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n//   MulVecI8x16 = _BinaryenMulVecI8x16(),\n//   AddVecI16x8 = _BinaryenAddVecI16x8(),\n//   AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n//   AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n//   SubVecI16x8 = _BinaryenSubVecI16x8(),\n//   SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n//   SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n//   MulVecI16x8 = _BinaryenMulVecI16x8(),\n//   AddVecI32x4 = _BinaryenAddVecI32x4(),\n//   SubVecI32x4 = _BinaryenSubVecI32x4(),\n//   MulVecI32x4 = _BinaryenMulVecI32x4(),\n//   AddVecI64x2 = _BinaryenAddVecI64x2(),\n//   SubVecI64x2 = _BinaryenSubVecI64x2(),\n//   AddVecF32x4 = _BinaryenAddVecF32x4(),\n//   SubVecF32x4 = _BinaryenSubVecF32x4(),\n//   MulVecF32x4 = _BinaryenMulVecF32x4(),\n//   DivVecF32x4 = _BinaryenDivVecF32x4(),\n//   MinVecF32x4 = _BinaryenMinVecF32x4(),\n//   MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n//   AddVecF64x2 = _BinaryenAddVecF64x2(),\n//   SubVecF64x2 = _BinaryenSubVecF64x2(),\n//   MulVecF64x2 = _BinaryenMulVecF64x2(),\n//   DivVecF64x2 = _BinaryenDivVecF64x2(),\n//   MinVecF64x2 = _BinaryenMinVecF64x2(),\n//   MaxVecF64x2 = _BinaryenMaxVecF64x2()\n// }\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = memory.allocate(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetGlobal(this.ref, cStr, type);\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenSetGlobal(this.ref, cStr, value);\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k, shared);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.cachedByValue);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGetGlobalGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nvar cachedStrings = new Map<string | null,usize>();\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  cachedStrings.set(str, ptr);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(program, this);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // add a mutable heap base dummy\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        true,\n        module.createI64(0, 0)\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(0)\n      );\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(\"HEAP_BASE\");\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // set up memory\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addTableExport(\"0\", \"table\");\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let [name, moduleExport] of program.moduleLevelExports) {\n      this.makeModuleExport(name, moduleExport.element);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      }\n    }\n\n    switch (element.kind) {\n\n      // export global\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<Global>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<EnumValue>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n\n      // export function\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n\n      // export getter and setter\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>element).getterPrototype);\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterPrototype;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export a getter and a setter\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // skip prototype and export instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        for (let instances of (<FunctionPrototype>element).instances.values()) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.makeModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        for (let instance of (<ClassPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          let ctor = instance.constructorInstance;\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n\n      // all possible members already handled above\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE: break;\n\n      default: assert(false);\n    }\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n          global.set(CommonFlags.RESOLVED);\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n          global.set(CommonFlags.RESOLVED);\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if resolved lazily\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (declaration !== null && declaration.initializer !== null) {\n      if (!initExpr) {\n        initExpr = this.compileExpression(\n          declaration.initializer,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        let initExpr: ExpressionRef;\n        if (valueDeclaration.value) {\n          initExpr = this.compileExpression(\n            <Expression>valueDeclaration.value,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              initExpr = module.precomputeExpression(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueDeclaration.value.range\n                );\n                initInStart = true;\n              }\n            } else {\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              valueDeclaration.range\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          previousValueIsMut = true;\n        } else {\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[]\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      makeMap<string,Type>(),\n      null,\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type>,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles just the body of a function in whatever is the current context. */\n  private compileFunctionBody(instance: Function): ExpressionRef[] {\n    var declaration = instance.prototype.declaration;\n    var body = assert(declaration.body);\n    if (body.kind == NodeKind.BLOCK) {\n      return this.compileStatements((<BlockStatement>body).statements);\n    } else {\n      assert(body.kind == NodeKind.EXPRESSION);\n      assert(instance.is(CommonFlags.ARROW));\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n      let returnType = instance.signature.returnType;\n      let flow = instance.flow;\n      let stmt = this.compileExpression(\n        (<ExpressionStatement>body).expression,\n        returnType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      flow.set(FlowFlags.RETURNS);\n      if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      return [ stmt ];\n    }\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (body) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let returnType = instance.signature.returnType;\n      let stmts = this.compileFunctionBody(instance);\n      flow.finalize();\n\n      // make the main function call `start` implicitly once\n      if (instance.is(CommonFlags.MAIN)) {\n        module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n        stmts.unshift(\n          module.createIf(\n            module.createUnary(\n              UnaryOp.EqzI32,\n              module.createGetGlobal(\"~started\", NativeType.I32)\n            ),\n            module.createBlock(null, [\n              module.createCall(\"start\", null, NativeType.None),\n              module.createSetGlobal(\"~started\", module.createI32(1))\n            ])\n          )\n        );\n      }\n\n      // make constructors return their instance pointer\n      if (instance.is(CommonFlags.CONSTRUCTOR)) {\n        let nativeSizeType = this.options.nativeSizeType;\n        assert(instance.is(CommonFlags.INSTANCE));\n        let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n        if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\n\n          // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n          if (!flow.is(FlowFlags.ALLOCATES)) {\n            // {\n            //   if (!this) this = <ALLOC>\n            //   this.a = X\n            //   this.b = Y\n            // }\n            stmts.push(\n              module.createIf(\n                module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                  module.createGetLocal(0, nativeSizeType)\n                ),\n                module.createSetLocal(0,\n                  this.makeAllocation(<Class>classInstance)\n                )\n              )\n            );\n            this.makeFieldInitialization(<Class>classInstance, stmts);\n          }\n\n          // implicitly return `this`\n          stmts.push(\n            module.createGetLocal(0, nativeSizeType)\n          );\n        }\n\n        // check that super has been called if this is a derived class\n        if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n          this.error(\n            DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n            instance.prototype.declaration.range\n          );\n        }\n\n      // if this is a normal function, make sure that all branches return\n      } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n        this.error(\n          DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n          declaration.signature.returnType.range\n        );\n      }\n\n      this.currentFunction = previousFunction;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmts.length\n          ? stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType())\n          : module.createNop()\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(\n              <ClassPrototype>element,\n              [],\n              makeMap<string,Type>()\n            );\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              makeMap<string,Type>(),\n              null,\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let element = fileLevelExports.get(\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\n      );\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(\n              <ClassPrototype>element,\n              [],\n              makeMap<string,Type>()\n            );\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              makeMap<string,Type>(),\n              null,\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[]\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      makeMap<string,Type>(),\n      declaration\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type>,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n          wrapMode = WrapMode.NONE;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          this.currentFunction.flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.createUnreachable();\n        return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType, WrapMode.NONE);\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.createUnreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var currentFunction = this.currentFunction;\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.resolver.currentThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            makeMap<string,Type>(this.currentFunction.flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(this.currentFunction.flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n\n      case ElementKind.PROPERTY: {\n        indexArg = this.compileGetter(<Property>target, expression.expression);\n        let type = this.currentType;\n        signature = type.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n\n      case ElementKind.CLASS: {\n\n        // call to `super()`\n        if (expression.expression.kind == NodeKind.SUPER) {\n          if (!currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            this.error(\n              DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n              expression.range\n            );\n            return module.createUnreachable();\n          }\n\n          let classInstance = assert(currentFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = assert((<Class>classInstance).base);\n          let thisLocal = assert(currentFunction.flow.getScopedLocal(\"this\"));\n          let nativeSizeType = this.options.nativeSizeType;\n\n          // {\n          //   this = super(this || <ALLOC>, ...args)\n          //   this.a = X\n          //   this.b = Y\n          // }\n          let stmts: ExpressionRef[] = [\n            module.createSetLocal(thisLocal.index,\n              this.compileCallDirect(\n                this.ensureConstructor(baseClassInstance, expression),\n                expression.arguments,\n                expression,\n                module.createIf(\n                  module.createGetLocal(thisLocal.index, nativeSizeType),\n                  module.createGetLocal(thisLocal.index, nativeSizeType),\n                  this.makeAllocation(<Class>classInstance)\n                )\n              )\n            )\n          ];\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n\n          // check that super had been called before accessing allocating `this`\n          let flow = currentFunction.flow;\n          if (flow.isAny(\n            FlowFlags.ALLOCATES |\n            FlowFlags.CONDITIONALLY_ALLOCATES\n          )) {\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n            return module.createUnreachable();\n          }\n          flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n          this.currentType = Type.void;\n          return module.createBlock(null, stmts);\n        }\n        // otherwise fall-through\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        makeMap<string,Type>(this.currentFunction.flow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let classType = thisType.classReference;\n      let superType = classType\n        ? classType.base\n          ? classType.base.type\n          : null\n        : null;\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) { // reuse this var\n        flow.addScopedLocalAlias(getGetLocalIndex(thisArg), thisType, \"this\");\n        if (superType) flow.addScopedLocalAlias(getGetLocalIndex(thisArg), superType, \"super\");\n      } else { // use a temp var\n        let thisLocal = flow.addScopedLocal(thisType, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n        if (superType) flow.addScopedLocalAlias(thisLocal.index, superType, \"super\");\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return flow.is(FlowFlags.RETURNS)\n      ? module.createBlock(returnLabel, body, returnType.toNativeType())\n      : body.length > 1\n        ? module.createBlock(null, body, returnType.toNativeType())\n        : body.length\n          ? body[0]\n          : module.createNop();\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction, contextualType); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      makeMap<string,Type>(flow.contextualTypeArguments),\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let thisLocal = assert(flow.getScopedLocal(\"this\"));\n          if (thisLocal) {\n            this.currentType = thisLocal.type;\n            return module.createGetLocal(thisLocal.index, thisLocal.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.getScopedLocal(\"this\"));\n          let classInstance = assert(currentFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.createIf(\n                  module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.createGetLocal(thisLocal.index, nativeSizeType)\n                  ),\n                  module.createSetLocal(thisLocal.index,\n                    this.makeAllocation(<Class>classInstance)\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.createGetLocal(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.createBlock(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(currentFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!currentFunction.flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(currentFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      this.currentEnum || currentFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(currentFunction.flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.resolver.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.I64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.U64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.createF32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.createF64(i64_to_f64(intValue));\n          default: return module.createI32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(\"length\"));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(\"byteLength\"));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expr = expressions[i]\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(compiledValues[i]);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      <ClassPrototype>arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var currentFunction = this.currentFunction;\n    var tempLocal = currentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    currentFunction.freeTempLocal(tempLocal); // but can be reused now\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      this.makeAllocation(classReference)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(currentFunction.flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        makeMap<string,Type>(currentFunction.flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var ctorInstance = classInstance.constructorInstance;\n    if (ctorInstance) {\n      this.compileFunction(ctorInstance);\n      return ctorInstance;\n    }\n\n    // use the signature of the parent constructor if a derived class\n    var baseClass = classInstance.base;\n    var signature = baseClass\n      ? this.ensureConstructor(baseClass, reportNode).signature\n      : new Signature(null, classInstance.type, classInstance.type);\n\n    var internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n\n    var nativeDummy = assert(this.program.elementsLookup.get(\"NATIVE_CODE\"));\n    assert(nativeDummy.kind == ElementKind.FUNCTION_PROTOTYPE);\n\n    ctorInstance = new Function(\n      <FunctionPrototype>nativeDummy,\n      internalName,\n      signature,\n      classInstance,\n      null\n    );\n    ctorInstance.set(CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR | CommonFlags.COMPILED);\n    classInstance.constructorInstance = ctorInstance;\n    var previousFunction = this.currentFunction;\n    this.currentFunction = ctorInstance;\n\n    // generate body\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.createIf(\n        module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.createGetLocal(0, nativeSizeType)\n        ),\n        module.createSetLocal(0,\n          this.makeAllocation(classInstance)\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.createGetLocal(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.createGetLocal(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.createSetLocal(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    stmts.push(\n      module.createGetLocal(0, nativeSizeType)\n    );\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef = module.addFunction(ctorInstance.internalName, typeRef, null,\n      stmts.length == 1\n        ? stmts[0]\n        : module.createBlock(null, stmts, nativeSizeType)\n    );\n    ctorInstance.finalize(module, funcRef);\n    this.currentFunction = previousFunction;\n    return ctorInstance;\n  }\n\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    var expr = this.compileCallDirect(\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module),\n      ctor.hasDecorator(DecoratorFlags.INLINE)\n      // FIXME: trying to inline a constructor that doesn't return a custom value doesn't work\n    );\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction, contextualType); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: {// instance property (here: getter)\n        return this.compileGetter(<Property>target, propertyAccess);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).simpleName\n        );\n        return module.createUnreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  private compileGetter(target: Property, reportNode: Node): ExpressionRef {\n    var prototype = target.getterPrototype;\n    if (prototype) {\n      let instance = this.resolver.resolveFunction(prototype, null);\n      if (!instance) return this.module.createUnreachable();\n      let signature = instance.signature;\n      if (!this.checkCallSignature( // reports\n        signature,\n        0,\n        instance.is(CommonFlags.INSTANCE),\n        reportNode\n      )) {\n        return this.module.createUnreachable();\n      }\n      let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n      if (instance.is(CommonFlags.INSTANCE)) {\n        let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, thisExpr, inline);\n      } else {\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, 0, inline);\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        reportNode.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n      );\n      return this.module.createUnreachable();\n    }\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    var currentType = this.currentType;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = currentFunction.getTempLocal(currentType, false);\n      getValue = module.createTeeLocal(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var calcValue: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      return this.compileAssignmentWithValue(expression.operand,\n        calcValue,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      calcValue, // also tees getValue to tempLocal\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    currentFunction.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.createBlock(null, [\n      setValue,\n      module.createGetLocal(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.createBinary(BinaryOp.NeI32,\n            expr,\n            module.createI32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(classInstance: Class): ExpressionRef {\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n\n    // __gc_allocate(size, markFn)\n    if (program.hasGC && classInstance.type.isManaged(program)) {\n      let allocateInstance = assert(program.gcAllocateInstance);\n      if (!this.compileFunction(allocateInstance)) return module.createUnreachable();\n      this.currentType = classInstance.type;\n      return module.createCall(\n        allocateInstance.internalName, [\n          options.isWasm64\n            ? module.createI64(classInstance.currentMemoryOffset)\n            : module.createI32(classInstance.currentMemoryOffset),\n          module.createI32(\n            ensureGCHook(this, classInstance)\n          )\n        ],\n        options.nativeSizeType\n      );\n\n    // memory.allocate(size)\n    } else {\n      let allocateInstance = program.memoryAllocateInstance;\n      if (!allocateInstance || !this.compileFunction(allocateInstance)) return module.createUnreachable();\n      this.currentType = classInstance.type;\n      return module.createCall(\n        allocateInstance.internalName, [\n          options.isWasm64\n            ? module.createI64(classInstance.currentMemoryOffset)\n            : module.createI32(classInstance.currentMemoryOffset)\n        ],\n        options.nativeSizeType\n      );\n    }\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(classInstance: Class, stmts: ExpressionRef[] = []): ExpressionRef[] {\n\n    // must not be used in an inline context as it makes assumptions about local indexes\n    assert(!this.currentFunction.flow.is(FlowFlags.INLINE_CONTEXT));\n\n    if (classInstance.members) {\n      let module = this.module;\n      let nativeSizeType = this.options.nativeSizeType;\n      for (let member of classInstance.members.values()) {\n        if (member.parent != classInstance) continue;\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            stmts.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else {\n            // NOTE: if all fields have initializers then this way is best, but if they don't,\n            // it would be more efficient to categorically zero memory on allocation.\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            stmts.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n    return stmts;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = declaration.programLevelInternalName;\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  FlowFlags,\n\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionTarget,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  DecoratorFlags,\n  FieldPrototype,\n  Field,\n  Global\n} from \"./program\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  PATH_DELIMITER,\n  INSTANCE_DELIMITER,\n  CommonFlags\n} from \"./common\";\n\nimport {\n  makeMap\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signatures specifically\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\n      if (!signature) return null;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\n\n    // check file-global / program-global enum or class\n    {\n      let elementsLookup = this.program.elementsLookup;\n      let element: Element | null;\n      if (\n        (element = elementsLookup.get(localName)) || // file-global\n        (element = elementsLookup.get(globalName))   // program-global\n      ) {\n        switch (element.kind) {\n          case ElementKind.ENUM: {\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_generic,\n                  node.range, element.internalName\n                );\n              }\n              return null;\n            }\n            return Type.i32;\n          }\n          case ElementKind.CLASS_PROTOTYPE: {\n            let instance = this.resolveClassInclTypeArguments(\n              <ClassPrototype>element,\n              typeNode.typeArguments,\n              makeMap<string,Type>(contextualTypeArguments),\n              node\n            ); // reports\n            if (!instance) return null;\n            return node.isNullable ? instance.type.asNullable() : instance.type;\n          }\n        }\n      }\n    }\n\n    // check (global) type alias\n    {\n      let alias = this.program.typeAliases.get(simpleName);\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\n    }\n\n    // resolve parameters\n    var typeArgumentNodes = typeNode.typeArguments;\n    var typeArguments: Type[] | null = null;\n    if (typeArgumentNodes) {\n      let numTypeArguments = typeArgumentNodes.length;\n      typeArguments = new Array<Type>(numTypeArguments);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        let paramType = this.resolveType( // reports\n          typeArgumentNodes[i],\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!paramType) return null;\n        typeArguments[i] = paramType;\n      }\n      if (numTypeArguments) { // can't be a placeholder if it has parameters\n        let instanceKey = typesToString(typeArguments);\n        if (instanceKey.length) {\n          localName += \"<\" + instanceKey + \">\";\n          globalName += \"<\" + instanceKey + \">\";\n        }\n      } else if (contextualTypeArguments) {\n        let placeholderType = contextualTypeArguments.get(globalName);\n        if (placeholderType) return placeholderType;\n      }\n    }\n\n    // check file-global / program-global type\n    {\n      let typesLookup = this.program.typesLookup;\n      let type: Type | null;\n      if (\n        (type = typesLookup.get(localName)) ||\n        (type = typesLookup.get(globalName))\n      ) {\n        if (!type.is(TypeFlags.REFERENCE) && node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // check built-in macro types\n    if (simpleName == \"NATIVE\") {\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n          );\n        }\n        return null;\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: return Type.i32;\n        case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: return Type.u32;\n        case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: return Type.void;\n        default: assert(false);\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type>,\n    alternativeReportNode: Node | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0; i < typeParameters.length; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<TypeNode[]>typeArgumentNodes)[0].range,\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range.atEnd,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<TypeNode[]>typeArgumentNodes)[i],\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    context: Element | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n\n    if (context) {\n\n      switch (context.kind) {\n        case ElementKind.FUNCTION: { // search locals, use prototype\n          element = (<Function>context).flow.getScopedLocal(name);\n          if (element) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n          context = (<Function>context).prototype.parent;\n          break;\n        }\n        case ElementKind.CLASS: { // use prototype\n          context = (<Class>context).prototype.parent;\n          break;\n        }\n      }\n\n      // search context\n      while (context) {\n        let members = context.members;\n        if (members) {\n          if (element = members.get(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n        }\n        context = context.parent;\n      }\n    }\n\n    // search current file\n    var elementsLookup = this.program.elementsLookup;\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = elementsLookup.get(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var resolveType = assert(global.declaration).type;\n    if (!resolveType) return false;\n    var resolvedType = this.resolveType(resolveType, null, reportMode);\n    if (!resolvedType) return false;\n    global.type = resolvedType;\n    global.set(CommonFlags.RESOLVED);\n    return true;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function,\n    contextualType: Type,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, contextualType, reportMode); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let basicClasses = this.program.basicClasses;\n          if (!type.is(TypeFlags.REFERENCE) && basicClasses.has(type.kind)) {\n            classReference = assert(basicClasses.get(type.kind));\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = this.resolveFunction(\n          assert((<Property>target).getterPrototype),\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function,\n    contextualType: Type,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, contextualType, reportMode);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          let returnType = indexedGet.signature.returnType;\n          if (target = returnType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  determineIntegerLiteralType(\n    intValue: I64,\n    contextualType: Type\n  ): Type {\n\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function,\n    contextualType: Type = Type.void,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        if ((<AssertionExpression>expression).assertionKind == AssertionKind.NONNULL) {\n          return this.resolveExpression(\n            (<AssertionExpression>expression).expression,\n            contextualFunction,\n            contextualType,\n            reportMode\n          );\n        }\n        let type = this.resolveType(\n          assert((<AssertionExpression>expression).toType),\n          contextualFunction.flow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element: Element | null = type.classReference;\n        if (!element) {\n          let signature = type.signatureReference;\n          if (!signature) return null;\n          element = signature.asFunctionTarget(this.program);\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n      case NodeKind.UNARYPREFIX: {\n        // TODO: overloads\n        switch ((<UnaryPrefixExpression>expression).operator) {\n          case Token.MINUS: {\n            let operand = (<UnaryPrefixExpression>expression).operand;\n            // implicitly negate if an integer literal to distinguish between i32/u32/i64\n            if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n              let type = this.determineIntegerLiteralType(\n                i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n                contextualType\n              );\n              return assert(this.program.basicClasses.get(type.kind));\n            }\n            return this.resolveExpression(\n              operand,\n              contextualFunction,\n              contextualType,\n              reportMode\n            );\n          }\n          case Token.PLUS:\n          case Token.PLUS_PLUS:\n          case Token.MINUS_MINUS: {\n            return this.resolveExpression(\n              (<UnaryPrefixExpression>expression).operand,\n              contextualFunction,\n              contextualType,\n              reportMode\n            );\n          }\n          case Token.EXCLAMATION: {\n            return assert(this.program.basicClasses.get(TypeKind.BOOL));\n          }\n          case Token.TILDE: {\n            let resolvedOperand = this.resolveExpression(\n              (<UnaryPrefixExpression>expression).operand,\n              contextualFunction,\n              contextualType,\n              reportMode\n            );\n            if (!resolvedOperand) return null;\n            throw new Error(\"not implemented\"); // TODO: should all elements have a corresponding type right away?\n          }\n          default: assert(false);\n        }\n        return null;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        // TODO: overloads\n        switch ((<UnaryPostfixExpression>expression).operator) {\n          case Token.PLUS_PLUS:\n          case Token.MINUS_MINUS: {\n            return this.resolveExpression(\n              (<UnaryPostfixExpression>expression).operand,\n              contextualFunction,\n              contextualType,\n              reportMode\n            );\n          }\n          default: assert(false);\n        }\n        return null;\n      }\n      case NodeKind.BINARY: {\n        // TODO: all sorts of unary and binary expressions, which means looking up overloads and\n        // evaluating their return types, knowing the semantics of different operators etc.\n        // should probably share that code with the compiler somehow, as it also does exactly this.\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.INTEGER: {\n            return assert(\n              this.program.basicClasses.get(\n                this.determineIntegerLiteralType(\n                  (<IntegerLiteralExpression>expression).value,\n                  contextualType\n                ).kind\n              )\n            );\n          }\n          case LiteralKind.FLOAT: {\n            this.currentThisExpression = expression;\n            this.currentElementExpression = null;\n            return assert(\n              this.program.basicClasses.get(\n                contextualType == Type.f32\n                  ? TypeKind.F32\n                  : TypeKind.F64\n              )\n            );\n          }\n          case LiteralKind.STRING: {\n            this.currentThisExpression = expression;\n            this.currentElementExpression = null;\n            return this.program.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction,\n          contextualType,\n          reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction,\n          contextualType,\n          reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction, contextualType, reportMode);\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = this.resolveFunctionInclTypeArguments(\n            <FunctionPrototype>target,\n            (<CallExpression>expression).typeArguments,\n            makeMap<string,Type>(contextualFunction.flow.contextualTypeArguments),\n            expression,\n            reportMode\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.asFunctionTarget(this.program);\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n              targetExpression.range, target.internalName\n            );\n          }\n          return null;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\n  resolveFunction(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var classTypeArguments = prototype.classTypeArguments; // set only if partially resolved\n    var classInstanceKey = classTypeArguments ? typesToString(classTypeArguments) : \"\";\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var classInstances = prototype.instances.get(classInstanceKey);\n    if (classInstances) {\n      let instance = classInstances.get(instanceKey);\n      if (instance) return instance;\n    }\n\n    var declaration = prototype.declaration;\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\n    var classPrototype = prototype.classPrototype;\n\n    // apply class type arguments if a partially resolved instance method\n    if (classTypeArguments) prototype.applyClassTypeArguments(contextualTypeArguments);\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = this.resolveClass(\n        assert(classPrototype),\n        classTypeArguments,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!classInstance) return null;\n      let explicitThisType = signatureNode.explicitThisType;\n      if (explicitThisType) {\n        thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\n        if (!thisType) return null;\n      } else {\n        thisType = classInstance.type;\n      }\n      contextualTypeArguments.set(\"this\", thisType);\n    } else {\n      if (signatureNode.explicitThisType) {\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          signatureNode.explicitThisType.range\n        ); // recoverable\n      }\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = prototype.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      prototype,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    if (!classInstances) prototype.instances.set(classInstanceKey, classInstances = new Map());\n    classInstances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototype partially by applying the specified type arguments. */\n  resolveFunctionPartially(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): FunctionPrototype | null {\n    assert(prototype.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(prototype.classPrototype);\n\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\n\n    var simpleName = prototype.simpleName;\n    var partialKey = typesToString(typeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      prototype.declaration,\n      classPrototype,\n      prototype.decoratorFlags\n    );\n    partialPrototype.flags = prototype.flags;\n    partialPrototype.operatorKind = prototype.operatorKind;\n    partialPrototype.classTypeArguments = typeArguments;\n    partialPrototype.instances = prototype.instances;\n    return partialPrototype;\n  }\n\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    prototype: FunctionPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type>,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // apply class type arguments if a partially resolved instance method\n      // FIXME: this is done once more in resolveFunction. required here for resolveTypeArguments,\n      // required there for just resolving a function no matter if a partial or not.\n      let classTypeArguments = prototype.classTypeArguments;\n      if (classTypeArguments) prototype.applyClassTypeArguments(contextualTypeArguments);\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    prototype: ClassPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    var declaration = prototype.declaration;\n    if (typeArguments) {\n      let typeParameters = declaration.typeParameters;\n      let expectedTypeArguments = typeParameters.length;\n      let actualTypeArguments = typeArguments.length;\n      assert(actualTypeArguments == expectedTypeArguments);\n      for (let i = 0; i < actualTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else {\n      assert(declaration.typeParameters.length == 0);\n    }\n\n    // Resolve base class if applicable\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.resolveType(\n        declaration.extendsType,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            declaration.extendsType.range\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            declaration.extendsType.range, baseClass.internalName\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(declaration.name.range, declaration.extendsType.range)\n          );\n        }\n        return null;\n      }\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var simpleName = prototype.simpleName;\n    var internalName = prototype.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve constructor by first applying the class type arguments\n    var constructorPrototype = prototype.constructorPrototype;\n    if (constructorPrototype) {\n      let constructorPartial = this.resolveFunctionPartially(\n        constructorPrototype,\n        typeArguments,\n        reportMode\n      );\n      if (!constructorPartial) return null;\n      instance.constructorInstance = this.resolveFunction(\n        constructorPartial,\n        null,\n        makeMap<string,Type>(),\n        reportMode\n      );\n    }\n\n    // Resolve instance members\n    if (prototype.instanceMembers) {\n      for (let member of prototype.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            if (!instance.members) instance.members = new Map();\n            else if (instance.members.has(member.simpleName)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                fieldDeclaration.name.range,\n                member.simpleName\n              );\n              break;\n            }\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields\n            if (!fieldDeclaration.type) {\n              if (baseClass !== null && baseClass.members !== null) {\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\n                  assert(baseField.kind == ElementKind.FIELD);\n                  fieldType = (<Field>baseField).type;\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldDeclaration.name.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldDeclaration.type,\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = this.resolveFunctionPartially(\n              <FunctionPrototype>member,\n              typeArguments,\n              reportMode\n            );\n            if (!partialPrototype) return null;\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n            instance.members.set(member.simpleName, partialPrototype);\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              prototype\n            );\n            let partialGetterPrototype = this.resolveFunctionPartially(\n              getterPrototype,\n              typeArguments,\n              reportMode\n            );\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = this.resolveFunctionPartially(\n                setterPrototype,\n                typeArguments,\n                reportMode\n              );\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = this.resolveFunctionPartially(\n          overloadPrototype,\n          typeArguments,\n          reportMode\n        );\n        if (!operatorPartial) continue;\n        operatorInstance = this.resolveFunction(\n          operatorPartial,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    prototype: ClassPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type>,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\n      // FIXME: doesn't honor the actual externally visible name\n      this.visitElement(moduleExport.element);\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instances of element.instances.values()) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instances of (<FunctionPrototype>member).instances.values()) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable,\n  IndexSignatureDeclaration\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          // TODO: this works for now, but the representation isn't great\n          identifier = Node.createIdentifierExpression(\n            identifier.text + \".\" + tn.readIdentifier(),\n            tn.range(identifier.range.start, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      let defaultType: TypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[]): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.TYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.set(CommonFlags.QUOTED);\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.is(CommonFlags.QUOTED)) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitStackIR();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__18__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\nglobalScope[\"JSMath\"].signbit = function signbit(x) {\n  F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n}\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags,\n  Global,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isDefined\": { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFunction,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.createI32(element ? 1 : 0);\n    }\n    case \"isConstant\": { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case \"isManaged\": { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let currentFunction = compiler.currentFunction;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = currentFunction.getTempLocal(Type.i32, false);\n          let tempLocalIndex2 = currentFunction.getAndFreeTempLocal(Type.i32, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          ret = module.createBinary(BinaryOp.XorI32,\n            module.createBinary(BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I32)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I32)\n          );\n\n          currentFunction.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let currentFunction = compiler.currentFunction;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = currentFunction.getTempLocal(options.usizeType, false);\n          let tempLocalIndex2 = currentFunction.getAndFreeTempLocal(options.usizeType, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          ret = module.createBinary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.createBinary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  wasm64 ? module.createI64(63) : module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.createGetLocal(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          currentFunction.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let currentFunction = compiler.currentFunction;\n\n          let tempLocal1 = currentFunction.getTempLocal(Type.i64, false);\n          let tempLocalIndex2 = currentFunction.getAndFreeTempLocal(Type.i64, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          ret = module.createBinary(BinaryOp.XorI64,\n            module.createBinary(BinaryOp.AddI64,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI64,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI64(63)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I64)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I64)\n          );\n\n          currentFunction.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"memory.size\": { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n    case \"instantiate\": {\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classInstance = typeArguments[0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\n    }\n\n    // user-defined diagnostic macros\n\n    case \"ERROR\": {\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case \"WARNING\": {\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case \"INFO\": {\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n\n    // gc\n\n    case \"iterateRoots\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      compiler.currentType = Type.void;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\");\n  if (!stringType) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCall(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if requires. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n\n  for (let element of compiler.program.elementsLookup.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            \"iv\"\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            \"iv\"\n          )\n        );\n      }\n    }\n  }\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for internals)\n  var members = classInstance.members;\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(\"<placeholder>\");\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  var funcName = classInstance.internalName + \"~gc\";\n  module.addFunction(\n    funcName,\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  functionTable[gcHookIndex] = funcName;\n  return gcHookIndex;\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null): Map<K,V> {\n  if (original) {\n    let cloned = new Map<K,V>();\n    for (let [k, v] of original) cloned.set(k, v);\n    return cloned;\n  }\n  return new Map<K,V>();\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n"],"sourceRoot":""}