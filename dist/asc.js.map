{"version":3,"sources":["webpack://asc/webpack/universalModuleDefinition","webpack://asc/webpack/bootstrap","webpack://asc/../node_modules/node-libs-browser/mock/process.js","webpack://asc/../node_modules/path-browserify/index.js","webpack://asc/../node_modules/webpack/buildin/global.js","webpack://asc/./asc.js","webpack://asc/../node_modules/@protobufjs/utf8/index.js","webpack://asc/./util/colors.js","webpack://asc/./util/options.js","webpack://asc/external \"assemblyscript\"","webpack://asc/. sync","webpack://asc/../node_modules/browser-process-hrtime/index.js"],"names":["root","factory","exports","module","require","e","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__9__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","nextTick","fn","setTimeout","platform","arch","execPath","title","pid","browser","env","argv","binding","Error","path","cwd","chdir","dir","resolve","exit","kill","umask","dlopen","uptime","memoryUsage","uvCounters","features","process","normalizeArray","parts","allowAboveRoot","up","length","last","splice","unshift","splitPathRe","splitPath","filename","exec","slice","filter","xs","f","res","push","resolvedPath","resolvedAbsolute","arguments","TypeError","charAt","split","join","normalize","isAbsolute","trailingSlash","substr","paths","Array","index","relative","from","to","trim","arr","start","end","fromParts","toParts","Math","min","samePartsLength","outputParts","concat","sep","delimiter","dirname","result","basename","ext","extname","str","len","g","Function","eval","window","global","fs","utf8","colorsUtil","optionsUtil","EOL","removeAllListeners","assemblyscript","isDev","code","register","project","e_ts","stack","isBundle","version","options","sourceMapRoot","libraryPrefix","LIBRARY_PREFIX","defaultOptimizeLevel","defaultShrinkLevel","libraryFiles","allocator/arena","allocator/buddy","allocator/emscripten","allocator/system","allocator/tlsf","array","arraybuffer","builtins","collector/itcm","diagnostics","error","gc","internal/allocator","internal/array","internal/arraybuffer","internal/hash","internal/itoa","internal/memory","internal/string","internal/typedarray","iterator","map","math","memory","polyfills","regexp","set","string","symbol","table","typedarray","libDir","bundled","sync","forEach","file","replace","readFileSync","definitionFiles","assembly","portable","stdDir","compileString","sources","input.ts","output","stdout","createMemoryStream","stderr","binary","text","keys","val","isArray","String","main","readFile","writeFile","contents","listFiles","callback","readFileNode","writeFileNode","listFilesNode","stats","createStats","opts","parse","args","noColors","supported","unknown","arg","write","yellow","trailing","err","red","help","out","color","white","cyan","baseDir","transforms","transform","parser","noLib","libPath","indexOf","parseCount","parseTime","measure","parseFile","customLibDirs","lib","apply","k","libFiles","endsWith","j","libText","sourcePath","sourceText","nextFile","startsWith","plainName","substring","indexName","checkDiagnostics","applyTransform","program","finishParsing","optimizeLevel","shrinkLevel","optimize","max","compilerOptions","createOptions","setTarget","setNoTreeShaking","noTreeShaking","setNoAssert","noAssert","setImportMemory","importMemory","setImportTable","importTable","setMemoryBase","memoryBase","setSourceMap","sourceMap","setOptimizeLevelHints","setGlobalAlias","use","aliases","part","alias","enable","flag","toUpperCase","enableFeature","compileCount","compileTime","compileProgram","dispose","validate","validateCount","validateTime","trapMode","optimizeCount","optimizeTime","runPasses","setOptimizeLevel","setShrinkLevel","setDebugInfo","noDebug","pass","noEmit","hasStdout","hasOutput","outFile","test","textFile","asmjsFile","binaryFile","wasm","sourceMapURL","emitCount","emitTime","toBinary","writeStdout","JSON","sourceRoot","stdName","sourceContents","stringify","asm","toAsmjs","idlFile","idl","buildIDL","tsdFile","tsd","buildTSD","wat","toText","printStats","readCount","readTime","encoding","writeCount","writeTime","writeFileSync","files","readdirSync","used","argumentSubstitutions","-O","-Os","-Oz","-O0","-O0s","-O0z","-O1","-O1s","-O1z","-O2","-O2s","-O2z","-O3","-O3s","-O3z","emitter","diagnostic","hasErrors","nextDiagnostic","formatDiagnostic","isTTY","isError","hrtime","times","formatTime","time","toFixed","format","count","allocBuffer","Buffer","allocUnsafe","Uint8Array","stream","chunk","buffer","reset","toBuffer","offset","toString","read","tscOptions","alwaysStrict","noImplicitAny","noImplicitReturns","noImplicitThis","noEmitOnError","strictNullChecks","experimentalDecorators","target","types","allowJs","charCodeAt","fromCharCode","c1","c2","proc","isCI","base","colors","gray","GRAY","RESET","RED","green","GREEN","YELLOW","blue","BLUE","magenta","MAGENTA","CYAN","WHITE","config","option","default","match","type","parseInt","parseFloat","indent","padding","eol","sb","description","line","webpackEmptyContext","req","id","previousTimestamp","clocktime","performanceNow","performance","seconds","floor","nanoseconds","now","mozNow","msNow","oNow","webkitNow","Date","getTime"],"mappings":"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","file":"asc.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory((function webpackLoadOptionalExternalModule() { try { return require(\"assemblyscript\"); } catch(e) {} }()));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"assemblyscript\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"asc\"] = factory((function webpackLoadOptionalExternalModule() { try { return require(\"assemblyscript\"); } catch(e) {} }()));\n\telse\n\t\troot[\"asc\"] = factory(root[\"assemblyscript\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__9__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","exports.nextTick = function nextTick(fn) {\n\tsetTimeout(fn, 0);\n};\n\nexports.platform = exports.arch = \nexports.execPath = exports.title = 'browser';\nexports.pid = 1;\nexports.browser = true;\nexports.env = {};\nexports.argv = [];\n\nexports.binding = function (name) {\n\tthrow new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    exports.cwd = function () { return cwd };\n    exports.chdir = function (dir) {\n        if (!path) path = require('path');\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\nexports.exit = exports.kill = \nexports.umask = exports.dlopen = \nexports.uptime = exports.memoryUsage = \nexports.uvCounters = function() {};\nexports.features = {};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * Compiler frontend for node.js\r\n *\r\n * Uses the low-level API exported from src/index.ts so it works with the compiler compiled to\r\n * JavaScript as well as the compiler compiled to WebAssembly (eventually). Runs the sources\r\n * directly through ts-node if distribution files are not present (indicated by a `-dev` version).\r\n *\r\n * Can also be packaged as a bundle suitable for in-browser use with the standard library injected\r\n * in the build step. See dist/asc.js for the bundle and webpack.config.js for building details.\r\n *\r\n * @module cli/asc\r\n */\r\n\r\n// Use \".\" instead of \"/\" as cwd in browsers\r\nif (process.browser) process.cwd = function() { return \".\"; };\r\n\r\nconst fs = require(\"fs\");\r\nconst path = require(\"path\");\r\nconst utf8 = require(\"@protobufjs/utf8\");\r\nconst colorsUtil = require(\"./util/colors\");\r\nconst optionsUtil = require(\"./util/options\");\r\nconst EOL = process.platform === \"win32\" ? \"\\r\\n\" : \"\\n\";\r\n\r\n// Emscripten adds an `uncaughtException` listener to Binaryen that results in an additional\r\n// useless code fragment on top of an actual error. suppress this:\r\nif (process.removeAllListeners) process.removeAllListeners(\"uncaughtException\");\r\n\r\n// Use distribution files if present, otherwise run the sources directly\r\nvar assemblyscript, isDev = false;\r\n(() => {\r\n  try { // `asc` on the command line\r\n    assemblyscript = require(\"../dist/assemblyscript.js\");\r\n  } catch (e) {\r\n    try { // `asc` on the command line without dist files\r\n      require(\"ts-node\").register({ project: path.join(__dirname, \"..\", \"src\", \"tsconfig.json\") });\r\n      require(\"../src/glue/js\");\r\n      assemblyscript = require(\"../src\");\r\n      isDev = true;\r\n    } catch (e_ts) {\r\n      try { // `require(\"dist/asc.js\")` in explicit browser tests\r\n        assemblyscript = eval(\"require('./assemblyscript')\");\r\n      } catch (e) {\r\n        // combine both errors that lead us here\r\n        e.stack = e_ts.stack + \"\\n---\\n\" + e.stack;\r\n        throw e;\r\n      }\r\n    }\r\n  }\r\n})();\r\n\r\n/** Whether this is a webpack bundle or not. */\r\nexports.isBundle = typeof BUNDLE_VERSION === \"string\";\r\n\r\n/** Whether asc runs the sources directly or not. */\r\nexports.isDev = isDev;\r\n\r\n/** AssemblyScript version. */\r\nexports.version = exports.isBundle ? BUNDLE_VERSION : require(\"../package.json\").version;\r\n\r\n/** Available CLI options. */\r\nexports.options = require(\"./asc.json\");\r\n\r\n/** Common root used in source maps. */\r\nexports.sourceMapRoot = \"assemblyscript:///\";\r\n\r\n/** Prefix used for library files. */\r\nexports.libraryPrefix = assemblyscript.LIBRARY_PREFIX;\r\n\r\n/** Default Binaryen optimization level. */\r\nexports.defaultOptimizeLevel = 2;\r\n\r\n/** Default Binaryen shrink level. */\r\nexports.defaultShrinkLevel = 1;\r\n\r\n/** Bundled library files. */\r\nexports.libraryFiles = exports.isBundle ? BUNDLE_LIBRARY : (() => { // set up if not a bundle\r\n  const libDir = path.join(__dirname, \"..\", \"std\", \"assembly\");\r\n  const libFiles = require(\"glob\").sync(\"**/!(*.d).ts\", { cwd: libDir });\r\n  const bundled = {};\r\n  libFiles.forEach(file => bundled[file.replace(/\\.ts$/, \"\")] = fs.readFileSync(path.join(libDir, file), \"utf8\" ));\r\n  return bundled;\r\n})();\r\n\r\n/** Bundled definition files. */\r\nexports.definitionFiles = exports.isBundle ? BUNDLE_DEFINITIONS : (() => { // set up if not a bundle\r\n  const stdDir = path.join(__dirname, \"..\", \"std\");\r\n  return {\r\n    \"assembly\": fs.readFileSync(path.join(stdDir, \"assembly\", \"index.d.ts\"), \"utf8\"),\r\n    \"portable\": fs.readFileSync(path.join(stdDir, \"portable\", \"index.d.ts\"), \"utf8\")\r\n  };\r\n})();\r\n\r\n/** Convenience function that parses and compiles source strings directly. */\r\nexports.compileString = (sources, options) => {\r\n  if (typeof sources === \"string\") sources = { \"input.ts\": sources };\r\n  const output = Object.create({\r\n    stdout: createMemoryStream(),\r\n    stderr: createMemoryStream(),\r\n    binary: null,\r\n    text: null\r\n  });\r\n  var argv = [\r\n    \"--binaryFile\", \"binary\",\r\n    \"--textFile\", \"text\",\r\n  ];\r\n  Object.keys(options || {}).forEach(key => {\r\n    var val = options[key];\r\n    if (Array.isArray(val)) val.forEach(val => argv.push(\"--\" + key, String(val)));\r\n    else argv.push(\"--\" + key, String(val));\r\n  });\r\n  exports.main(argv.concat(Object.keys(sources)), {\r\n    stdout: output.stdout,\r\n    stderr: output.stderr,\r\n    readFile: name => sources.hasOwnProperty(name) ? sources[name] : null,\r\n    writeFile: (name, contents) => output[name] = contents,\r\n    listFiles: () => []\r\n  });\r\n  return output;\r\n}\r\n\r\n/** Runs the command line utility using the specified arguments array. */\r\nexports.main = function main(argv, options, callback) {\r\n  if (typeof options === \"function\") {\r\n    callback = options;\r\n    options = {};\r\n  } else if (!options) {\r\n    options = {};\r\n  }\r\n\r\n  const stdout = options.stdout || process.stdout;\r\n  const stderr = options.stderr || process.stderr;\r\n  const readFile = options.readFile || readFileNode;\r\n  const writeFile = options.writeFile || writeFileNode;\r\n  const listFiles = options.listFiles || listFilesNode;\r\n  const stats = options.stats || createStats();\r\n\r\n  // Output must be specified if not present in the environment\r\n  if (!stdout) throw Error(\"'options.stdout' must be specified\");\r\n  if (!stderr) throw Error(\"'options.stderr' must be specified\");\r\n\r\n  const opts = optionsUtil.parse(argv, exports.options);\r\n  const args = opts.options;\r\n  argv = opts.arguments;\r\n  if (args.noColors) {\r\n    colorsUtil.stdout.supported =\r\n    colorsUtil.stderr.supported = false;\r\n  } else {\r\n    colorsUtil.stdout = colorsUtil.from(stdout);\r\n    colorsUtil.stderr = colorsUtil.from(stderr);\r\n  }\r\n\r\n  // Check for unknown arguments\r\n  if (opts.unknown.length) {\r\n    opts.unknown.forEach(arg => {\r\n      stderr.write(colorsUtil.stderr.yellow(\"WARN: \") + \"Unknown option '\" + arg + \"'\" + EOL);\r\n    });\r\n  }\r\n\r\n  // Check for trailing arguments\r\n  if (opts.trailing.length) {\r\n    stderr.write(colorsUtil.stderr.yellow(\"WARN: \") + \"Unsupported trailing arguments: \" + opts.trailing.join(\" \") + EOL);\r\n  }\r\n\r\n  // Use default callback if none is provided\r\n  if (!callback) callback = function defaultCallback(err) {\r\n    var code = 0;\r\n    if (err) {\r\n      stderr.write(colorsUtil.stderr.red(\"ERROR: \") + err.stack.replace(/^ERROR: /i, \"\") + EOL);\r\n      code = 1;\r\n    }\r\n    return code;\r\n  };\r\n\r\n  // Just print the version if requested\r\n  if (args.version) {\r\n    stdout.write(\"Version \" + exports.version + (isDev ? \"-dev\" : \"\") + EOL);\r\n    return callback(null);\r\n  }\r\n  // Print the help message if requested or no source files are provided\r\n  if (args.help || !argv.length) {\r\n    var out = args.help ? stdout : stderr;\r\n    var color = args.help ? colorsUtil.stdout : colorsUtil.stderr;\r\n    out.write([\r\n      color.white(\"SYNTAX\"),\r\n      \"  \" + color.cyan(\"asc\") + \" [entryFile ...] [options]\",\r\n      \"\",\r\n      color.white(\"EXAMPLES\"),\r\n      \"  \" + color.cyan(\"asc\") + \" hello.ts\",\r\n      \"  \" + color.cyan(\"asc\") + \" hello.ts -b hello.wasm -t hello.wat\",\r\n      \"  \" + color.cyan(\"asc\") + \" hello1.ts hello2.ts -b -O > hello.wasm\",\r\n      \"\",\r\n      color.white(\"OPTIONS\"),\r\n    ].concat(\r\n      optionsUtil.help(exports.options, 24, EOL)\r\n    ).join(EOL) + EOL);\r\n    return callback(null);\r\n  }\r\n\r\n  // I/O must be specified if not present in the environment\r\n  if (!fs.readFileSync) {\r\n    if (readFile === readFileNode) throw Error(\"'options.readFile' must be specified\");\r\n    if (writeFile === writeFileNode) throw Error(\"'options.writeFile' must be specified\");\r\n    if (listFiles === listFilesNode) throw Error(\"'options.listFiles' must be specified\");\r\n  }\r\n\r\n  // Set up base directory\r\n  const baseDir = args.baseDir ? path.resolve(args.baseDir) : \".\";\r\n\r\n  // Set up transforms\r\n  const transforms = [];\r\n  if (args.transform) {\r\n    args.transform.forEach(transform =>\r\n      transforms.push(\r\n        require(\r\n          path.isAbsolute(transform = transform.trim())\r\n            ? transform\r\n            : path.join(process.cwd(), transform)\r\n        )\r\n      )\r\n    );\r\n  }\r\n  function applyTransform(name, ...args) {\r\n    transforms.forEach(transform => {\r\n      if (typeof transform[name] === \"function\") transform[name](...args);\r\n    });\r\n  }\r\n\r\n  // Begin parsing\r\n  var parser = null;\r\n\r\n  // Include library files\r\n  if (!args.noLib) { // bundled\r\n    Object.keys(exports.libraryFiles).forEach(libPath => {\r\n      if (libPath.indexOf(\"/\") >= 0) return; // in sub-directory: imported on demand\r\n      stats.parseCount++;\r\n      stats.parseTime += measure(() => {\r\n        parser = assemblyscript.parseFile(\r\n          exports.libraryFiles[libPath],\r\n          exports.libraryPrefix + libPath + \".ts\",\r\n          false,\r\n          parser\r\n        );\r\n      });\r\n    });\r\n  }\r\n  const customLibDirs = [];\r\n  if (args.lib) {\r\n    let lib = args.lib;\r\n    if (typeof lib === \"string\") lib = lib.split(\",\");\r\n    Array.prototype.push.apply(customLibDirs, lib.map(lib => lib.trim()));\r\n    for (let i = 0, k = customLibDirs.length; i < k; ++i) { // custom\r\n      let libDir = customLibDirs[i];\r\n      let libFiles;\r\n      if (libDir.endsWith(\".ts\")) {\r\n        libFiles = [ path.basename(libDir) ];\r\n        libDir = path.dirname(libDir);\r\n      } else {\r\n        libFiles = listFiles(libDir);\r\n      }\r\n      for (let j = 0, l = libFiles.length; j < l; ++j) {\r\n        let libPath = libFiles[j];\r\n        let libText = readFile(path.join(libDir, libPath));\r\n        if (libText === null) return callback(Error(\"Library file '\" + libPath + \"' not found.\"));\r\n        stats.parseCount++;\r\n        stats.parseTime += measure(() => {\r\n          parser = assemblyscript.parseFile(\r\n            libText,\r\n            exports.libraryPrefix + libPath,\r\n            false,\r\n            parser\r\n          );\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Include entry files\r\n  for (let i = 0, k = argv.length; i < k; ++i) {\r\n    const filename = argv[i];\r\n\r\n    let sourcePath = String(filename).replace(/\\\\/g, \"/\").replace(/(\\.ts|\\/)$/, \"\");\r\n\r\n    // Try entryPath.ts, then entryPath/index.ts\r\n    let sourceText = readFile(path.join(baseDir, sourcePath) + \".ts\");\r\n    if (sourceText === null) {\r\n      sourceText = readFile(path.join(baseDir, sourcePath, \"index.ts\"));\r\n      if (sourceText === null) {\r\n        return callback(Error(\"Entry file '\" + sourcePath + \".ts' not found.\"));\r\n      } else {\r\n        sourcePath += \"/index.ts\";\r\n      }\r\n    } else {\r\n      sourcePath += \".ts\";\r\n    }\r\n\r\n    stats.parseCount++;\r\n    stats.parseTime += measure(() => {\r\n      parser = assemblyscript.parseFile(sourceText, sourcePath, true, parser);\r\n    });\r\n\r\n    // Process backlog\r\n    while ((sourcePath = parser.nextFile()) != null) {\r\n      let found = false;\r\n\r\n      // Load library file if explicitly requested\r\n      if (sourcePath.startsWith(exports.libraryPrefix)) {\r\n        const plainName = sourcePath.substring(exports.libraryPrefix.length);\r\n        const indexName = sourcePath.substring(exports.libraryPrefix.length) + \"/index\";\r\n        if (exports.libraryFiles.hasOwnProperty(plainName)) {\r\n          sourceText = exports.libraryFiles[plainName];\r\n          sourcePath = exports.libraryPrefix + plainName + \".ts\";\r\n        } else if (exports.libraryFiles.hasOwnProperty(indexName)) {\r\n          sourceText = exports.libraryFiles[indexName];\r\n          sourcePath = exports.libraryPrefix + indexName + \".ts\";\r\n        } else {\r\n          for (let i = 0, k = customLibDirs.length; i < k; ++i) {\r\n            const dir = customLibDirs[i];\r\n            sourceText = readFile(path.join(dir, plainName + \".ts\"));\r\n            if (sourceText !== null) {\r\n              sourcePath = exports.libraryPrefix + plainName + \".ts\";\r\n              break;\r\n            } else {\r\n              sourceText = readFile(path.join(dir, indexName + \".ts\"));\r\n              if (sourceText !== null) {\r\n                sourcePath = exports.libraryPrefix + indexName + \".ts\";\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n      // Otherwise try nextFile.ts, nextFile/index.ts, ~lib/nextFile.ts, ~lib/nextFile/index.ts\r\n      } else {\r\n        const plainName = sourcePath;\r\n        const indexName = sourcePath + \"/index\";\r\n        sourceText = readFile(path.join(baseDir, plainName + \".ts\"));\r\n        if (sourceText !== null) {\r\n          sourcePath = plainName + \".ts\";\r\n        } else {\r\n          sourceText = readFile(path.join(baseDir, indexName + \".ts\"));\r\n          if (sourceText !== null) {\r\n            sourcePath = indexName + \".ts\";\r\n          } else if (!plainName.startsWith(\".\")) {\r\n            if (exports.libraryFiles.hasOwnProperty(plainName)) {\r\n              sourceText = exports.libraryFiles[plainName];\r\n              sourcePath = exports.libraryPrefix + plainName + \".ts\";\r\n            } else if (exports.libraryFiles.hasOwnProperty(indexName)) {\r\n              sourceText = exports.libraryFiles[indexName];\r\n              sourcePath = exports.libraryPrefix + indexName + \".ts\";\r\n            } else {\r\n              for (let i = 0, k = customLibDirs.length; i < k; ++i) {\r\n                const dir = customLibDirs[i];\r\n                sourceText = readFile(path.join(dir, plainName + \".ts\"));\r\n                if (sourceText !== null) {\r\n                  sourcePath = exports.libraryPrefix + plainName + \".ts\";\r\n                  break;\r\n                } else {\r\n                  sourceText = readFile(path.join(dir, indexName + \".ts\"));\r\n                  if (sourceText !== null) {\r\n                    sourcePath = exports.libraryPrefix + indexName + \".ts\";\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (sourceText == null) {\r\n        return callback(Error(\"Import file '\" + sourcePath + \".ts' not found.\"));\r\n      }\r\n      stats.parseCount++;\r\n      stats.parseTime += measure(() => {\r\n        assemblyscript.parseFile(sourceText, sourcePath, false, parser);\r\n      });\r\n    }\r\n    if (checkDiagnostics(parser, stderr)) {\r\n      return callback(Error(\"Parse error\"));\r\n    }\r\n  }\r\n\r\n  applyTransform(\"afterParse\", parser);\r\n\r\n  // Finish parsing\r\n  const program = assemblyscript.finishParsing(parser);\r\n\r\n  // Set up optimization levels\r\n  var optimizeLevel = 0;\r\n  var shrinkLevel = 0;\r\n  if (args.optimize) {\r\n    optimizeLevel = exports.defaultOptimizeLevel;\r\n    shrinkLevel = exports.defaultShrinkLevel;\r\n  }\r\n  if (typeof args.optimizeLevel === \"number\") {\r\n    optimizeLevel = args.optimizeLevel;\r\n  }\r\n  if (typeof args.shrinkLevel === \"number\") {\r\n    shrinkLevel = args.shrinkLevel;\r\n  }\r\n  optimizeLevel = Math.min(Math.max(optimizeLevel, 0), 3);\r\n  shrinkLevel = Math.min(Math.max(shrinkLevel, 0), 2);\r\n\r\n  // Begin compilation\r\n  const compilerOptions = assemblyscript.createOptions();\r\n  assemblyscript.setTarget(compilerOptions, 0);\r\n  assemblyscript.setNoTreeShaking(compilerOptions, args.noTreeShaking);\r\n  assemblyscript.setNoAssert(compilerOptions, args.noAssert);\r\n  assemblyscript.setImportMemory(compilerOptions, args.importMemory);\r\n  assemblyscript.setImportTable(compilerOptions, args.importTable);\r\n  assemblyscript.setMemoryBase(compilerOptions, args.memoryBase >>> 0);\r\n  assemblyscript.setSourceMap(compilerOptions, args.sourceMap != null);\r\n  assemblyscript.setOptimizeLevelHints(compilerOptions, optimizeLevel, shrinkLevel);\r\n\r\n  if (!args.noLib) {\r\n    // Initialize default aliases\r\n    assemblyscript.setGlobalAlias(compilerOptions, \"Math\", \"NativeMath\");\r\n    assemblyscript.setGlobalAlias(compilerOptions, \"Mathf\", \"NativeMathf\");\r\n    assemblyscript.setGlobalAlias(compilerOptions, \"abort\", \"~lib/env/abort\");\r\n    assemblyscript.setGlobalAlias(compilerOptions, \"trace\", \"~lib/env/trace\");\r\n  }\r\n\r\n  // Add or override aliases if specified\r\n  if (args.use) {\r\n    let aliases = args.use;\r\n    for (let i = 0, k = aliases.length; i < k; ++i) {\r\n      let part = aliases[i];\r\n      let p = part.indexOf(\"=\");\r\n      if (p < 0) return callback(Error(\"Global alias '\" + part + \"' is invalid.\"));\r\n      let name = part.substring(0, p).trim();\r\n      let alias = part.substring(p + 1).trim();\r\n      if (!name.length) return callback(Error(\"Global alias '\" + part + \"' is invalid.\"));\r\n      assemblyscript.setGlobalAlias(compilerOptions, name, alias);\r\n    }\r\n  }\r\n\r\n  // Enable additional features if specified\r\n  var features = args.enable;\r\n  if (features != null) {\r\n    if (typeof features === \"string\") features = features.split(\",\");\r\n    for (let i = 0, k = features.length; i < k; ++i) {\r\n      let name = features[i].trim();\r\n      let flag = assemblyscript[\"FEATURE_\" + name.replace(/\\-/g, \"_\").toUpperCase()];\r\n      if (!flag) return callback(Error(\"Feature '\" + name + \"' is unknown.\"));\r\n      assemblyscript.enableFeature(compilerOptions, flag);\r\n    }\r\n  }\r\n\r\n  var module;\r\n  stats.compileCount++;\r\n  (() => {\r\n    try {\r\n      stats.compileTime += measure(() => {\r\n        module = assemblyscript.compileProgram(program, compilerOptions);\r\n      });\r\n    } catch (e) {\r\n      return callback(e);\r\n    }\r\n  })();\r\n  if (checkDiagnostics(parser, stderr)) {\r\n    if (module) module.dispose();\r\n    return callback(Error(\"Compile error\"));\r\n  }\r\n\r\n  // Validate the module if requested\r\n  if (args.validate) {\r\n    stats.validateCount++;\r\n    stats.validateTime += measure(() => {\r\n      if (!module.validate()) {\r\n        module.dispose();\r\n        return callback(Error(\"Validate error\"));\r\n      }\r\n    });\r\n  }\r\n\r\n  // Set Binaryen-specific options\r\n  if (args.trapMode === \"clamp\") {\r\n    stats.optimizeCount++;\r\n    stats.optimizeTime += measure(() => {\r\n      module.runPasses([ \"trap-mode-clamp\" ]);\r\n    });\r\n  } else if (args.trapMode === \"js\") {\r\n    stats.optimizeCount++;\r\n    stats.optimizeTime += measure(() => {\r\n      module.runPasses([ \"trap-mode-js\" ]);\r\n    });\r\n  } else if (args.trapMode !== \"allow\") {\r\n    module.dispose();\r\n    return callback(Error(\"Unsupported trap mode\"));\r\n  }\r\n\r\n  // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\r\n  // see: https://github.com/WebAssembly/binaryen/pull/1596\r\n  if (optimizeLevel >= 3 || shrinkLevel >= 2) optimizeLevel = 4;\r\n\r\n  module.setOptimizeLevel(optimizeLevel);\r\n  module.setShrinkLevel(shrinkLevel);\r\n  module.setDebugInfo(!args.noDebug);\r\n\r\n  var runPasses = [];\r\n  if (args.runPasses) {\r\n    if (typeof args.runPasses === \"string\") {\r\n      args.runPasses = args.runPasses.split(\",\");\r\n    }\r\n    if (args.runPasses.length) {\r\n      args.runPasses.forEach(pass => {\r\n        if (runPasses.indexOf(pass) < 0)\r\n          runPasses.push(pass);\r\n      });\r\n    }\r\n  }\r\n\r\n  // Optimize the module if requested\r\n  if (optimizeLevel > 0 || shrinkLevel > 0) {\r\n    stats.optimizeCount++;\r\n    stats.optimizeTime += measure(() => {\r\n      module.optimize();\r\n    });\r\n  }\r\n\r\n  // Run additional passes if requested\r\n  if (runPasses.length) {\r\n    stats.optimizeCount++;\r\n    stats.optimizeTime += measure(() => {\r\n      module.runPasses(runPasses.map(pass => pass.trim()));\r\n    });\r\n  }\r\n\r\n  // Prepare output\r\n  if (!args.noEmit) {\r\n    let hasStdout = false;\r\n    let hasOutput = false;\r\n\r\n    if (args.outFile != null) {\r\n      if (/\\.was?t$/.test(args.outFile) && args.textFile == null) {\r\n        args.textFile = args.outFile;\r\n      } else if (/\\.js$/.test(args.outFile) && args.asmjsFile == null) {\r\n        args.asmjsFile = args.outFile;\r\n      } else if (args.binaryFile == null) {\r\n        args.binaryFile = args.outFile;\r\n      }\r\n    }\r\n\r\n    // Write binary\r\n    if (args.binaryFile != null) {\r\n      let sourceMapURL = args.sourceMap != null\r\n        ? args.sourceMap.length\r\n          ? args.sourceMap\r\n          : path.basename(args.binaryFile) + \".map\"\r\n        : null;\r\n\r\n      let wasm;\r\n      stats.emitCount++;\r\n      stats.emitTime += measure(() => {\r\n        wasm = module.toBinary(sourceMapURL)\r\n      });\r\n\r\n      if (args.binaryFile.length) {\r\n        writeFile(path.join(baseDir, args.binaryFile), wasm.output);\r\n      } else {\r\n        writeStdout(wasm.output);\r\n        hasStdout = true;\r\n      }\r\n      hasOutput = true;\r\n\r\n      // Post-process source map\r\n      if (wasm.sourceMap != null) {\r\n        if (args.binaryFile.length) {\r\n          let sourceMap = JSON.parse(wasm.sourceMap);\r\n          sourceMap.sourceRoot = exports.sourceMapRoot;\r\n          sourceMap.sources.forEach((name, index) => {\r\n            let text = null;\r\n            if (name.startsWith(exports.libraryPrefix)) {\r\n              let stdName = name.substring(exports.libraryPrefix.length).replace(/\\.ts$/, \"\");\r\n              if (exports.libraryFiles.hasOwnProperty(stdName)) {\r\n                text = exports.libraryFiles[stdName];\r\n              } else {\r\n                for (let i = 0, k = customLibDirs.length; i < k; ++i) {\r\n                  text = readFile(path.join(\r\n                    customLibDirs[i],\r\n                    name.substring(exports.libraryPrefix.length))\r\n                  );\r\n                  if (text !== null) break;\r\n                }\r\n              }\r\n            } else {\r\n              text = readFile(path.join(baseDir, name));\r\n            }\r\n            if (text === null) {\r\n              return callback(Error(\"Source file '\" + name + \"' not found.\"));\r\n            }\r\n            if (!sourceMap.sourceContents) sourceMap.sourceContents = [];\r\n            sourceMap.sourceContents[index] = text;\r\n          });\r\n          writeFile(path.join(\r\n            baseDir,\r\n            path.dirname(args.binaryFile),\r\n            path.basename(sourceMapURL)\r\n          ), JSON.stringify(sourceMap));\r\n        } else {\r\n          stderr.write(\"Skipped source map (stdout already occupied)\" + EOL);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Write asm.js\r\n    if (args.asmjsFile != null) {\r\n      let asm;\r\n      if (args.asmjsFile.length) {\r\n        stats.emitCount++;\r\n        stats.emitTime += measure(() => {\r\n          asm = module.toAsmjs();\r\n        });\r\n        writeFile(path.join(baseDir, args.asmjsFile), asm);\r\n      } else if (!hasStdout) {\r\n        stats.emitCount++;\r\n        stats.emitTime += measure(() => {\r\n          asm = module.toAsmjs();\r\n        });\r\n        writeStdout(asm);\r\n        hasStdout = true;\r\n      }\r\n      hasOutput = true;\r\n    }\r\n\r\n    // Write WebIDL\r\n    if (args.idlFile != null) {\r\n      let idl;\r\n      if (args.idlFile.length) {\r\n        stats.emitCount++;\r\n        stats.emitTime += measure(() => {\r\n          idl = assemblyscript.buildIDL(program);\r\n        });\r\n        writeFile(path.join(baseDir, args.idlFile), idl);\r\n      } else if (!hasStdout) {\r\n        stats.emitCount++;\r\n        stats.emitTime += measure(() => {\r\n          idl = assemblyscript.buildIDL(program);\r\n        });\r\n        writeStdout(idl);\r\n        hasStdout = true;\r\n      }\r\n      hasOutput = true;\r\n    }\r\n\r\n    // Write TypeScript definition\r\n    if (args.tsdFile != null) {\r\n      let tsd;\r\n      if (args.tsdFile.length) {\r\n        stats.emitCount++;\r\n        stats.emitTime += measure(() => {\r\n          tsd = assemblyscript.buildTSD(program);\r\n        });\r\n        writeFile(path.join(baseDir, args.tsdFile), tsd);\r\n      } else if (!hasStdout) {\r\n        stats.emitCount++;\r\n        stats.emitTime += measure(() => {\r\n          tsd = assemblyscript.buildTSD(program);\r\n        });\r\n        writeStdout(tsd);\r\n        hasStdout = true;\r\n      }\r\n      hasOutput = true;\r\n    }\r\n\r\n    // Write text (must be last)\r\n    if (args.textFile != null || !hasOutput) {\r\n      let wat;\r\n      if (args.textFile && args.textFile.length) {\r\n        stats.emitCount++;\r\n        stats.emitTime += measure(() => {\r\n          wat = module.toText();\r\n        });\r\n        writeFile(path.join(baseDir, args.textFile), wat);\r\n      } else if (!hasStdout) {\r\n        stats.emitCount++;\r\n        stats.emitTime += measure(() => {\r\n          wat = module.toText()\r\n        });\r\n        writeStdout(wat);\r\n      }\r\n    }\r\n  }\r\n\r\n  module.dispose();\r\n  if (args.measure) {\r\n    printStats(stats, stderr);\r\n  }\r\n  return callback(null);\r\n\r\n  function readFileNode(filename) {\r\n    try {\r\n      let text;\r\n      stats.readCount++;\r\n      stats.readTime += measure(() => {\r\n        text = fs.readFileSync(filename, { encoding: \"utf8\" });\r\n      });\r\n      return text;\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  function writeFileNode(filename, contents) {\r\n    try {\r\n      stats.writeCount++;\r\n      stats.writeTime += measure(() => {\r\n        if (typeof contents === \"string\") {\r\n          fs.writeFileSync(filename, contents, { encoding: \"utf8\" } );\r\n        } else {\r\n          fs.writeFileSync(filename, contents);\r\n        }\r\n      });\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function listFilesNode(dirname) {\r\n    var files;\r\n    try {\r\n      stats.readTime += measure(() => {\r\n        files = fs.readdirSync(dirname).filter(file => /^(?!.*\\.d\\.ts$).*\\.ts$/.test(file));\r\n      });\r\n      return files;\r\n    } catch (e) {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  function writeStdout(contents) {\r\n    if (!writeStdout.used) {\r\n      stats.writeCount++;\r\n      writeStdout.used = true;\r\n    }\r\n    stats.writeTime += measure(() => {\r\n      if (typeof contents === \"string\") {\r\n        stdout.write(contents, { encoding: \"utf8\" });\r\n      } else {\r\n        stdout.write(contents);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nvar argumentSubstitutions = {\r\n  \"-O\"  : [ \"--optimize\" ],\r\n  \"-Os\" : [ \"--optimize\", \"--shrinkLevel\", \"1\" ],\r\n  \"-Oz\" : [ \"--optimize\", \"--shrinkLevel\", \"2\" ],\r\n  \"-O0\" : [ \"--optimizeLevel\", \"0\", \"--shrinkLevel\", \"0\" ],\r\n  \"-O0s\": [ \"--optimizeLevel\", \"0\", \"--shrinkLevel\", \"1\" ],\r\n  \"-O0z\": [ \"--optimizeLevel\", \"0\", \"--shrinkLevel\", \"2\" ],\r\n  \"-O1\" : [ \"--optimizeLevel\", \"1\", \"--shrinkLevel\", \"0\" ],\r\n  \"-O1s\": [ \"--optimizeLevel\", \"1\", \"--shrinkLevel\", \"1\" ],\r\n  \"-O1z\": [ \"--optimizeLevel\", \"1\", \"--shrinkLevel\", \"2\" ],\r\n  \"-O2\" : [ \"--optimizeLevel\", \"2\", \"--shrinkLevel\", \"0\" ],\r\n  \"-O2s\": [ \"--optimizeLevel\", \"2\", \"--shrinkLevel\", \"1\" ],\r\n  \"-O2z\": [ \"--optimizeLevel\", \"2\", \"--shrinkLevel\", \"2\" ],\r\n  \"-O3\" : [ \"--optimizeLevel\", \"3\", \"--shrinkLevel\", \"0\" ],\r\n  \"-O3s\": [ \"--optimizeLevel\", \"3\", \"--shrinkLevel\", \"1\" ],\r\n  \"-O3z\": [ \"--optimizeLevel\", \"3\", \"--shrinkLevel\", \"2\" ],\r\n};\r\n\r\n/** Checks diagnostics emitted so far for errors. */\r\nfunction checkDiagnostics(emitter, stderr) {\r\n  var diagnostic;\r\n  var hasErrors = false;\r\n  while ((diagnostic = assemblyscript.nextDiagnostic(emitter)) != null) {\r\n    if (stderr) {\r\n      stderr.write(\r\n        assemblyscript.formatDiagnostic(diagnostic, stderr.isTTY, true) +\r\n        EOL + EOL\r\n      );\r\n    }\r\n    if (assemblyscript.isError(diagnostic)) hasErrors = true;\r\n  }\r\n  return hasErrors;\r\n}\r\n\r\nexports.checkDiagnostics = checkDiagnostics;\r\n\r\n/** Creates an empty set of stats. */\r\nfunction createStats() {\r\n  return {\r\n    readTime: 0,\r\n    readCount: 0,\r\n    writeTime: 0,\r\n    writeCount: 0,\r\n    parseTime: 0,\r\n    parseCount: 0,\r\n    compileTime: 0,\r\n    compileCount: 0,\r\n    emitTime: 0,\r\n    emitCount: 0,\r\n    validateTime: 0,\r\n    validateCount: 0,\r\n    optimizeTime: 0,\r\n    optimizeCount: 0\r\n  };\r\n}\r\n\r\nexports.createStats = createStats;\r\n\r\nif (!process.hrtime) process.hrtime = require(\"browser-process-hrtime\");\r\n\r\n/** Measures the execution time of the specified function.  */\r\nfunction measure(fn) {\r\n  const start = process.hrtime();\r\n  fn();\r\n  const times = process.hrtime(start);\r\n  return times[0] * 1e9 + times[1];\r\n}\r\n\r\nexports.measure = measure;\r\n\r\n/** Formats a high resolution time to a human readable string. */\r\nfunction formatTime(time) {\r\n  return time ? (time / 1e6).toFixed(3) + \" ms\" : \"N/A\";\r\n}\r\n\r\nexports.formatTime = formatTime;\r\n\r\n/** Formats and prints out the contents of a set of stats. */\r\nfunction printStats(stats, output) {\r\n  function format(time, count) {\r\n    return formatTime(time);\r\n  }\r\n  (output || process.stdout).write([\r\n    \"I/O Read  : \" + format(stats.readTime, stats.readCount),\r\n    \"I/O Write : \" + format(stats.writeTime, stats.writeCount),\r\n    \"Parse     : \" + format(stats.parseTime, stats.parseCount),\r\n    \"Compile   : \" + format(stats.compileTime, stats.compileCount),\r\n    \"Emit      : \" + format(stats.emitTime, stats.emitCount),\r\n    \"Validate  : \" + format(stats.validateTime, stats.validateCount),\r\n    \"Optimize  : \" + format(stats.optimizeTime, stats.optimizeCount)\r\n  ].join(EOL) + EOL);\r\n}\r\n\r\nexports.printStats = printStats;\r\n\r\nvar allocBuffer = typeof global !== \"undefined\" && global.Buffer\r\n  ? global.Buffer.allocUnsafe || function(len) { return new global.Buffer(len); }\r\n  : function(len) { return new Uint8Array(len) };\r\n\r\n/** Creates a memory stream that can be used in place of stdout/stderr. */\r\nfunction createMemoryStream(fn) {\r\n  var stream = [];\r\n  stream.write = function(chunk) {\r\n    if (fn) fn(chunk);\r\n    if (typeof chunk === \"string\") {\r\n      let buffer = allocBuffer(utf8.length(chunk));\r\n      utf8.write(chunk, buffer, 0);\r\n      chunk = buffer;\r\n    }\r\n    this.push(chunk);\r\n  };\r\n  stream.reset = function() {\r\n    stream.length = 0;\r\n  };\r\n  stream.toBuffer = function() {\r\n    var offset = 0, i = 0, k = this.length;\r\n    while (i < k) offset += this[i++].length;\r\n    var buffer = allocBuffer(offset);\r\n    offset = i = 0;\r\n    while (i < k) {\r\n      buffer.set(this[i], offset);\r\n      offset += this[i].length;\r\n      ++i;\r\n    }\r\n    return buffer;\r\n  };\r\n  stream.toString = function() {\r\n    var buffer = this.toBuffer();\r\n    return utf8.read(buffer, 0, buffer.length);\r\n  };\r\n  return stream;\r\n}\r\n\r\nexports.createMemoryStream = createMemoryStream;\r\n\r\n/** Compatible TypeScript compiler options for syntax highlighting etc. */\r\nexports.tscOptions = {\r\n  alwaysStrict: true,\r\n  noImplicitAny: true,\r\n  noImplicitReturns: true,\r\n  noImplicitThis: true,\r\n  noEmitOnError: true,\r\n  strictNullChecks: true,\r\n  experimentalDecorators: true,\r\n  target: \"esnext\",\r\n  module: \"commonjs\",\r\n  noLib: true,\r\n  types: [],\r\n  allowJs: false\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","var proc = typeof process !== \"undefined\" && process || {};\r\nvar isCI = proc.env && \"CI\" in proc.env; // doesn't work when bundled because 'process' is a mock\r\n\r\nfunction from(stream, base) {\r\n  var colors = base || {};\r\n  colors.supported = (stream && !!stream.isTTY) || isCI;\r\n  colors.gray = text => colors.supported ? exports.GRAY + text + exports.RESET : text;\r\n  colors.red = text => colors.supported ? exports.RED + text + exports.RESET : text;\r\n  colors.green = text => colors.supported ? exports.GREEN + text + exports.RESET : text;\r\n  colors.yellow = text => colors.supported ? exports.YELLOW + text + exports.RESET : text;\r\n  colors.blue = text => colors.supported ? exports.BLUE + text + exports.RESET : text;\r\n  colors.magenta = text => colors.supported ? exports.MAGENTA + text + exports.RESET : text;\r\n  colors.cyan = text => colors.supported ? exports.CYAN + text + exports.RESET : text;\r\n  colors.white = text => colors.supported ? exports.WHITE + text + exports.RESET : text;\r\n  return colors;\r\n}\r\n\r\nexports.stdout = from(proc.stdout, exports);\r\nexports.stderr = from(proc.stderr);\r\nexports.from = from;\r\n\r\nexports.GRAY = \"\\u001b[90m\";\r\nexports.RED = \"\\u001b[91m\";\r\nexports.GREEN = \"\\u001b[92m\";\r\nexports.YELLOW = \"\\u001b[93m\";\r\nexports.BLUE = \"\\u001b[94m\";\r\nexports.MAGENTA = \"\\u001b[95m\";\r\nexports.CYAN = \"\\u001b[96m\";\r\nexports.WHITE = \"\\u001b[97m\";\r\nexports.RESET = \"\\u001b[0m\";\r\n","// type | meaning\r\n// -----|---------------\r\n// b    | boolean\r\n// i    | integer\r\n// f    | float\r\n// s    | string\r\n// I    | integer array\r\n// F    | float array\r\n// S    | string array\r\n\r\n/** Parses the specified command line arguments according to the given configuration. */\r\nfunction parse(argv, config) {\r\n  var options = {};\r\n  var unknown = [];\r\n  var arguments = [];\r\n  var trailing = [];\r\n\r\n  // make an alias map and initialize defaults\r\n  var aliases = {};\r\n  Object.keys(config).forEach(key => {\r\n    var option = config[key];\r\n    if (option.alias != null) {\r\n      if (typeof option.alias === \"string\") aliases[option.alias] = key;\r\n      else if (Array.isArray(option.alias)) option.alias.forEach(alias => aliases[alias] = key);\r\n    }\r\n    if (option.default != null) options[key] = option.default;\r\n  });\r\n\r\n  // iterate over argv\r\n  for (var i = 0, k = (argv = argv.slice()).length; i < k; ++i) {\r\n    let arg = argv[i];\r\n    if (arg == \"--\") { ++i; break; }\r\n    let match = /^(?:(\\-\\w)(?:=(.*))?|(\\-\\-\\w{2,})(?:=(.*))?)$/.exec(arg), option, key;\r\n    if (match) {\r\n      if (config[arg]) option = config[key = arg]; // exact\r\n      else if (match[1] != null) { // alias\r\n        option = config[key = aliases[match[1].substring(1)]];\r\n        if (option && match[2] != null) argv[i--] = match[2];\r\n      } else if (match[3] != null) { // full\r\n        option = config[key = match[3].substring(2)];\r\n        if (option && match[4] != null) argv[i--] = match[4];\r\n      }\r\n    } else {\r\n      if (arg.charCodeAt(0) == 45) option = config[key = arg]; // exact\r\n      else { arguments.push(arg); continue; } // argument\r\n    }\r\n    if (option) {\r\n      if (option.type == null || option.type === \"b\") options[key] = true; // flag\r\n      else {\r\n        if (i + 1 < argv.length && argv[i + 1].charCodeAt(0) != 45) { // present\r\n          switch (option.type) {\r\n            case \"i\": options[key] = parseInt(argv[++i], 10); break;\r\n            case \"I\": options[key] = (options[key] || []).concat(parseInt(argv[++i], 10)); break;\r\n            case \"f\": options[key] = parseFloat(argv[++i]); break;\r\n            case \"F\": options[key] = (options[key] || []).concat(parseFloat(argv[++i])); break;\r\n            case \"s\": options[key] = String(argv[++i]); break;\r\n            case \"S\": options[key] = (options[key] || []).concat(argv[++i].split(\",\")); break;\r\n            default: unknown.push(arg); --i;\r\n          }\r\n        } else { // omitted\r\n          switch (option.type) {\r\n            case \"i\":\r\n            case \"f\": options[key] = option.default || 0; break;\r\n            case \"s\": options[key] = option.default || \"\"; break;\r\n            case \"I\":\r\n            case \"F\":\r\n            case \"S\": options[key] = options.default || []; break;\r\n            default: unknown.push(arg);\r\n          }\r\n        }\r\n      }\r\n      if (option.value) Object.keys(option.value).forEach(k => options[k] = option.value[k]);\r\n    } else unknown.push(arg);\r\n  }\r\n  while (i < k) trailing.push(argv[i++]); // trailing\r\n\r\n  return { options, unknown, arguments, trailing };\r\n}\r\n\r\nexports.parse = parse;\r\n\r\n/** Generates the help text for the specified configuration. */\r\nfunction help(config, options) {\r\n  if (!options) options = {};\r\n  var indent = options.indent || 2;\r\n  var padding = options.padding || 24;\r\n  var eol = options.eol || \"\\n\";\r\n  var sb = [];\r\n  Object.keys(config).forEach(key => {\r\n    var option = config[key];\r\n    if (option.description == null) return;\r\n    var text = \"\";\r\n    while (text.length < indent) text += \" \";\r\n    text += \"--\" + key;\r\n    if (option.alias) text += \", -\" + option.alias;\r\n    while (text.length < padding) text += \" \";\r\n    if (Array.isArray(option.description)) {\r\n      sb.push(text + option.description[0] + option.description.slice(1).map(line => {\r\n        for (let i = 0; i < padding; ++i) line = \" \" + line;\r\n        return eol + line;\r\n      }).join(\"\"));\r\n    } else sb.push(text + option.description);\r\n  });\r\n  return sb.join(eol);\r\n}\r\n\r\nexports.help = help;\r\n","if(typeof __WEBPACK_EXTERNAL_MODULE__9__ === 'undefined') {var e = new Error(\"Cannot find module 'assemblyscript'\"); e.code = 'MODULE_NOT_FOUND'; throw e;}\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__9__;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 11;","module.exports = process.hrtime || hrtime\n\n// polyfil for window.performance.now\nvar performance = global.performance || {}\nvar performanceNow =\n  performance.now        ||\n  performance.mozNow     ||\n  performance.msNow      ||\n  performance.oNow       ||\n  performance.webkitNow  ||\n  function(){ return (new Date()).getTime() }\n\n// generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\nfunction hrtime(previousTimestamp){\n  var clocktime = performanceNow.call(performance)*1e-3\n  var seconds = Math.floor(clocktime)\n  var nanoseconds = Math.floor((clocktime%1)*1e9)\n  if (previousTimestamp) {\n    seconds = seconds - previousTimestamp[0]\n    nanoseconds = nanoseconds - previousTimestamp[1]\n    if (nanoseconds<0) {\n      seconds--\n      nanoseconds += 1e9\n    }\n  }\n  return [seconds,nanoseconds]\n}"],"sourceRoot":""}