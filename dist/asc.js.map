{"version":3,"sources":["webpack://asc/webpack/universalModuleDefinition","webpack://asc/webpack/bootstrap","webpack://asc/../node_modules/node-libs-browser/mock/process.js","webpack://asc/../node_modules/path-browserify/index.js","webpack://asc/../node_modules/webpack/buildin/global.js","webpack://asc/./asc.js","webpack://asc/../node_modules/@protobufjs/utf8/index.js","webpack://asc/./util/colors.js","webpack://asc/./util/options.js","webpack://asc/./util/mkdirp.js","webpack://asc/external \"assemblyscript\"","webpack://asc/. sync","webpack://asc/../node_modules/browser-process-hrtime/index.js"],"names":["root","factory","exports","module","require","e","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__10__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","nextTick","fn","setTimeout","platform","arch","execPath","title","pid","browser","env","argv","binding","Error","path","cwd","chdir","dir","resolve","exit","kill","umask","dlopen","uptime","memoryUsage","uvCounters","features","process","normalizeArray","parts","allowAboveRoot","up","length","last","splice","unshift","splitPathRe","splitPath","filename","exec","slice","filter","xs","f","res","push","resolvedPath","resolvedAbsolute","arguments","TypeError","charAt","split","join","normalize","isAbsolute","trailingSlash","substr","paths","Array","index","relative","from","to","trim","arr","start","end","fromParts","toParts","Math","min","samePartsLength","outputParts","concat","sep","delimiter","dirname","result","basename","ext","extname","str","len","g","Function","eval","window","global","fs","utf8","colorsUtil","optionsUtil","mkdirp","EOL","removeAllListeners","assemblyscript","isDev","code","register","project","e_ts","stack","isBundle","version","options","sourceMapRoot","libraryPrefix","LIBRARY_PREFIX","defaultOptimizeLevel","defaultShrinkLevel","libraryFiles","allocator/arena","allocator/buddy","allocator/emscripten","allocator/system","allocator/tlsf","array","arraybuffer","builtins","collector/itcm","diagnostics","error","gc","internal/allocator","internal/array","internal/arraybuffer","internal/hash","internal/itoa","internal/memory","internal/string","internal/typedarray","iterator","map","math","memory","polyfills","regexp","set","string","symbol","table","typedarray","libDir","bundled","sync","forEach","file","replace","readFileSync","definitionFiles","assembly","portable","stdDir","compileString","sources","input.ts","output","stdout","createMemoryStream","stderr","binary","text","keys","val","isArray","String","main","readFile","writeFile","contents","listFiles","callback","readFileNode","writeFileNode","listFilesNode","stats","createStats","opts","parse","args","noColors","supported","unknown","arg","write","yellow","trailing","err","red","help","out","color","white","cyan","baseDir","transforms","transform","parser","noLib","libPath","indexOf","parseCount","parseTime","measure","parseFile","customLibDirs","lib","apply","k","libFiles","endsWith","j","libText","sourcePath","sourceText","nextFile","startsWith","plainName","substring","indexName","checkDiagnostics","applyTransform","program","finishParsing","optimizeLevel","shrinkLevel","optimize","max","compilerOptions","createOptions","setTarget","setNoTreeShaking","noTreeShaking","setNoAssert","noAssert","setImportMemory","importMemory","setImportTable","importTable","setMemoryBase","memoryBase","setSourceMap","sourceMap","setOptimizeLevelHints","setGlobalAlias","use","aliases","part","alias","enable","flag","toUpperCase","enableFeature","compileCount","compileTime","compileProgram","dispose","validate","validateCount","validateTime","trapMode","optimizeCount","optimizeTime","runPasses","setOptimizeLevel","setShrinkLevel","setDebugInfo","noDebug","pass","noEmit","hasStdout","hasOutput","outFile","test","textFile","asmjsFile","binaryFile","wasm","sourceMapURL","emitCount","emitTime","toBinary","writeStdout","JSON","sourceRoot","stdName","sourceContents","stringify","asm","toAsmjs","idlFile","idl","buildIDL","tsdFile","tsd","buildTSD","wat","toText","printStats","readCount","readTime","encoding","writeCount","writeTime","writeFileSync","files","readdirSync","used","argumentSubstitutions","-O","-Os","-Oz","-O0","-O0s","-O0z","-O1","-O1s","-O1z","-O2","-O2s","-O2z","-O3","-O3s","-O3z","emitter","diagnostic","hasErrors","nextDiagnostic","formatDiagnostic","isTTY","isError","hrtime","times","formatTime","time","toFixed","format","count","allocBuffer","Buffer","allocUnsafe","Uint8Array","stream","chunk","buffer","reset","toBuffer","offset","toString","read","tscOptions","alwaysStrict","noImplicitAny","noImplicitReturns","noImplicitThis","noEmitOnError","strictNullChecks","experimentalDecorators","target","types","allowJs","charCodeAt","fromCharCode","c1","c2","proc","isCI","base","colors","gray","GRAY","RESET","RED","green","GREEN","YELLOW","blue","BLUE","magenta","MAGENTA","CYAN","WHITE","config","option","default","match","type","parseInt","parseFloat","indent","padding","eol","sb","description","line","_0777","made","undefined","mkdirSync","err0","stat","statSync","err1","isDirectory","webpackEmptyContext","req","id","previousTimestamp","clocktime","performanceNow","performance","seconds","floor","nanoseconds","now","mozNow","msNow","oNow","webkitNow","Date","getTime"],"mappings":"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","file":"asc.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory((function webpackLoadOptionalExternalModule() { try { return require(\"assemblyscript\"); } catch(e) {} }()));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"assemblyscript\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"asc\"] = factory((function webpackLoadOptionalExternalModule() { try { return require(\"assemblyscript\"); } catch(e) {} }()));\n\telse\n\t\troot[\"asc\"] = factory(root[\"assemblyscript\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__10__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","exports.nextTick = function nextTick(fn) {\n\tsetTimeout(fn, 0);\n};\n\nexports.platform = exports.arch = \nexports.execPath = exports.title = 'browser';\nexports.pid = 1;\nexports.browser = true;\nexports.env = {};\nexports.argv = [];\n\nexports.binding = function (name) {\n\tthrow new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    exports.cwd = function () { return cwd };\n    exports.chdir = function (dir) {\n        if (!path) path = require('path');\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\nexports.exit = exports.kill = \nexports.umask = exports.dlopen = \nexports.uptime = exports.memoryUsage = \nexports.uvCounters = function() {};\nexports.features = {};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * Compiler frontend for node.js\r\n *\r\n * Uses the low-level API exported from src/index.ts so it works with the compiler compiled to\r\n * JavaScript as well as the compiler compiled to WebAssembly (eventually). Runs the sources\r\n * directly through ts-node if distribution files are not present (indicated by a `-dev` version).\r\n *\r\n * Can also be packaged as a bundle suitable for in-browser use with the standard library injected\r\n * in the build step. See dist/asc.js for the bundle and webpack.config.js for building details.\r\n *\r\n * @module cli/asc\r\n */\r\n\r\n// Use \".\" instead of \"/\" as cwd in browsers\r\nif (process.browser) process.cwd = function() { return \".\"; };\r\n\r\nconst fs = require(\"fs\");\r\nconst path = require(\"path\");\r\nconst utf8 = require(\"@protobufjs/utf8\");\r\nconst colorsUtil = require(\"./util/colors\");\r\nconst optionsUtil = require(\"./util/options\");\r\nconst mkdirp = require(\"./util/mkdirp\");\r\nconst EOL = process.platform === \"win32\" ? \"\\r\\n\" : \"\\n\";\r\n\r\n// Emscripten adds an `uncaughtException` listener to Binaryen that results in an additional\r\n// useless code fragment on top of an actual error. suppress this:\r\nif (process.removeAllListeners) process.removeAllListeners(\"uncaughtException\");\r\n\r\n// Use distribution files if present, otherwise run the sources directly\r\nvar assemblyscript, isDev = false;\r\n(() => {\r\n  try { // `asc` on the command line\r\n    assemblyscript = require(\"../dist/assemblyscript.js\");\r\n  } catch (e) {\r\n    try { // `asc` on the command line without dist files\r\n      require(\"ts-node\").register({ project: path.join(__dirname, \"..\", \"src\", \"tsconfig.json\") });\r\n      require(\"../src/glue/js\");\r\n      assemblyscript = require(\"../src\");\r\n      isDev = true;\r\n    } catch (e_ts) {\r\n      try { // `require(\"dist/asc.js\")` in explicit browser tests\r\n        assemblyscript = eval(\"require('./assemblyscript')\");\r\n      } catch (e) {\r\n        // combine both errors that lead us here\r\n        e.stack = e_ts.stack + \"\\n---\\n\" + e.stack;\r\n        throw e;\r\n      }\r\n    }\r\n  }\r\n})();\r\n\r\n/** Whether this is a webpack bundle or not. */\r\nexports.isBundle = typeof BUNDLE_VERSION === \"string\";\r\n\r\n/** Whether asc runs the sources directly or not. */\r\nexports.isDev = isDev;\r\n\r\n/** AssemblyScript version. */\r\nexports.version = exports.isBundle ? BUNDLE_VERSION : require(\"../package.json\").version;\r\n\r\n/** Available CLI options. */\r\nexports.options = require(\"./asc.json\");\r\n\r\n/** Common root used in source maps. */\r\nexports.sourceMapRoot = \"assemblyscript:///\";\r\n\r\n/** Prefix used for library files. */\r\nexports.libraryPrefix = assemblyscript.LIBRARY_PREFIX;\r\n\r\n/** Default Binaryen optimization level. */\r\nexports.defaultOptimizeLevel = 2;\r\n\r\n/** Default Binaryen shrink level. */\r\nexports.defaultShrinkLevel = 1;\r\n\r\n/** Bundled library files. */\r\nexports.libraryFiles = exports.isBundle ? BUNDLE_LIBRARY : (() => { // set up if not a bundle\r\n  const libDir = path.join(__dirname, \"..\", \"std\", \"assembly\");\r\n  const libFiles = require(\"glob\").sync(\"**/!(*.d).ts\", { cwd: libDir });\r\n  const bundled = {};\r\n  libFiles.forEach(file => bundled[file.replace(/\\.ts$/, \"\")] = fs.readFileSync(path.join(libDir, file), \"utf8\" ));\r\n  return bundled;\r\n})();\r\n\r\n/** Bundled definition files. */\r\nexports.definitionFiles = exports.isBundle ? BUNDLE_DEFINITIONS : (() => { // set up if not a bundle\r\n  const stdDir = path.join(__dirname, \"..\", \"std\");\r\n  return {\r\n    \"assembly\": fs.readFileSync(path.join(stdDir, \"assembly\", \"index.d.ts\"), \"utf8\"),\r\n    \"portable\": fs.readFileSync(path.join(stdDir, \"portable\", \"index.d.ts\"), \"utf8\")\r\n  };\r\n})();\r\n\r\n/** Convenience function that parses and compiles source strings directly. */\r\nexports.compileString = (sources, options) => {\r\n  if (typeof sources === \"string\") sources = { \"input.ts\": sources };\r\n  const output = Object.create({\r\n    stdout: createMemoryStream(),\r\n    stderr: createMemoryStream(),\r\n    binary: null,\r\n    text: null\r\n  });\r\n  var argv = [\r\n    \"--binaryFile\", \"binary\",\r\n    \"--textFile\", \"text\",\r\n  ];\r\n  Object.keys(options || {}).forEach(key => {\r\n    var val = options[key];\r\n    if (Array.isArray(val)) val.forEach(val => argv.push(\"--\" + key, String(val)));\r\n    else argv.push(\"--\" + key, String(val));\r\n  });\r\n  exports.main(argv.concat(Object.keys(sources)), {\r\n    stdout: output.stdout,\r\n    stderr: output.stderr,\r\n    readFile: name => sources.hasOwnProperty(name) ? sources[name] : null,\r\n    writeFile: (name, contents) => output[name] = contents,\r\n    listFiles: () => []\r\n  });\r\n  return output;\r\n}\r\n\r\n/** Runs the command line utility using the specified arguments array. */\r\nexports.main = function main(argv, options, callback) {\r\n  if (typeof options === \"function\") {\r\n    callback = options;\r\n    options = {};\r\n  } else if (!options) {\r\n    options = {};\r\n  }\r\n\r\n  const stdout = options.stdout || process.stdout;\r\n  const stderr = options.stderr || process.stderr;\r\n  const readFile = options.readFile || readFileNode;\r\n  const writeFile = options.writeFile || writeFileNode;\r\n  const listFiles = options.listFiles || listFilesNode;\r\n  const stats = options.stats || createStats();\r\n\r\n  // Output must be specified if not present in the environment\r\n  if (!stdout) throw Error(\"'options.stdout' must be specified\");\r\n  if (!stderr) throw Error(\"'options.stderr' must be specified\");\r\n\r\n  const opts = optionsUtil.parse(argv, exports.options);\r\n  const args = opts.options;\r\n  argv = opts.arguments;\r\n  if (args.noColors) {\r\n    colorsUtil.stdout.supported =\r\n    colorsUtil.stderr.supported = false;\r\n  } else {\r\n    colorsUtil.stdout = colorsUtil.from(stdout);\r\n    colorsUtil.stderr = colorsUtil.from(stderr);\r\n  }\r\n\r\n  // Check for unknown arguments\r\n  if (opts.unknown.length) {\r\n    opts.unknown.forEach(arg => {\r\n      stderr.write(colorsUtil.stderr.yellow(\"WARN: \") + \"Unknown option '\" + arg + \"'\" + EOL);\r\n    });\r\n  }\r\n\r\n  // Check for trailing arguments\r\n  if (opts.trailing.length) {\r\n    stderr.write(colorsUtil.stderr.yellow(\"WARN: \") + \"Unsupported trailing arguments: \" + opts.trailing.join(\" \") + EOL);\r\n  }\r\n\r\n  // Use default callback if none is provided\r\n  if (!callback) callback = function defaultCallback(err) {\r\n    var code = 0;\r\n    if (err) {\r\n      stderr.write(colorsUtil.stderr.red(\"ERROR: \") + err.stack.replace(/^ERROR: /i, \"\") + EOL);\r\n      code = 1;\r\n    }\r\n    return code;\r\n  };\r\n\r\n  // Just print the version if requested\r\n  if (args.version) {\r\n    stdout.write(\"Version \" + exports.version + (isDev ? \"-dev\" : \"\") + EOL);\r\n    return callback(null);\r\n  }\r\n  // Print the help message if requested or no source files are provided\r\n  if (args.help || !argv.length) {\r\n    var out = args.help ? stdout : stderr;\r\n    var color = args.help ? colorsUtil.stdout : colorsUtil.stderr;\r\n    out.write([\r\n      color.white(\"SYNTAX\"),\r\n      \"  \" + color.cyan(\"asc\") + \" [entryFile ...] [options]\",\r\n      \"\",\r\n      color.white(\"EXAMPLES\"),\r\n      \"  \" + color.cyan(\"asc\") + \" hello.ts\",\r\n      \"  \" + color.cyan(\"asc\") + \" hello.ts -b hello.wasm -t hello.wat\",\r\n      \"  \" + color.cyan(\"asc\") + \" hello1.ts hello2.ts -b -O > hello.wasm\",\r\n      \"\",\r\n      color.white(\"OPTIONS\"),\r\n    ].concat(\r\n      optionsUtil.help(exports.options, 24, EOL)\r\n    ).join(EOL) + EOL);\r\n    return callback(null);\r\n  }\r\n\r\n  // I/O must be specified if not present in the environment\r\n  if (!fs.readFileSync) {\r\n    if (readFile === readFileNode) throw Error(\"'options.readFile' must be specified\");\r\n    if (writeFile === writeFileNode) throw Error(\"'options.writeFile' must be specified\");\r\n    if (listFiles === listFilesNode) throw Error(\"'options.listFiles' must be specified\");\r\n  }\r\n\r\n  // Set up base directory\r\n  const baseDir = args.baseDir ? path.resolve(args.baseDir) : \".\";\r\n\r\n  // Set up transforms\r\n  const transforms = [];\r\n  if (args.transform) {\r\n    args.transform.forEach(transform =>\r\n      transforms.push(\r\n        require(\r\n          path.isAbsolute(transform = transform.trim())\r\n            ? transform\r\n            : path.join(process.cwd(), transform)\r\n        )\r\n      )\r\n    );\r\n  }\r\n  function applyTransform(name, ...args) {\r\n    transforms.forEach(transform => {\r\n      if (typeof transform[name] === \"function\") transform[name](...args);\r\n    });\r\n  }\r\n\r\n  // Begin parsing\r\n  var parser = null;\r\n\r\n  // Include library files\r\n  if (!args.noLib) { // bundled\r\n    Object.keys(exports.libraryFiles).forEach(libPath => {\r\n      if (libPath.indexOf(\"/\") >= 0) return; // in sub-directory: imported on demand\r\n      stats.parseCount++;\r\n      stats.parseTime += measure(() => {\r\n        parser = assemblyscript.parseFile(\r\n          exports.libraryFiles[libPath],\r\n          exports.libraryPrefix + libPath + \".ts\",\r\n          false,\r\n          parser\r\n        );\r\n      });\r\n    });\r\n  }\r\n  const customLibDirs = [];\r\n  if (args.lib) {\r\n    let lib = args.lib;\r\n    if (typeof lib === \"string\") lib = lib.split(\",\");\r\n    Array.prototype.push.apply(customLibDirs, lib.map(lib => lib.trim()));\r\n    for (let i = 0, k = customLibDirs.length; i < k; ++i) { // custom\r\n      let libDir = customLibDirs[i];\r\n      let libFiles;\r\n      if (libDir.endsWith(\".ts\")) {\r\n        libFiles = [ path.basename(libDir) ];\r\n        libDir = path.dirname(libDir);\r\n      } else {\r\n        libFiles = listFiles(libDir);\r\n      }\r\n      for (let j = 0, l = libFiles.length; j < l; ++j) {\r\n        let libPath = libFiles[j];\r\n        let libText = readFile(path.join(libDir, libPath));\r\n        if (libText === null) return callback(Error(\"Library file '\" + libPath + \"' not found.\"));\r\n        stats.parseCount++;\r\n        stats.parseTime += measure(() => {\r\n          parser = assemblyscript.parseFile(\r\n            libText,\r\n            exports.libraryPrefix + libPath,\r\n            false,\r\n            parser\r\n          );\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Include entry files\r\n  for (let i = 0, k = argv.length; i < k; ++i) {\r\n    const filename = argv[i];\r\n\r\n    let sourcePath = String(filename).replace(/\\\\/g, \"/\").replace(/(\\.ts|\\/)$/, \"\");\r\n\r\n    // Try entryPath.ts, then entryPath/index.ts\r\n    let sourceText = readFile(path.join(baseDir, sourcePath) + \".ts\");\r\n    if (sourceText === null) {\r\n      sourceText = readFile(path.join(baseDir, sourcePath, \"index.ts\"));\r\n      if (sourceText === null) {\r\n        return callback(Error(\"Entry file '\" + sourcePath + \".ts' not found.\"));\r\n      } else {\r\n        sourcePath += \"/index.ts\";\r\n      }\r\n    } else {\r\n      sourcePath += \".ts\";\r\n    }\r\n\r\n    stats.parseCount++;\r\n    stats.parseTime += measure(() => {\r\n      parser = assemblyscript.parseFile(sourceText, sourcePath, true, parser);\r\n    });\r\n\r\n    // Process backlog\r\n    while ((sourcePath = parser.nextFile()) != null) {\r\n      let found = false;\r\n\r\n      // Load library file if explicitly requested\r\n      if (sourcePath.startsWith(exports.libraryPrefix)) {\r\n        const plainName = sourcePath.substring(exports.libraryPrefix.length);\r\n        const indexName = sourcePath.substring(exports.libraryPrefix.length) + \"/index\";\r\n        if (exports.libraryFiles.hasOwnProperty(plainName)) {\r\n          sourceText = exports.libraryFiles[plainName];\r\n          sourcePath = exports.libraryPrefix + plainName + \".ts\";\r\n        } else if (exports.libraryFiles.hasOwnProperty(indexName)) {\r\n          sourceText = exports.libraryFiles[indexName];\r\n          sourcePath = exports.libraryPrefix + indexName + \".ts\";\r\n        } else {\r\n          for (let i = 0, k = customLibDirs.length; i < k; ++i) {\r\n            const dir = customLibDirs[i];\r\n            sourceText = readFile(path.join(dir, plainName + \".ts\"));\r\n            if (sourceText !== null) {\r\n              sourcePath = exports.libraryPrefix + plainName + \".ts\";\r\n              break;\r\n            } else {\r\n              sourceText = readFile(path.join(dir, indexName + \".ts\"));\r\n              if (sourceText !== null) {\r\n                sourcePath = exports.libraryPrefix + indexName + \".ts\";\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n      // Otherwise try nextFile.ts, nextFile/index.ts, ~lib/nextFile.ts, ~lib/nextFile/index.ts\r\n      } else {\r\n        const plainName = sourcePath;\r\n        const indexName = sourcePath + \"/index\";\r\n        sourceText = readFile(path.join(baseDir, plainName + \".ts\"));\r\n        if (sourceText !== null) {\r\n          sourcePath = plainName + \".ts\";\r\n        } else {\r\n          sourceText = readFile(path.join(baseDir, indexName + \".ts\"));\r\n          if (sourceText !== null) {\r\n            sourcePath = indexName + \".ts\";\r\n          } else if (!plainName.startsWith(\".\")) {\r\n            if (exports.libraryFiles.hasOwnProperty(plainName)) {\r\n              sourceText = exports.libraryFiles[plainName];\r\n              sourcePath = exports.libraryPrefix + plainName + \".ts\";\r\n            } else if (exports.libraryFiles.hasOwnProperty(indexName)) {\r\n              sourceText = exports.libraryFiles[indexName];\r\n              sourcePath = exports.libraryPrefix + indexName + \".ts\";\r\n            } else {\r\n              for (let i = 0, k = customLibDirs.length; i < k; ++i) {\r\n                const dir = customLibDirs[i];\r\n                sourceText = readFile(path.join(dir, plainName + \".ts\"));\r\n                if (sourceText !== null) {\r\n                  sourcePath = exports.libraryPrefix + plainName + \".ts\";\r\n                  break;\r\n                } else {\r\n                  sourceText = readFile(path.join(dir, indexName + \".ts\"));\r\n                  if (sourceText !== null) {\r\n                    sourcePath = exports.libraryPrefix + indexName + \".ts\";\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (sourceText == null) {\r\n        return callback(Error(\"Import file '\" + sourcePath + \".ts' not found.\"));\r\n      }\r\n      stats.parseCount++;\r\n      stats.parseTime += measure(() => {\r\n        assemblyscript.parseFile(sourceText, sourcePath, false, parser);\r\n      });\r\n    }\r\n    if (checkDiagnostics(parser, stderr)) {\r\n      return callback(Error(\"Parse error\"));\r\n    }\r\n  }\r\n\r\n  applyTransform(\"afterParse\", parser);\r\n\r\n  // Finish parsing\r\n  const program = assemblyscript.finishParsing(parser);\r\n\r\n  // Set up optimization levels\r\n  var optimizeLevel = 0;\r\n  var shrinkLevel = 0;\r\n  if (args.optimize) {\r\n    optimizeLevel = exports.defaultOptimizeLevel;\r\n    shrinkLevel = exports.defaultShrinkLevel;\r\n  }\r\n  if (typeof args.optimizeLevel === \"number\") {\r\n    optimizeLevel = args.optimizeLevel;\r\n  }\r\n  if (typeof args.shrinkLevel === \"number\") {\r\n    shrinkLevel = args.shrinkLevel;\r\n  }\r\n  optimizeLevel = Math.min(Math.max(optimizeLevel, 0), 3);\r\n  shrinkLevel = Math.min(Math.max(shrinkLevel, 0), 2);\r\n\r\n  // Begin compilation\r\n  const compilerOptions = assemblyscript.createOptions();\r\n  assemblyscript.setTarget(compilerOptions, 0);\r\n  assemblyscript.setNoTreeShaking(compilerOptions, args.noTreeShaking);\r\n  assemblyscript.setNoAssert(compilerOptions, args.noAssert);\r\n  assemblyscript.setImportMemory(compilerOptions, args.importMemory);\r\n  assemblyscript.setImportTable(compilerOptions, args.importTable);\r\n  assemblyscript.setMemoryBase(compilerOptions, args.memoryBase >>> 0);\r\n  assemblyscript.setSourceMap(compilerOptions, args.sourceMap != null);\r\n  assemblyscript.setOptimizeLevelHints(compilerOptions, optimizeLevel, shrinkLevel);\r\n\r\n  if (!args.noLib) {\r\n    // Initialize default aliases\r\n    assemblyscript.setGlobalAlias(compilerOptions, \"Math\", \"NativeMath\");\r\n    assemblyscript.setGlobalAlias(compilerOptions, \"Mathf\", \"NativeMathf\");\r\n    assemblyscript.setGlobalAlias(compilerOptions, \"abort\", \"~lib/env/abort\");\r\n    assemblyscript.setGlobalAlias(compilerOptions, \"trace\", \"~lib/env/trace\");\r\n  }\r\n\r\n  // Add or override aliases if specified\r\n  if (args.use) {\r\n    let aliases = args.use;\r\n    for (let i = 0, k = aliases.length; i < k; ++i) {\r\n      let part = aliases[i];\r\n      let p = part.indexOf(\"=\");\r\n      if (p < 0) return callback(Error(\"Global alias '\" + part + \"' is invalid.\"));\r\n      let name = part.substring(0, p).trim();\r\n      let alias = part.substring(p + 1).trim();\r\n      if (!name.length) return callback(Error(\"Global alias '\" + part + \"' is invalid.\"));\r\n      assemblyscript.setGlobalAlias(compilerOptions, name, alias);\r\n    }\r\n  }\r\n\r\n  // Enable additional features if specified\r\n  var features = args.enable;\r\n  if (features != null) {\r\n    if (typeof features === \"string\") features = features.split(\",\");\r\n    for (let i = 0, k = features.length; i < k; ++i) {\r\n      let name = features[i].trim();\r\n      let flag = assemblyscript[\"FEATURE_\" + name.replace(/\\-/g, \"_\").toUpperCase()];\r\n      if (!flag) return callback(Error(\"Feature '\" + name + \"' is unknown.\"));\r\n      assemblyscript.enableFeature(compilerOptions, flag);\r\n    }\r\n  }\r\n\r\n  var module;\r\n  stats.compileCount++;\r\n  (() => {\r\n    try {\r\n      stats.compileTime += measure(() => {\r\n        module = assemblyscript.compileProgram(program, compilerOptions);\r\n      });\r\n    } catch (e) {\r\n      return callback(e);\r\n    }\r\n  })();\r\n  if (checkDiagnostics(parser, stderr)) {\r\n    if (module) module.dispose();\r\n    return callback(Error(\"Compile error\"));\r\n  }\r\n\r\n  // Validate the module if requested\r\n  if (args.validate) {\r\n    stats.validateCount++;\r\n    stats.validateTime += measure(() => {\r\n      if (!module.validate()) {\r\n        module.dispose();\r\n        return callback(Error(\"Validate error\"));\r\n      }\r\n    });\r\n  }\r\n\r\n  // Set Binaryen-specific options\r\n  if (args.trapMode === \"clamp\") {\r\n    stats.optimizeCount++;\r\n    stats.optimizeTime += measure(() => {\r\n      module.runPasses([ \"trap-mode-clamp\" ]);\r\n    });\r\n  } else if (args.trapMode === \"js\") {\r\n    stats.optimizeCount++;\r\n    stats.optimizeTime += measure(() => {\r\n      module.runPasses([ \"trap-mode-js\" ]);\r\n    });\r\n  } else if (args.trapMode !== \"allow\") {\r\n    module.dispose();\r\n    return callback(Error(\"Unsupported trap mode\"));\r\n  }\r\n\r\n  // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\r\n  // see: https://github.com/WebAssembly/binaryen/pull/1596\r\n  if (optimizeLevel >= 3 || shrinkLevel >= 2) optimizeLevel = 4;\r\n\r\n  module.setOptimizeLevel(optimizeLevel);\r\n  module.setShrinkLevel(shrinkLevel);\r\n  module.setDebugInfo(!args.noDebug);\r\n\r\n  var runPasses = [];\r\n  if (args.runPasses) {\r\n    if (typeof args.runPasses === \"string\") {\r\n      args.runPasses = args.runPasses.split(\",\");\r\n    }\r\n    if (args.runPasses.length) {\r\n      args.runPasses.forEach(pass => {\r\n        if (runPasses.indexOf(pass) < 0)\r\n          runPasses.push(pass);\r\n      });\r\n    }\r\n  }\r\n\r\n  // Optimize the module if requested\r\n  if (optimizeLevel > 0 || shrinkLevel > 0) {\r\n    stats.optimizeCount++;\r\n    stats.optimizeTime += measure(() => {\r\n      module.optimize();\r\n    });\r\n  }\r\n\r\n  // Run additional passes if requested\r\n  if (runPasses.length) {\r\n    stats.optimizeCount++;\r\n    stats.optimizeTime += measure(() => {\r\n      module.runPasses(runPasses.map(pass => pass.trim()));\r\n    });\r\n  }\r\n\r\n  // Prepare output\r\n  if (!args.noEmit) {\r\n    let hasStdout = false;\r\n    let hasOutput = false;\r\n\r\n    if (args.outFile != null) {\r\n      if (/\\.was?t$/.test(args.outFile) && args.textFile == null) {\r\n        args.textFile = args.outFile;\r\n      } else if (/\\.js$/.test(args.outFile) && args.asmjsFile == null) {\r\n        args.asmjsFile = args.outFile;\r\n      } else if (args.binaryFile == null) {\r\n        args.binaryFile = args.outFile;\r\n      }\r\n    }\r\n\r\n    // Write binary\r\n    if (args.binaryFile != null) {\r\n      let sourceMapURL = args.sourceMap != null\r\n        ? args.sourceMap.length\r\n          ? args.sourceMap\r\n          : path.basename(args.binaryFile) + \".map\"\r\n        : null;\r\n\r\n      let wasm;\r\n      stats.emitCount++;\r\n      stats.emitTime += measure(() => {\r\n        wasm = module.toBinary(sourceMapURL)\r\n      });\r\n\r\n      if (args.binaryFile.length) {\r\n        writeFile(path.join(baseDir, args.binaryFile), wasm.output);\r\n      } else {\r\n        writeStdout(wasm.output);\r\n        hasStdout = true;\r\n      }\r\n      hasOutput = true;\r\n\r\n      // Post-process source map\r\n      if (wasm.sourceMap != null) {\r\n        if (args.binaryFile.length) {\r\n          let sourceMap = JSON.parse(wasm.sourceMap);\r\n          sourceMap.sourceRoot = exports.sourceMapRoot;\r\n          sourceMap.sources.forEach((name, index) => {\r\n            let text = null;\r\n            if (name.startsWith(exports.libraryPrefix)) {\r\n              let stdName = name.substring(exports.libraryPrefix.length).replace(/\\.ts$/, \"\");\r\n              if (exports.libraryFiles.hasOwnProperty(stdName)) {\r\n                text = exports.libraryFiles[stdName];\r\n              } else {\r\n                for (let i = 0, k = customLibDirs.length; i < k; ++i) {\r\n                  text = readFile(path.join(\r\n                    customLibDirs[i],\r\n                    name.substring(exports.libraryPrefix.length))\r\n                  );\r\n                  if (text !== null) break;\r\n                }\r\n              }\r\n            } else {\r\n              text = readFile(path.join(baseDir, name));\r\n            }\r\n            if (text === null) {\r\n              return callback(Error(\"Source file '\" + name + \"' not found.\"));\r\n            }\r\n            if (!sourceMap.sourceContents) sourceMap.sourceContents = [];\r\n            sourceMap.sourceContents[index] = text;\r\n          });\r\n          writeFile(path.join(\r\n            baseDir,\r\n            path.dirname(args.binaryFile),\r\n            path.basename(sourceMapURL)\r\n          ), JSON.stringify(sourceMap));\r\n        } else {\r\n          stderr.write(\"Skipped source map (stdout already occupied)\" + EOL);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Write asm.js\r\n    if (args.asmjsFile != null) {\r\n      let asm;\r\n      if (args.asmjsFile.length) {\r\n        stats.emitCount++;\r\n        stats.emitTime += measure(() => {\r\n          asm = module.toAsmjs();\r\n        });\r\n        writeFile(path.join(baseDir, args.asmjsFile), asm);\r\n      } else if (!hasStdout) {\r\n        stats.emitCount++;\r\n        stats.emitTime += measure(() => {\r\n          asm = module.toAsmjs();\r\n        });\r\n        writeStdout(asm);\r\n        hasStdout = true;\r\n      }\r\n      hasOutput = true;\r\n    }\r\n\r\n    // Write WebIDL\r\n    if (args.idlFile != null) {\r\n      let idl;\r\n      if (args.idlFile.length) {\r\n        stats.emitCount++;\r\n        stats.emitTime += measure(() => {\r\n          idl = assemblyscript.buildIDL(program);\r\n        });\r\n        writeFile(path.join(baseDir, args.idlFile), idl);\r\n      } else if (!hasStdout) {\r\n        stats.emitCount++;\r\n        stats.emitTime += measure(() => {\r\n          idl = assemblyscript.buildIDL(program);\r\n        });\r\n        writeStdout(idl);\r\n        hasStdout = true;\r\n      }\r\n      hasOutput = true;\r\n    }\r\n\r\n    // Write TypeScript definition\r\n    if (args.tsdFile != null) {\r\n      let tsd;\r\n      if (args.tsdFile.length) {\r\n        stats.emitCount++;\r\n        stats.emitTime += measure(() => {\r\n          tsd = assemblyscript.buildTSD(program);\r\n        });\r\n        writeFile(path.join(baseDir, args.tsdFile), tsd);\r\n      } else if (!hasStdout) {\r\n        stats.emitCount++;\r\n        stats.emitTime += measure(() => {\r\n          tsd = assemblyscript.buildTSD(program);\r\n        });\r\n        writeStdout(tsd);\r\n        hasStdout = true;\r\n      }\r\n      hasOutput = true;\r\n    }\r\n\r\n    // Write text (must be last)\r\n    if (args.textFile != null || !hasOutput) {\r\n      let wat;\r\n      if (args.textFile && args.textFile.length) {\r\n        stats.emitCount++;\r\n        stats.emitTime += measure(() => {\r\n          wat = module.toText();\r\n        });\r\n        writeFile(path.join(baseDir, args.textFile), wat);\r\n      } else if (!hasStdout) {\r\n        stats.emitCount++;\r\n        stats.emitTime += measure(() => {\r\n          wat = module.toText()\r\n        });\r\n        writeStdout(wat);\r\n      }\r\n    }\r\n  }\r\n\r\n  module.dispose();\r\n  if (args.measure) {\r\n    printStats(stats, stderr);\r\n  }\r\n  return callback(null);\r\n\r\n  function readFileNode(filename) {\r\n    try {\r\n      let text;\r\n      stats.readCount++;\r\n      stats.readTime += measure(() => {\r\n        text = fs.readFileSync(filename, { encoding: \"utf8\" });\r\n      });\r\n      return text;\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  function writeFileNode(filename, contents) {\r\n    try {\r\n      stats.writeCount++;\r\n      stats.writeTime += measure(() => {\r\n        mkdirp(path.dirname(filename));\r\n        if (typeof contents === \"string\") {\r\n          fs.writeFileSync(filename, contents, { encoding: \"utf8\" } );\r\n        } else {\r\n          fs.writeFileSync(filename, contents);\r\n        }\r\n      });\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function listFilesNode(dirname) {\r\n    var files;\r\n    try {\r\n      stats.readTime += measure(() => {\r\n        files = fs.readdirSync(dirname).filter(file => /^(?!.*\\.d\\.ts$).*\\.ts$/.test(file));\r\n      });\r\n      return files;\r\n    } catch (e) {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  function writeStdout(contents) {\r\n    if (!writeStdout.used) {\r\n      stats.writeCount++;\r\n      writeStdout.used = true;\r\n    }\r\n    stats.writeTime += measure(() => {\r\n      if (typeof contents === \"string\") {\r\n        stdout.write(contents, { encoding: \"utf8\" });\r\n      } else {\r\n        stdout.write(contents);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nvar argumentSubstitutions = {\r\n  \"-O\"  : [ \"--optimize\" ],\r\n  \"-Os\" : [ \"--optimize\", \"--shrinkLevel\", \"1\" ],\r\n  \"-Oz\" : [ \"--optimize\", \"--shrinkLevel\", \"2\" ],\r\n  \"-O0\" : [ \"--optimizeLevel\", \"0\", \"--shrinkLevel\", \"0\" ],\r\n  \"-O0s\": [ \"--optimizeLevel\", \"0\", \"--shrinkLevel\", \"1\" ],\r\n  \"-O0z\": [ \"--optimizeLevel\", \"0\", \"--shrinkLevel\", \"2\" ],\r\n  \"-O1\" : [ \"--optimizeLevel\", \"1\", \"--shrinkLevel\", \"0\" ],\r\n  \"-O1s\": [ \"--optimizeLevel\", \"1\", \"--shrinkLevel\", \"1\" ],\r\n  \"-O1z\": [ \"--optimizeLevel\", \"1\", \"--shrinkLevel\", \"2\" ],\r\n  \"-O2\" : [ \"--optimizeLevel\", \"2\", \"--shrinkLevel\", \"0\" ],\r\n  \"-O2s\": [ \"--optimizeLevel\", \"2\", \"--shrinkLevel\", \"1\" ],\r\n  \"-O2z\": [ \"--optimizeLevel\", \"2\", \"--shrinkLevel\", \"2\" ],\r\n  \"-O3\" : [ \"--optimizeLevel\", \"3\", \"--shrinkLevel\", \"0\" ],\r\n  \"-O3s\": [ \"--optimizeLevel\", \"3\", \"--shrinkLevel\", \"1\" ],\r\n  \"-O3z\": [ \"--optimizeLevel\", \"3\", \"--shrinkLevel\", \"2\" ],\r\n};\r\n\r\n/** Checks diagnostics emitted so far for errors. */\r\nfunction checkDiagnostics(emitter, stderr) {\r\n  var diagnostic;\r\n  var hasErrors = false;\r\n  while ((diagnostic = assemblyscript.nextDiagnostic(emitter)) != null) {\r\n    if (stderr) {\r\n      stderr.write(\r\n        assemblyscript.formatDiagnostic(diagnostic, stderr.isTTY, true) +\r\n        EOL + EOL\r\n      );\r\n    }\r\n    if (assemblyscript.isError(diagnostic)) hasErrors = true;\r\n  }\r\n  return hasErrors;\r\n}\r\n\r\nexports.checkDiagnostics = checkDiagnostics;\r\n\r\n/** Creates an empty set of stats. */\r\nfunction createStats() {\r\n  return {\r\n    readTime: 0,\r\n    readCount: 0,\r\n    writeTime: 0,\r\n    writeCount: 0,\r\n    parseTime: 0,\r\n    parseCount: 0,\r\n    compileTime: 0,\r\n    compileCount: 0,\r\n    emitTime: 0,\r\n    emitCount: 0,\r\n    validateTime: 0,\r\n    validateCount: 0,\r\n    optimizeTime: 0,\r\n    optimizeCount: 0\r\n  };\r\n}\r\n\r\nexports.createStats = createStats;\r\n\r\nif (!process.hrtime) process.hrtime = require(\"browser-process-hrtime\");\r\n\r\n/** Measures the execution time of the specified function.  */\r\nfunction measure(fn) {\r\n  const start = process.hrtime();\r\n  fn();\r\n  const times = process.hrtime(start);\r\n  return times[0] * 1e9 + times[1];\r\n}\r\n\r\nexports.measure = measure;\r\n\r\n/** Formats a high resolution time to a human readable string. */\r\nfunction formatTime(time) {\r\n  return time ? (time / 1e6).toFixed(3) + \" ms\" : \"N/A\";\r\n}\r\n\r\nexports.formatTime = formatTime;\r\n\r\n/** Formats and prints out the contents of a set of stats. */\r\nfunction printStats(stats, output) {\r\n  function format(time, count) {\r\n    return formatTime(time);\r\n  }\r\n  (output || process.stdout).write([\r\n    \"I/O Read  : \" + format(stats.readTime, stats.readCount),\r\n    \"I/O Write : \" + format(stats.writeTime, stats.writeCount),\r\n    \"Parse     : \" + format(stats.parseTime, stats.parseCount),\r\n    \"Compile   : \" + format(stats.compileTime, stats.compileCount),\r\n    \"Emit      : \" + format(stats.emitTime, stats.emitCount),\r\n    \"Validate  : \" + format(stats.validateTime, stats.validateCount),\r\n    \"Optimize  : \" + format(stats.optimizeTime, stats.optimizeCount)\r\n  ].join(EOL) + EOL);\r\n}\r\n\r\nexports.printStats = printStats;\r\n\r\nvar allocBuffer = typeof global !== \"undefined\" && global.Buffer\r\n  ? global.Buffer.allocUnsafe || function(len) { return new global.Buffer(len); }\r\n  : function(len) { return new Uint8Array(len) };\r\n\r\n/** Creates a memory stream that can be used in place of stdout/stderr. */\r\nfunction createMemoryStream(fn) {\r\n  var stream = [];\r\n  stream.write = function(chunk) {\r\n    if (fn) fn(chunk);\r\n    if (typeof chunk === \"string\") {\r\n      let buffer = allocBuffer(utf8.length(chunk));\r\n      utf8.write(chunk, buffer, 0);\r\n      chunk = buffer;\r\n    }\r\n    this.push(chunk);\r\n  };\r\n  stream.reset = function() {\r\n    stream.length = 0;\r\n  };\r\n  stream.toBuffer = function() {\r\n    var offset = 0, i = 0, k = this.length;\r\n    while (i < k) offset += this[i++].length;\r\n    var buffer = allocBuffer(offset);\r\n    offset = i = 0;\r\n    while (i < k) {\r\n      buffer.set(this[i], offset);\r\n      offset += this[i].length;\r\n      ++i;\r\n    }\r\n    return buffer;\r\n  };\r\n  stream.toString = function() {\r\n    var buffer = this.toBuffer();\r\n    return utf8.read(buffer, 0, buffer.length);\r\n  };\r\n  return stream;\r\n}\r\n\r\nexports.createMemoryStream = createMemoryStream;\r\n\r\n/** Compatible TypeScript compiler options for syntax highlighting etc. */\r\nexports.tscOptions = {\r\n  alwaysStrict: true,\r\n  noImplicitAny: true,\r\n  noImplicitReturns: true,\r\n  noImplicitThis: true,\r\n  noEmitOnError: true,\r\n  strictNullChecks: true,\r\n  experimentalDecorators: true,\r\n  target: \"esnext\",\r\n  module: \"commonjs\",\r\n  noLib: true,\r\n  types: [],\r\n  allowJs: false\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","var proc = typeof process !== \"undefined\" && process || {};\r\nvar isCI = proc.env && \"CI\" in proc.env; // doesn't work when bundled because 'process' is a mock\r\n\r\nfunction from(stream, base) {\r\n  var colors = base || {};\r\n  colors.supported = (stream && !!stream.isTTY) || isCI;\r\n  colors.gray = text => colors.supported ? exports.GRAY + text + exports.RESET : text;\r\n  colors.red = text => colors.supported ? exports.RED + text + exports.RESET : text;\r\n  colors.green = text => colors.supported ? exports.GREEN + text + exports.RESET : text;\r\n  colors.yellow = text => colors.supported ? exports.YELLOW + text + exports.RESET : text;\r\n  colors.blue = text => colors.supported ? exports.BLUE + text + exports.RESET : text;\r\n  colors.magenta = text => colors.supported ? exports.MAGENTA + text + exports.RESET : text;\r\n  colors.cyan = text => colors.supported ? exports.CYAN + text + exports.RESET : text;\r\n  colors.white = text => colors.supported ? exports.WHITE + text + exports.RESET : text;\r\n  return colors;\r\n}\r\n\r\nexports.stdout = from(proc.stdout, exports);\r\nexports.stderr = from(proc.stderr);\r\nexports.from = from;\r\n\r\nexports.GRAY = \"\\u001b[90m\";\r\nexports.RED = \"\\u001b[91m\";\r\nexports.GREEN = \"\\u001b[92m\";\r\nexports.YELLOW = \"\\u001b[93m\";\r\nexports.BLUE = \"\\u001b[94m\";\r\nexports.MAGENTA = \"\\u001b[95m\";\r\nexports.CYAN = \"\\u001b[96m\";\r\nexports.WHITE = \"\\u001b[97m\";\r\nexports.RESET = \"\\u001b[0m\";\r\n","// type | meaning\r\n// -----|---------------\r\n// b    | boolean\r\n// i    | integer\r\n// f    | float\r\n// s    | string\r\n// I    | integer array\r\n// F    | float array\r\n// S    | string array\r\n\r\n/** Parses the specified command line arguments according to the given configuration. */\r\nfunction parse(argv, config) {\r\n  var options = {};\r\n  var unknown = [];\r\n  var arguments = [];\r\n  var trailing = [];\r\n\r\n  // make an alias map and initialize defaults\r\n  var aliases = {};\r\n  Object.keys(config).forEach(key => {\r\n    var option = config[key];\r\n    if (option.alias != null) {\r\n      if (typeof option.alias === \"string\") aliases[option.alias] = key;\r\n      else if (Array.isArray(option.alias)) option.alias.forEach(alias => aliases[alias] = key);\r\n    }\r\n    if (option.default != null) options[key] = option.default;\r\n  });\r\n\r\n  // iterate over argv\r\n  for (var i = 0, k = (argv = argv.slice()).length; i < k; ++i) {\r\n    let arg = argv[i];\r\n    if (arg == \"--\") { ++i; break; }\r\n    let match = /^(?:(\\-\\w)(?:=(.*))?|(\\-\\-\\w{2,})(?:=(.*))?)$/.exec(arg), option, key;\r\n    if (match) {\r\n      if (config[arg]) option = config[key = arg]; // exact\r\n      else if (match[1] != null) { // alias\r\n        option = config[key = aliases[match[1].substring(1)]];\r\n        if (option && match[2] != null) argv[i--] = match[2];\r\n      } else if (match[3] != null) { // full\r\n        option = config[key = match[3].substring(2)];\r\n        if (option && match[4] != null) argv[i--] = match[4];\r\n      }\r\n    } else {\r\n      if (arg.charCodeAt(0) == 45) option = config[key = arg]; // exact\r\n      else { arguments.push(arg); continue; } // argument\r\n    }\r\n    if (option) {\r\n      if (option.type == null || option.type === \"b\") options[key] = true; // flag\r\n      else {\r\n        if (i + 1 < argv.length && argv[i + 1].charCodeAt(0) != 45) { // present\r\n          switch (option.type) {\r\n            case \"i\": options[key] = parseInt(argv[++i], 10); break;\r\n            case \"I\": options[key] = (options[key] || []).concat(parseInt(argv[++i], 10)); break;\r\n            case \"f\": options[key] = parseFloat(argv[++i]); break;\r\n            case \"F\": options[key] = (options[key] || []).concat(parseFloat(argv[++i])); break;\r\n            case \"s\": options[key] = String(argv[++i]); break;\r\n            case \"S\": options[key] = (options[key] || []).concat(argv[++i].split(\",\")); break;\r\n            default: unknown.push(arg); --i;\r\n          }\r\n        } else { // omitted\r\n          switch (option.type) {\r\n            case \"i\":\r\n            case \"f\": options[key] = option.default || 0; break;\r\n            case \"s\": options[key] = option.default || \"\"; break;\r\n            case \"I\":\r\n            case \"F\":\r\n            case \"S\": options[key] = options.default || []; break;\r\n            default: unknown.push(arg);\r\n          }\r\n        }\r\n      }\r\n      if (option.value) Object.keys(option.value).forEach(k => options[k] = option.value[k]);\r\n    } else unknown.push(arg);\r\n  }\r\n  while (i < k) trailing.push(argv[i++]); // trailing\r\n\r\n  return { options, unknown, arguments, trailing };\r\n}\r\n\r\nexports.parse = parse;\r\n\r\n/** Generates the help text for the specified configuration. */\r\nfunction help(config, options) {\r\n  if (!options) options = {};\r\n  var indent = options.indent || 2;\r\n  var padding = options.padding || 24;\r\n  var eol = options.eol || \"\\n\";\r\n  var sb = [];\r\n  Object.keys(config).forEach(key => {\r\n    var option = config[key];\r\n    if (option.description == null) return;\r\n    var text = \"\";\r\n    while (text.length < indent) text += \" \";\r\n    text += \"--\" + key;\r\n    if (option.alias) text += \", -\" + option.alias;\r\n    while (text.length < padding) text += \" \";\r\n    if (Array.isArray(option.description)) {\r\n      sb.push(text + option.description[0] + option.description.slice(1).map(line => {\r\n        for (let i = 0; i < padding; ++i) line = \" \" + line;\r\n        return eol + line;\r\n      }).join(\"\"));\r\n    } else sb.push(text + option.description);\r\n  });\r\n  return sb.join(eol);\r\n}\r\n\r\nexports.help = help;\r\n","/*\r\nCopyright 2010 James Halliday (mail@substack.net)\r\n\r\nThis project is free software released under the MIT/X11 license:\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\r\n\r\nvar path = require(\"path\");\r\nvar fs = require(\"fs\");\r\nvar _0777 = parseInt(\"0777\", 8);\r\n\r\nmodule.exports = function mkdirp(p, opts, made) {\r\n  if (!opts || typeof opts !== \"object\") {\r\n    opts = { mode: opts };\r\n  }\r\n  var mode = opts.mode;\r\n  if (mode === undefined) {\r\n    mode = _0777 & (~process.umask());\r\n  }\r\n  if (!made) made = null;\r\n  p = path.resolve(p);\r\n  try {\r\n    fs.mkdirSync(p, mode);\r\n    made = made || p;\r\n  } catch (err0) {\r\n    switch (err0.code) {\r\n      case \"ENOENT\":\r\n        made = mkdirp(path.dirname(p), opts, made);\r\n        mkdirp(p, opts, made);\r\n        break;\r\n      default:\r\n        var stat;\r\n        try {\r\n          stat = fs.statSync(p);\r\n        } catch (err1) {\r\n          throw err0;\r\n        }\r\n        if (!stat.isDirectory()) throw err0;\r\n        break;\r\n    }\r\n  }\r\n  return made;\r\n};\r\n","if(typeof __WEBPACK_EXTERNAL_MODULE__10__ === 'undefined') {var e = new Error(\"Cannot find module 'assemblyscript'\"); e.code = 'MODULE_NOT_FOUND'; throw e;}\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__10__;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 12;","module.exports = process.hrtime || hrtime\n\n// polyfil for window.performance.now\nvar performance = global.performance || {}\nvar performanceNow =\n  performance.now        ||\n  performance.mozNow     ||\n  performance.msNow      ||\n  performance.oNow       ||\n  performance.webkitNow  ||\n  function(){ return (new Date()).getTime() }\n\n// generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\nfunction hrtime(previousTimestamp){\n  var clocktime = performanceNow.call(performance)*1e-3\n  var seconds = Math.floor(clocktime)\n  var nanoseconds = Math.floor((clocktime%1)*1e9)\n  if (previousTimestamp) {\n    seconds = seconds - previousTimestamp[0]\n    nanoseconds = nanoseconds - previousTimestamp[1]\n    if (nanoseconds<0) {\n      seconds--\n      nanoseconds += 1e9\n    }\n  }\n  return [seconds,nanoseconds]\n}"],"sourceRoot":""}