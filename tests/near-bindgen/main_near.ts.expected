import { near } from "./near";
import { JSONEncoder } from "./json/encoder";
import { JSONDecoder, ThrowingJSONHandler, DecoderState } from "./json/decoder";
import {
  doNothing as wrapped_doNothing,
  add as wrapped_add,
  getFoobar as wrapped_getFoobar,
  convertFoobars as wrapped_convertFoobars,
  getStringArrayLength as wrapped_getStringArrayLength
} from "./main";

// Runtime functions
declare function return_value(value_ptr: u32): void;
declare function input_read_len(): u32;
declare function input_read_into(ptr: usize): void;

import { near } from "./near";
import { near as bazinga_near } from "./near";
import { FooBar, ContainerClass, AnotherContainerClass } from "./model_near";
export class __near_ArgsParser_doNothing extends ThrowingJSONHandler {
  buffer: Uint8Array;
  decoder: JSONDecoder<__near_ArgsParser_doNothing>;
  handledRoot: boolean = false;

  setNull(name: string): void {
    super.setNull(name);
  }

  pushObject(name: string): bool {
    if (!this.handledRoot) {
      assert(name == null);
      this.handledRoot = true;
      return true;
    } else {
      assert(name != null);
    }

    return super.pushObject(name);
  }

  pushArray(name: string): bool {
    return super.pushArray(name);
  }
}
export function near_func_doNothing(): void {
  let json = new Uint8Array(input_read_len());
  input_read_into(json.buffer.data);
  let handler = new __near_ArgsParser_doNothing();
  handler.buffer = json;
  handler.decoder = new JSONDecoder<__near_ArgsParser_doNothing>(handler);
  handler.decoder.deserialize(json);
  wrapped_doNothing();
}
export class __near_ArgsParser_add extends ThrowingJSONHandler {
  buffer: Uint8Array;
  decoder: JSONDecoder<__near_ArgsParser_add>;
  handledRoot: boolean = false;

  __near_param_x: i32;
  __near_param_y: i32;
  setInteger(name: string, value: i32): void {
    if (name == "x") {
      this.__near_param_x = value;
      return;
    }
    if (name == "y") {
      this.__near_param_y = value;
      return;
    }

    super.setInteger(name, value);
  }
  setNull(name: string): void {
    if (name == "x") {
      this.__near_param_x = <i32>null;
      return;
    }
    if (name == "y") {
      this.__near_param_y = <i32>null;
      return;
    }

    super.setNull(name);
  }

  pushObject(name: string): bool {
    if (!this.handledRoot) {
      assert(name == null);
      this.handledRoot = true;
      return true;
    } else {
      assert(name != null);
    }

    return super.pushObject(name);
  }

  pushArray(name: string): bool {
    return super.pushArray(name);
  }
}
export function near_func_add(): void {
  let json = new Uint8Array(input_read_len());
  input_read_into(json.buffer.data);
  let handler = new __near_ArgsParser_add();
  handler.buffer = json;
  handler.decoder = new JSONDecoder<__near_ArgsParser_add>(handler);
  handler.decoder.deserialize(json);
  let result = wrapped_add(handler.__near_param_x, handler.__near_param_y);

  let encoder = new JSONEncoder();
  encoder.pushObject(null);

  encoder.setInteger("result", result);

  encoder.popObject();
  return_value(near.bufferWithSize(encoder.serialize()).buffer.data);
}
import { __near_decode_ContainerClass } from "./model_near";
export class __near_ArgsParser_getFoobar extends ThrowingJSONHandler {
  buffer: Uint8Array;
  decoder: JSONDecoder<__near_ArgsParser_getFoobar>;
  handledRoot: boolean = false;

  __near_param_container: ContainerClass;
  setNull(name: string): void {
    if (name == "container") {
      this.__near_param_container = <ContainerClass>null;
      return;
    }

    super.setNull(name);
  }

  pushObject(name: string): bool {
    if (!this.handledRoot) {
      assert(name == null);
      this.handledRoot = true;
      return true;
    } else {
      assert(name != null);
    }
    if (name == "container") {
      this.__near_param_container = <ContainerClass>(
        __near_decode_ContainerClass(this.buffer, this.decoder.state)
      );
      return false;
    }

    return super.pushObject(name);
  }

  pushArray(name: string): bool {
    return super.pushArray(name);
  }
}
import { __near_encode_AnotherContainerClass } from "./model_near";
export function near_func_getFoobar(): void {
  let json = new Uint8Array(input_read_len());
  input_read_into(json.buffer.data);
  let handler = new __near_ArgsParser_getFoobar();
  handler.buffer = json;
  handler.decoder = new JSONDecoder<__near_ArgsParser_getFoobar>(handler);
  handler.decoder.deserialize(json);
  let result = wrapped_getFoobar(handler.__near_param_container);

  let encoder = new JSONEncoder();
  encoder.pushObject(null);

  if (result != null) {
    encoder.pushObject("result");
    __near_encode_AnotherContainerClass(<AnotherContainerClass>result, encoder);
    encoder.popObject();
  } else {
    encoder.setNull("result");
  }

  encoder.popObject();
  return_value(near.bufferWithSize(encoder.serialize()).buffer.data);
}
export class __near_JSONHandler_Array_FooBar extends ThrowingJSONHandler {
  buffer: Uint8Array;
  decoder: JSONDecoder<__near_JSONHandler_Array_FooBar>;
  handledRoot: boolean = false;
  value: Array<FooBar> = new Array<FooBar>();
  pushObject(name: string): bool {
    this.value.push(<FooBar>(
      __near_decode_FooBar(this.buffer, this.decoder.state)
    ));
    return false;
  }
  pushArray(name: string): bool {
    assert(name == null);
    if (!this.handledRoot) {
      this.handledRoot = true;
      return true;
    }
    this.value.push(<FooBar>(
      __near_decode_FooBar(this.buffer, this.decoder.state)
    ));
    return false;
  }
}

import { __near_decode_FooBar } from "./model_near";
export function __near_decode_Array_FooBar(
  buffer: Uint8Array,
  state: DecoderState
): Array<FooBar> {
  let handler = new __near_JSONHandler_Array_FooBar();
  handler.buffer = buffer;
  handler.decoder = new JSONDecoder<__near_JSONHandler_Array_FooBar>(handler);
  handler.decoder.deserialize(buffer, state);
  return handler.value;
}

export class __near_ArgsParser_convertFoobars extends ThrowingJSONHandler {
  buffer: Uint8Array;
  decoder: JSONDecoder<__near_ArgsParser_convertFoobars>;
  handledRoot: boolean = false;

  __near_param_foobars: Array<FooBar>;
  setNull(name: string): void {
    if (name == "foobars") {
      this.__near_param_foobars = <Array<FooBar>>null;
      return;
    }

    super.setNull(name);
  }

  pushObject(name: string): bool {
    if (!this.handledRoot) {
      assert(name == null);
      this.handledRoot = true;
      return true;
    } else {
      assert(name != null);
    }

    return super.pushObject(name);
  }

  pushArray(name: string): bool {
    if (name == "foobars") {
      this.__near_param_foobars = <Array<FooBar>>(
        __near_decode_Array_FooBar(this.buffer, this.decoder.state)
      );
      return false;
    }

    return super.pushArray(name);
  }
}
import { __near_encode_ContainerClass } from "./model_near";
export function __near_encode_Array_ContainerClass(
  value: Array<ContainerClass>,
  encoder: JSONEncoder
): void {
  for (let i = 0; i < value.length; i++) {
    if (value[i] != null) {
      encoder.pushObject(null);
      __near_encode_ContainerClass(<ContainerClass>value[i], encoder);
      encoder.popObject();
    } else {
      encoder.setNull(null);
    }
  }
}
export function near_func_convertFoobars(): void {
  let json = new Uint8Array(input_read_len());
  input_read_into(json.buffer.data);
  let handler = new __near_ArgsParser_convertFoobars();
  handler.buffer = json;
  handler.decoder = new JSONDecoder<__near_ArgsParser_convertFoobars>(handler);
  handler.decoder.deserialize(json);
  let result = wrapped_convertFoobars(handler.__near_param_foobars);

  let encoder = new JSONEncoder();
  encoder.pushObject(null);

  if (result != null) {
    encoder.pushArray("result");
    __near_encode_Array_ContainerClass(<Array<ContainerClass>>result, encoder);
    encoder.popArray();
  } else {
    encoder.setNull("result");
  }

  encoder.popObject();
  return_value(near.bufferWithSize(encoder.serialize()).buffer.data);
}
import { __near_decode_Array_String } from "./model_near";
export class __near_ArgsParser_getStringArrayLength extends ThrowingJSONHandler {
  buffer: Uint8Array;
  decoder: JSONDecoder<__near_ArgsParser_getStringArrayLength>;
  handledRoot: boolean = false;

  __near_param_arr: Array<String>;
  setNull(name: string): void {
    if (name == "arr") {
      this.__near_param_arr = <Array<String>>null;
      return;
    }

    super.setNull(name);
  }

  pushObject(name: string): bool {
    if (!this.handledRoot) {
      assert(name == null);
      this.handledRoot = true;
      return true;
    } else {
      assert(name != null);
    }

    return super.pushObject(name);
  }

  pushArray(name: string): bool {
    if (name == "arr") {
      this.__near_param_arr = <Array<String>>(
        __near_decode_Array_String(this.buffer, this.decoder.state)
      );
      return false;
    }

    return super.pushArray(name);
  }
}
export function near_func_getStringArrayLength(): void {
  let json = new Uint8Array(input_read_len());
  input_read_into(json.buffer.data);
  let handler = new __near_ArgsParser_getStringArrayLength();
  handler.buffer = json;
  handler.decoder = new JSONDecoder<__near_ArgsParser_getStringArrayLength>(
    handler
  );
  handler.decoder.deserialize(json);
  let result = wrapped_getStringArrayLength(handler.__near_param_arr);

  let encoder = new JSONEncoder();
  encoder.pushObject(null);

  encoder.setInteger("result", result);

  encoder.popObject();
  return_value(near.bufferWithSize(encoder.serialize()).buffer.data);
}
