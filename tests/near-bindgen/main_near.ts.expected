import { near } from "./near";
import { JSONEncoder } from "./json/encoder";
import { JSONDecoder, ThrowingJSONHandler, DecoderState } from "./json/decoder";

// Runtime functions
declare function return_value(value_ptr: u32): void;
declare function input_read_len(): u32;
declare function input_read_into(ptr: usize): void;

import "allocator/arena";
// TODO: Why cannot import from index?
// import { JSONEncoder, JSONDecoder } from "./json";
import { JSONEncoder } from "./json/encoder";
import {
  JSONDecoder,
  DecoderState,
  JSONHandler,
  ThrowingJSONHandler
} from "./json/decoder";
import { near } from "./near";

declare function log(str: string): void;

export class FooBar {
  foo: i32 = 0;
  bar: i32 = 1;
  flag: bool;
  baz: string = "123";
  //foobar: Uint8Array;
  arr: Array<Array<string>>;
}

export class ContainerClass {
  foobar: FooBar;
}

export class AnotherContainerClass {
  foobar: FooBar;
}

export function doNothing(): void {}

export function add(x: i32, y: i32): i32 {
  return x + y;
}

export function getFoobar(container: ContainerClass): AnotherContainerClass {
  let result = new AnotherContainerClass();
  result.foobar = container.foobar;
  return result;
}

export function convertFoobars(foobars: Array<FooBar>): Array<ContainerClass> {
  return foobars.map<ContainerClass>(
    (it: FooBar, i: i32, arr: Array<FooBar>): ContainerClass => {
      let container = new ContainerClass();
      container.foobar = it;
      return container;
    }
  );
}

export class __near_ArgsParser_doNothing extends ThrowingJSONHandler {
  buffer: Uint8Array;
  decoder: JSONDecoder<__near_ArgsParser_doNothing>;
  handledRoot: boolean = false;

  setNull(name: string): void {
    super.setNull(name);
  }

  pushObject(name: string): bool {
    if (!this.handledRoot) {
      assert(name == null);
      this.handledRoot = true;
      return true;
    } else {
      assert(name != null);
    }

    return super.pushObject(name);
  }

  pushArray(name: string): bool {
    return super.pushArray(name);
  }
}
export function near_func_doNothing(): void {
  let json = new Uint8Array(input_read_len());
  input_read_into(json.buffer.data);
  let handler = new __near_ArgsParser_doNothing();
  handler.buffer = json;
  handler.decoder = new JSONDecoder<__near_ArgsParser_doNothing>(handler);
  handler.decoder.deserialize(json);
  doNothing();
}
export class __near_ArgsParser_add extends ThrowingJSONHandler {
  buffer: Uint8Array;
  decoder: JSONDecoder<__near_ArgsParser_add>;
  handledRoot: boolean = false;

  __near_param_x: i32;
  __near_param_y: i32;
  setInteger(name: string, value: i32): void {
    if (name == "x") {
      this.__near_param_x = value;
      return;
    }
    if (name == "y") {
      this.__near_param_y = value;
      return;
    }

    super.setInteger(name, value);
  }
  setNull(name: string): void {
    if (name == "x") {
      this.__near_param_x = <i32>null;
      return;
    }
    if (name == "y") {
      this.__near_param_y = <i32>null;
      return;
    }

    super.setNull(name);
  }

  pushObject(name: string): bool {
    if (!this.handledRoot) {
      assert(name == null);
      this.handledRoot = true;
      return true;
    } else {
      assert(name != null);
    }

    return super.pushObject(name);
  }

  pushArray(name: string): bool {
    return super.pushArray(name);
  }
}
export function near_func_add(): void {
  let json = new Uint8Array(input_read_len());
  input_read_into(json.buffer.data);
  let handler = new __near_ArgsParser_add();
  handler.buffer = json;
  handler.decoder = new JSONDecoder<__near_ArgsParser_add>(handler);
  handler.decoder.deserialize(json);
  let result = add(handler.__near_param_x, handler.__near_param_y);

  let encoder = new JSONEncoder();
  encoder.pushObject(null);

  encoder.setInteger("result", result);

  encoder.popObject();
  return_value(near.bufferWithSize(encoder.serialize()).buffer.data);
}
export class __near_JSONHandler_ContainerClass extends ThrowingJSONHandler {
  buffer: Uint8Array;
  decoder: JSONDecoder<__near_JSONHandler_ContainerClass>;
  handledRoot: boolean = false;
  value: ContainerClass = new ContainerClass();
  setNull(name: string): void {
    if (name == "foobar") {
      this.value.foobar = <FooBar>null;
      return;
    }

    super.setNull(name);
  }

  pushObject(name: string): bool {
    if (!this.handledRoot) {
      assert(name == null);
      this.handledRoot = true;
      return true;
    } else {
      assert(name != null);
    }
    if (name == "foobar") {
      this.value.foobar = __near_decode_FooBar(this.buffer, this.decoder.state);
      return false;
    }

    return super.pushObject(name);
  }

  pushArray(name: string): bool {
    return super.pushArray(name);
  }
}

export class __near_JSONHandler_FooBar extends ThrowingJSONHandler {
  buffer: Uint8Array;
  decoder: JSONDecoder<__near_JSONHandler_FooBar>;
  handledRoot: boolean = false;
  value: FooBar = new FooBar();
  setInteger(name: string, value: i32): void {
    if (name == "foo") {
      this.value.foo = value;
      return;
    }
    if (name == "bar") {
      this.value.bar = value;
      return;
    }

    super.setInteger(name, value);
  }
  setString(name: string, value: String): void {
    if (name == "baz") {
      this.value.baz = value;
      return;
    }

    super.setString(name, value);
  }
  setBoolean(name: string, value: bool): void {
    if (name == "flag") {
      this.value.flag = value;
      return;
    }

    super.setBoolean(name, value);
  }
  setNull(name: string): void {
    if (name == "foo") {
      this.value.foo = <i32>null;
      return;
    }
    if (name == "bar") {
      this.value.bar = <i32>null;
      return;
    }
    if (name == "flag") {
      this.value.flag = <bool>null;
      return;
    }
    if (name == "baz") {
      this.value.baz = <String>null;
      return;
    }
    if (name == "arr") {
      this.value.arr = <Array<Array<String>>>null;
      return;
    }

    super.setNull(name);
  }

  pushObject(name: string): bool {
    if (!this.handledRoot) {
      assert(name == null);
      this.handledRoot = true;
      return true;
    } else {
      assert(name != null);
    }

    return super.pushObject(name);
  }

  pushArray(name: string): bool {
    if (name == "arr") {
      this.value.arr = __near_decode_Array_Array_String(
        this.buffer,
        this.decoder.state
      );
      return false;
    }

    return super.pushArray(name);
  }
}

export class __near_JSONHandler_Array_Array_String extends ThrowingJSONHandler {
  buffer: Uint8Array;
  decoder: JSONDecoder<__near_JSONHandler_Array_Array_String>;
  handledRoot: boolean = false;
  value: Array<Array<String>> = new Array<Array<String>>();
  pushObject(name: string): bool {
    this.value.push(
      __near_decode_Array_String(this.buffer, this.decoder.state)
    );
    return false;
  }
  pushArray(name: string): bool {
    assert(name == null);
    if (!this.handledRoot) {
      this.handledRoot = true;
      return true;
    }
    this.value.push(
      __near_decode_Array_String(this.buffer, this.decoder.state)
    );
    return false;
  }
}

export class __near_JSONHandler_Array_String extends ThrowingJSONHandler {
  buffer: Uint8Array;
  decoder: JSONDecoder<__near_JSONHandler_Array_String>;
  handledRoot: boolean = false;
  value: Array<String> = new Array<String>();
  setString(name: string, value: String): void {
    this.value.push(value);
  }
  setNull(name: string): void {
    this.value.push(<String>null);
  }
  pushArray(name: string): bool {
    assert(name == null && !this.handledRoot);
    this.handledRoot = true;
    return true;
  }
}

export function __near_decode_Array_String(
  buffer: Uint8Array,
  state: DecoderState
): Array<String> {
  let handler = new __near_JSONHandler_Array_String();
  handler.buffer = buffer;
  handler.decoder = new JSONDecoder<__near_JSONHandler_Array_String>(handler);
  handler.decoder.deserialize(buffer, state);
  return handler.value;
}

export function __near_decode_Array_Array_String(
  buffer: Uint8Array,
  state: DecoderState
): Array<Array<String>> {
  let handler = new __near_JSONHandler_Array_Array_String();
  handler.buffer = buffer;
  handler.decoder = new JSONDecoder<__near_JSONHandler_Array_Array_String>(
    handler
  );
  handler.decoder.deserialize(buffer, state);
  return handler.value;
}

export function __near_decode_FooBar(
  buffer: Uint8Array,
  state: DecoderState
): FooBar {
  let handler = new __near_JSONHandler_FooBar();
  handler.buffer = buffer;
  handler.decoder = new JSONDecoder<__near_JSONHandler_FooBar>(handler);
  handler.decoder.deserialize(buffer, state);
  return handler.value;
}

export function __near_decode_ContainerClass(
  buffer: Uint8Array,
  state: DecoderState
): ContainerClass {
  let handler = new __near_JSONHandler_ContainerClass();
  handler.buffer = buffer;
  handler.decoder = new JSONDecoder<__near_JSONHandler_ContainerClass>(handler);
  handler.decoder.deserialize(buffer, state);
  return handler.value;
}

export class __near_ArgsParser_getFoobar extends ThrowingJSONHandler {
  buffer: Uint8Array;
  decoder: JSONDecoder<__near_ArgsParser_getFoobar>;
  handledRoot: boolean = false;

  __near_param_container: ContainerClass;
  setNull(name: string): void {
    if (name == "container") {
      this.__near_param_container = <ContainerClass>null;
      return;
    }

    super.setNull(name);
  }

  pushObject(name: string): bool {
    if (!this.handledRoot) {
      assert(name == null);
      this.handledRoot = true;
      return true;
    } else {
      assert(name != null);
    }
    if (name == "container") {
      this.__near_param_container = __near_decode_ContainerClass(
        this.buffer,
        this.decoder.state
      );
      return false;
    }

    return super.pushObject(name);
  }

  pushArray(name: string): bool {
    return super.pushArray(name);
  }
}
export function __near_encode_Array_String(
  value: Array<String>,
  encoder: JSONEncoder
): void {
  for (let i = 0; i < value.length; i++) {
    if (value[i] != null) {
      encoder.setString(null, value[i]);
    } else {
      encoder.setNull(null);
    }
  }
}
export function __near_encode_Array_Array_String(
  value: Array<Array<String>>,
  encoder: JSONEncoder
): void {
  for (let i = 0; i < value.length; i++) {
    if (value[i] != null) {
      encoder.pushArray(null);
      __near_encode_Array_String(value[i], encoder);
      encoder.popArray();
    } else {
      encoder.setNull(null);
    }
  }
}
export function __near_encode_FooBar(
  value: FooBar,
  encoder: JSONEncoder
): void {
  encoder.setInteger("foo", value.foo);
  encoder.setInteger("bar", value.bar);
  encoder.setBoolean("flag", value.flag);
  if (value.baz != null) {
    encoder.setString("baz", value.baz);
  } else {
    encoder.setNull("baz");
  }
  if (value.arr != null) {
    encoder.pushArray("arr");
    __near_encode_Array_Array_String(value.arr, encoder);
    encoder.popArray();
  } else {
    encoder.setNull("arr");
  }
}
export function __near_encode_AnotherContainerClass(
  value: AnotherContainerClass,
  encoder: JSONEncoder
): void {
  if (value.foobar != null) {
    encoder.pushObject("foobar");
    __near_encode_FooBar(value.foobar, encoder);
    encoder.popObject();
  } else {
    encoder.setNull("foobar");
  }
}
export function near_func_getFoobar(): void {
  let json = new Uint8Array(input_read_len());
  input_read_into(json.buffer.data);
  let handler = new __near_ArgsParser_getFoobar();
  handler.buffer = json;
  handler.decoder = new JSONDecoder<__near_ArgsParser_getFoobar>(handler);
  handler.decoder.deserialize(json);
  let result = getFoobar(handler.__near_param_container);

  let encoder = new JSONEncoder();
  encoder.pushObject(null);

  if (result != null) {
    encoder.pushObject("result");
    __near_encode_AnotherContainerClass(result, encoder);
    encoder.popObject();
  } else {
    encoder.setNull("result");
  }

  encoder.popObject();
  return_value(near.bufferWithSize(encoder.serialize()).buffer.data);
}
export class __near_JSONHandler_Array_FooBar extends ThrowingJSONHandler {
  buffer: Uint8Array;
  decoder: JSONDecoder<__near_JSONHandler_Array_FooBar>;
  handledRoot: boolean = false;
  value: Array<FooBar> = new Array<FooBar>();
  pushObject(name: string): bool {
    this.value.push(__near_decode_FooBar(this.buffer, this.decoder.state));
    return false;
  }
  pushArray(name: string): bool {
    assert(name == null);
    if (!this.handledRoot) {
      this.handledRoot = true;
      return true;
    }
    this.value.push(__near_decode_FooBar(this.buffer, this.decoder.state));
    return false;
  }
}

export function __near_decode_Array_FooBar(
  buffer: Uint8Array,
  state: DecoderState
): Array<FooBar> {
  let handler = new __near_JSONHandler_Array_FooBar();
  handler.buffer = buffer;
  handler.decoder = new JSONDecoder<__near_JSONHandler_Array_FooBar>(handler);
  handler.decoder.deserialize(buffer, state);
  return handler.value;
}

export class __near_ArgsParser_convertFoobars extends ThrowingJSONHandler {
  buffer: Uint8Array;
  decoder: JSONDecoder<__near_ArgsParser_convertFoobars>;
  handledRoot: boolean = false;

  __near_param_foobars: Array<FooBar>;
  setNull(name: string): void {
    if (name == "foobars") {
      this.__near_param_foobars = <Array<FooBar>>null;
      return;
    }

    super.setNull(name);
  }

  pushObject(name: string): bool {
    if (!this.handledRoot) {
      assert(name == null);
      this.handledRoot = true;
      return true;
    } else {
      assert(name != null);
    }

    return super.pushObject(name);
  }

  pushArray(name: string): bool {
    if (name == "foobars") {
      this.__near_param_foobars = __near_decode_Array_FooBar(
        this.buffer,
        this.decoder.state
      );
      return false;
    }

    return super.pushArray(name);
  }
}
export function __near_encode_ContainerClass(
  value: ContainerClass,
  encoder: JSONEncoder
): void {
  if (value.foobar != null) {
    encoder.pushObject("foobar");
    __near_encode_FooBar(value.foobar, encoder);
    encoder.popObject();
  } else {
    encoder.setNull("foobar");
  }
}
export function __near_encode_Array_ContainerClass(
  value: Array<ContainerClass>,
  encoder: JSONEncoder
): void {
  for (let i = 0; i < value.length; i++) {
    if (value[i] != null) {
      encoder.pushObject(null);
      __near_encode_ContainerClass(value[i], encoder);
      encoder.popObject();
    } else {
      encoder.setNull(null);
    }
  }
}
export function near_func_convertFoobars(): void {
  let json = new Uint8Array(input_read_len());
  input_read_into(json.buffer.data);
  let handler = new __near_ArgsParser_convertFoobars();
  handler.buffer = json;
  handler.decoder = new JSONDecoder<__near_ArgsParser_convertFoobars>(handler);
  handler.decoder.deserialize(json);
  let result = convertFoobars(handler.__near_param_foobars);

  let encoder = new JSONEncoder();
  encoder.pushObject(null);

  if (result != null) {
    encoder.pushArray("result");
    __near_encode_Array_ContainerClass(result, encoder);
    encoder.popArray();
  } else {
    encoder.setNull("result");
  }

  encoder.popObject();
  return_value(near.bufferWithSize(encoder.serialize()).buffer.data);
}
