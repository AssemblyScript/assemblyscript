{"version":3,"sources":["webpack://asparse/webpack/universalModuleDefinition","webpack://asparse/webpack/bootstrap","webpack://asparse/./src/index.ts","webpack://asparse/./src/common.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","common_1","Type","SectionId","ExternalKind","compiled","parse","binary","options","WebAssembly","Module","string","length","charCodeAt","Math","ceil","buffer","Uint8Array","j","k","undefined","s64","Error","base64_decode","nBytes","nPages","memory","Memory","initial","set","readString","offset","start","end","parts","chunk","push","String","fromCharCode","apply","slice","join","utf8_read","imports","env","forEach","Instance","Array","NameType","MAX_PAGES","MAX_ELEMS","Opcode"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"asparse\"] = factory();\n\telse\n\t\troot[\"asparse\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar common_1 = require(\"./common\");\r\nexports.Type = common_1.Type;\r\nexports.SectionId = common_1.SectionId;\r\nexports.ExternalKind = common_1.ExternalKind;\r\n/** Cached compiled parser. */\r\nvar compiled = null;\r\nif (typeof WASM_DATA !== \"string\")\r\n    WASM_DATA = require(\"fs\").readFileSync(__dirname + \"/../build/index.wasm\", \"base64\");\r\n/** Parses the contents of a WebAssembly binary according to the specified options. */\r\nfunction parse(binary, options) {\r\n    if (!options)\r\n        options = {};\r\n    // compile the parser if not yet compiled\r\n    if (!compiled)\r\n        compiled = new WebAssembly.Module(base64_decode(WASM_DATA));\r\n    // use the binary as the parser's memory\r\n    var nBytes = binary.length;\r\n    var nPages = ((nBytes + 0xffff) & ~0xffff) >> 16;\r\n    var memory = new WebAssembly.Memory({ initial: nPages });\r\n    var buffer = new Uint8Array(memory.buffer);\r\n    buffer.set(binary);\r\n    // provide a way to read strings from memory\r\n    parse.readString = function (offset, length) { return utf8_read(buffer, offset, offset + length); };\r\n    // instantiate the parser and return its exports\r\n    var imports = {\r\n        env: {\r\n            memory: memory\r\n        },\r\n        options: {}\r\n    };\r\n    [\"onSection\",\r\n        \"onType\",\r\n        \"onTypeParam\",\r\n        \"onTypeReturn\",\r\n        \"onImport\",\r\n        \"onFunctionImport\",\r\n        \"onTableImport\",\r\n        \"onMemoryImport\",\r\n        \"onGlobalImport\",\r\n        \"onMemory\",\r\n        \"onFunction\",\r\n        \"onTable\",\r\n        \"onGlobal\",\r\n        \"onExport\",\r\n        \"onStart\",\r\n        \"onSourceMappingURL\",\r\n        \"onModuleName\",\r\n        \"onFunctionName\",\r\n        \"onLocalName\"\r\n    ].forEach(function (name) { return imports.options[name] = options[name] || function () { }; });\r\n    var instance = new WebAssembly.Instance(compiled, imports);\r\n    instance.exports.parse(0, nBytes);\r\n}\r\nexports.parse = parse;\r\n// see: https://github.com/dcodeIO/protobuf.js/tree/master/lib/utf8\r\nfunction utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null, chunk = [], i = 0, // char offset\r\n    t = 0; // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128) {\r\n            chunk[i++] = t;\r\n        }\r\n        else if (t > 191 && t < 224) {\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        }\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        }\r\n        else {\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n}\r\n// see: https://github.com/dcodeIO/protobuf.js/tree/master/lib/base64\r\nfunction base64_decode(string) {\r\n    var length = string.length;\r\n    if (length) {\r\n        var n = 0, p = length;\r\n        while (--p % 4 > 1 && string.charCodeAt(p) === 61)\r\n            ++n;\r\n        length = Math.ceil(length * 3) / 4 - n;\r\n    }\r\n    var buffer = new Uint8Array(length);\r\n    var j = 0, o = 0, t = 0;\r\n    for (var i = 0, k = string.length; i < k;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error();\r\n        switch (j) {\r\n            case 0: {\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            }\r\n            case 1: {\r\n                buffer[o++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            }\r\n            case 2: {\r\n                buffer[o++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            }\r\n            case 3: {\r\n                buffer[o++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error();\r\n    return buffer;\r\n}\r\nvar s64 = new Array(123);\r\nfor (var i = 0; i < 64;)\r\n    s64[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n","\"use strict\";\r\n/** Common constants shared between AssemblyScript and TypeScript. */\r\nexports.__esModule = true;\r\n/** WebAssembly types. */\r\nvar Type;\r\n(function (Type) {\r\n    Type[Type[\"i32\"] = 127] = \"i32\";\r\n    Type[Type[\"i64\"] = 126] = \"i64\";\r\n    Type[Type[\"f32\"] = 125] = \"f32\";\r\n    Type[Type[\"f64\"] = 124] = \"f64\";\r\n    Type[Type[\"anyfunc\"] = 112] = \"anyfunc\";\r\n    Type[Type[\"func\"] = 96] = \"func\";\r\n    Type[Type[\"none\"] = 64] = \"none\";\r\n})(Type = exports.Type || (exports.Type = {}));\r\n/** WebAssembly section ids. */\r\nvar SectionId;\r\n(function (SectionId) {\r\n    SectionId[SectionId[\"Custom\"] = 0] = \"Custom\";\r\n    SectionId[SectionId[\"Type\"] = 1] = \"Type\";\r\n    SectionId[SectionId[\"Import\"] = 2] = \"Import\";\r\n    SectionId[SectionId[\"Function\"] = 3] = \"Function\";\r\n    SectionId[SectionId[\"Table\"] = 4] = \"Table\";\r\n    SectionId[SectionId[\"Memory\"] = 5] = \"Memory\";\r\n    SectionId[SectionId[\"Global\"] = 6] = \"Global\";\r\n    SectionId[SectionId[\"Export\"] = 7] = \"Export\";\r\n    SectionId[SectionId[\"Start\"] = 8] = \"Start\";\r\n    SectionId[SectionId[\"Element\"] = 9] = \"Element\";\r\n    SectionId[SectionId[\"Code\"] = 10] = \"Code\";\r\n    SectionId[SectionId[\"Data\"] = 11] = \"Data\";\r\n})(SectionId = exports.SectionId || (exports.SectionId = {}));\r\n/** WebAssembly external kinds. */\r\nvar ExternalKind;\r\n(function (ExternalKind) {\r\n    ExternalKind[ExternalKind[\"Function\"] = 0] = \"Function\";\r\n    ExternalKind[ExternalKind[\"Table\"] = 1] = \"Table\";\r\n    ExternalKind[ExternalKind[\"Memory\"] = 2] = \"Memory\";\r\n    ExternalKind[ExternalKind[\"Global\"] = 3] = \"Global\";\r\n})(ExternalKind = exports.ExternalKind || (exports.ExternalKind = {}));\r\n/** Name section types. */\r\nvar NameType;\r\n(function (NameType) {\r\n    NameType[NameType[\"Module\"] = 0] = \"Module\";\r\n    NameType[NameType[\"Function\"] = 1] = \"Function\";\r\n    NameType[NameType[\"Local\"] = 2] = \"Local\";\r\n})(NameType = exports.NameType || (exports.NameType = {}));\r\n/** Maximum number of memory pages. */\r\nexports.MAX_PAGES = 0xffff;\r\n/** Maximum number of table elements. */\r\nexports.MAX_ELEMS = 0xffffffff;\r\n/** WebAssembly opcodes. */\r\nvar Opcode;\r\n(function (Opcode) {\r\n    // unreachable = 0x00,\r\n    // nop = 0x01,\r\n    // block = 0x02,\r\n    // loop = 0x03,\r\n    // if_ = 0x04,\r\n    // else_ = 0x05,\r\n    Opcode[Opcode[\"end\"] = 11] = \"end\";\r\n    // br = 0x0c,\r\n    // br_if = 0x0d,\r\n    // br_table = 0x0e,\r\n    // return_ = 0x0f,\r\n    // call = 0x10,\r\n    // call_indirect = 0x11,\r\n    // drop = 0x1a,\r\n    // select = 0x1b,\r\n    // get_local = 0x20,\r\n    // set_local = 0x21,\r\n    // tee_local = 0x22,\r\n    Opcode[Opcode[\"get_global\"] = 35] = \"get_global\";\r\n    // set_global = 0x24,\r\n    // i32_load = 0x28,\r\n    // i64_load = 0x29,\r\n    // f32_load = 0x2a,\r\n    // f64_load = 0x2b,\r\n    // i32_load8_s = 0x2c,\r\n    // i32_load8_u = 0x2d,\r\n    // i32_load16_s = 0x2e,\r\n    // i32_load16_u = 0x2f,\r\n    // i64_load8_s = 0x30,\r\n    // i64_load8_u = 0x31,\r\n    // i64_load16_s = 0x32,\r\n    // i64_load16_u = 0x33,\r\n    // i64_load32_s = 0x34,\r\n    // i64_load32_u = 0x35,\r\n    // i32_store = 0x36,\r\n    // i64_store = 0x37,\r\n    // f32_store = 0x38,\r\n    // f64_store = 0x39,\r\n    // i32_store8 = 0x3a,\r\n    // i32_store16 = 0x3b,\r\n    // i64_store8 = 0x3c,\r\n    // i64_store16 = 0x3d,\r\n    // i64_store32 = 0x3e,\r\n    // current_memory = 0x3f,\r\n    // grow_memory = 0x40,\r\n    Opcode[Opcode[\"i32_const\"] = 65] = \"i32_const\";\r\n    Opcode[Opcode[\"i64_const\"] = 66] = \"i64_const\";\r\n    Opcode[Opcode[\"f32_const\"] = 67] = \"f32_const\";\r\n    Opcode[Opcode[\"f64_const\"] = 68] = \"f64_const\";\r\n    // i32_eqz = 0x45,\r\n    // i32_eq = 0x46,\r\n    // i32_ne = 0x47,\r\n    // i32_lt_s = 0x48,\r\n    // i32_lt_u = 0x49,\r\n    // i32_gt_s = 0x4a,\r\n    // i32_gt_u = 0x4b,\r\n    // i32_le_s = 0x4c,\r\n    // i32_le_u = 0x4d,\r\n    // i32_ge_s = 0x4e,\r\n    // i32_ge_u = 0x4f,\r\n    // i64_eqz = 0x50,\r\n    // i64_eq = 0x51,\r\n    // i64_ne = 0x52,\r\n    // i64_lt_s = 0x53,\r\n    // i64_lt_u = 0x54,\r\n    // i64_gt_s = 0x55,\r\n    // i64_gt_u = 0x56,\r\n    // i64_le_s = 0x57,\r\n    // i64_le_u = 0x58,\r\n    // i64_ge_s = 0x59,\r\n    // i64_ge_u = 0x5a,\r\n    // f32_eq = 0x5b,\r\n    // f32_ne = 0x5c,\r\n    // f32_lt = 0x5d,\r\n    // f32_gt = 0x5e,\r\n    // f32_le = 0x5f,\r\n    // f32_ge = 0x60,\r\n    // f64_eq = 0x61,\r\n    // f64_ne = 0x62,\r\n    // f64_lt = 0x63,\r\n    // f64_gt = 0x64,\r\n    // f64_le = 0x65,\r\n    // f64_ge = 0x66,\r\n    // i32_clz = 0x67,\r\n    // i32_ctz = 0x68,\r\n    // i32_popcnt = 0x69,\r\n    // i32_add = 0x6a,\r\n    // i32_sub = 0x6b,\r\n    // i32_mul = 0x6c,\r\n    // i32_div_s = 0x6d,\r\n    // i32_div_u = 0x6e,\r\n    // i32_rem_s = 0x6f,\r\n    // i32_rem_u = 0x70,\r\n    // i32_and = 0x71,\r\n    // i32_or = 0x72,\r\n    // i32_xor = 0x73,\r\n    // i32_shl = 0x74,\r\n    // i32_shr_s = 0x75,\r\n    // i32_shr_u = 0x76,\r\n    // i32_rotl = 0x77,\r\n    // i32_rotr = 0x78,\r\n    // i64_clz = 0x79,\r\n    // i64_ctz = 0x7a,\r\n    // i64_popcnt = 0x7b,\r\n    // i64_add = 0x7c,\r\n    // i64_sub = 0x7d,\r\n    // i64_mul = 0x7e,\r\n    // i64_div_s = 0x7f,\r\n    // i64_div_u = 0x80,\r\n    // i64_rem_s = 0x81,\r\n    // i64_rem_u = 0x82,\r\n    // i64_and = 0x83,\r\n    // i64_or = 0x84,\r\n    // i64_xor = 0x85,\r\n    // i64_shl = 0x86,\r\n    // i64_shr_s = 0x87,\r\n    // i64_shr_u = 0x88,\r\n    // i64_rotl = 0x89,\r\n    // i64_rotr = 0x8a,\r\n    // f32_abs = 0x8b,\r\n    // f32_neg = 0x8c,\r\n    // f32_ceil = 0x8d,\r\n    // f32_floor = 0x8e,\r\n    // f32_trunc = 0x8f,\r\n    // f32_nearest = 0x90,\r\n    // f32_sqrt = 0x91,\r\n    // f32_add = 0x92,\r\n    // f32_sub = 0x93,\r\n    // f32_mul = 0x94,\r\n    // f32_div = 0x95,\r\n    // f32_min = 0x96,\r\n    // f32_max = 0x97,\r\n    // f32_copysign = 0x98,\r\n    // f64_abs = 0x99,\r\n    // f64_neg = 0x9a,\r\n    // f64_ceil = 0x9b,\r\n    // f64_floor = 0x9c,\r\n    // f64_trunc = 0x9d,\r\n    // f64_nearest = 0x9e,\r\n    // f64_sqrt = 0x9f,\r\n    // f64_add = 0xa0,\r\n    // f64_sub = 0xa1,\r\n    // f64_mul = 0xa2,\r\n    // f64_div = 0xa3,\r\n    // f64_min = 0xa4,\r\n    // f64_max = 0xa5,\r\n    // f64_copysign = 0xa6,\r\n    // i32_wrap_i64 = 0xa7,\r\n    // i32_trunc_s_f32 = 0xa8,\r\n    // i32_trunc_u_f32 = 0xa9,\r\n    // i32_trunc_s_f64 = 0xaa,\r\n    // i32_trunc_u_f64 = 0xab,\r\n    // i64_extend_s_i32 = 0xac,\r\n    // i64_extend_u_i32 = 0xad,\r\n    // i64_trunc_s_f32 = 0xae,\r\n    // i64_trunc_u_f32 = 0xaf,\r\n    // i64_trunc_s_f64 = 0xb0,\r\n    // i64_trunc_u_f64 = 0xb1,\r\n    // f32_convert_s_i32 = 0xb2,\r\n    // f32_convert_u_i32 = 0xb3,\r\n    // f32_convert_s_i64 = 0xb4,\r\n    // f32_convert_u_i64 = 0xb5,\r\n    // f32_demote_f64 = 0xb6,\r\n    // f64_convert_s_i32 = 0xb7,\r\n    // f64_convert_u_i32 = 0xb8,\r\n    // f64_convert_s_i64 = 0xb9,\r\n    // f64_convert_u_i64 = 0xba,\r\n    // f64_promote_f32 = 0xbb,\r\n    // i32_reinterpret_f32 = 0xbc,\r\n    // i64_reinterpret_f64 = 0xbd,\r\n    // f32_reinterpret_i32 = 0xbe,\r\n    // f64_reinterpret_i64 = 0xbf\r\n})(Opcode = exports.Opcode || (exports.Opcode = {}));\r\n"],"sourceRoot":""}