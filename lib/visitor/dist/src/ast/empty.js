"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EmptyVisitor = /** @class */ (function () {
    function EmptyVisitor() {
    }
    EmptyVisitor.prototype.visitSource = function (node) { };
    EmptyVisitor.prototype.visitTypeNode = function (node) { };
    EmptyVisitor.prototype.visitTypeName = function (node) { };
    EmptyVisitor.prototype.visitNamedTypeNode = function (node) { };
    EmptyVisitor.prototype.visitFunctionTypeNode = function (node) { };
    EmptyVisitor.prototype.visitTypeParameter = function (node) { };
    EmptyVisitor.prototype.visitIdentifierExpression = function (node) { };
    EmptyVisitor.prototype.visitArrayLiteralExpression = function (node) { };
    EmptyVisitor.prototype.visitObjectLiteralExpression = function (node) { };
    EmptyVisitor.prototype.visitAssertionExpression = function (node) { };
    EmptyVisitor.prototype.visitBinaryExpression = function (node) { };
    EmptyVisitor.prototype.visitCallExpression = function (node) { };
    EmptyVisitor.prototype.visitClassExpression = function (node) { };
    EmptyVisitor.prototype.visitCommaExpression = function (node) { };
    EmptyVisitor.prototype.visitElementAccessExpression = function (node) { };
    EmptyVisitor.prototype.visitFunctionExpression = function (node) { };
    EmptyVisitor.prototype.visitLiteralExpression = function (node) { };
    EmptyVisitor.prototype.visitFloatLiteralExpression = function (node) { };
    EmptyVisitor.prototype.visitInstanceOfExpression = function (node) { };
    EmptyVisitor.prototype.visitIntegerLiteralExpression = function (node) { };
    EmptyVisitor.prototype.visitStringLiteral = function (str, singleQuoted) { };
    EmptyVisitor.prototype.visitStringLiteralExpression = function (node) { };
    EmptyVisitor.prototype.visitRegexpLiteralExpression = function (node) { };
    EmptyVisitor.prototype.visitNewExpression = function (node) { };
    EmptyVisitor.prototype.visitParenthesizedExpression = function (node) { };
    EmptyVisitor.prototype.visitPropertyAccessExpression = function (node) { };
    EmptyVisitor.prototype.visitTernaryExpression = function (node) { };
    EmptyVisitor.prototype.visitUnaryExpression = function (node) { };
    EmptyVisitor.prototype.visitUnaryPostfixExpression = function (node) { };
    EmptyVisitor.prototype.visitUnaryPrefixExpression = function (node) { };
    EmptyVisitor.prototype.visitSuperExpression = function (node) { };
    EmptyVisitor.prototype.visitFalseExpression = function (node) { };
    EmptyVisitor.prototype.visitTrueExpression = function (node) { };
    EmptyVisitor.prototype.visitThisExpression = function (node) { };
    EmptyVisitor.prototype.visitNullExperssion = function (node) { };
    EmptyVisitor.prototype.visitConstructorExpression = function (node) { };
    EmptyVisitor.prototype.visitNodeAndTerminate = function (statement) { };
    EmptyVisitor.prototype.visitBlockStatement = function (node) { };
    EmptyVisitor.prototype.visitBreakStatement = function (node) { };
    EmptyVisitor.prototype.visitContinueStatement = function (node) { };
    EmptyVisitor.prototype.visitClassDeclaration = function (node, isDefault) { };
    EmptyVisitor.prototype.visitDoStatement = function (node) { };
    EmptyVisitor.prototype.visitEmptyStatement = function (node) { };
    EmptyVisitor.prototype.visitEnumDeclaration = function (node, isDefault) { };
    EmptyVisitor.prototype.visitEnumValueDeclaration = function (node) { };
    EmptyVisitor.prototype.visitExportImportStatement = function (node) { };
    EmptyVisitor.prototype.visitExportMember = function (node) { };
    EmptyVisitor.prototype.visitExportStatement = function (node) { };
    EmptyVisitor.prototype.visitExportDefaultStatement = function (node) { };
    EmptyVisitor.prototype.visitExpressionStatement = function (node) { };
    EmptyVisitor.prototype.visitFieldDeclaration = function (node) { };
    EmptyVisitor.prototype.visitForStatement = function (node) { };
    EmptyVisitor.prototype.visitFunctionDeclaration = function (node, isDefault) { };
    EmptyVisitor.prototype.visitFunctionCommon = function (node) { };
    EmptyVisitor.prototype.visitIfStatement = function (node) { };
    EmptyVisitor.prototype.visitImportDeclaration = function (node) { };
    EmptyVisitor.prototype.visitImportStatement = function (node) { };
    EmptyVisitor.prototype.visitIndexSignatureDeclaration = function (node) { };
    EmptyVisitor.prototype.visitInterfaceDeclaration = function (node, isDefault) { };
    EmptyVisitor.prototype.visitMethodDeclaration = function (node) { };
    EmptyVisitor.prototype.visitNamespaceDeclaration = function (node, isDefault) { };
    EmptyVisitor.prototype.visitReturnStatement = function (node) { };
    EmptyVisitor.prototype.visitSwitchCase = function (node) { };
    EmptyVisitor.prototype.visitSwitchStatement = function (node) { };
    EmptyVisitor.prototype.visitThrowStatement = function (node) { };
    EmptyVisitor.prototype.visitTryStatement = function (node) { };
    EmptyVisitor.prototype.visitTypeDeclaration = function (node) { };
    EmptyVisitor.prototype.visitVariableDeclaration = function (node) { };
    EmptyVisitor.prototype.visitVariableStatement = function (node) { };
    EmptyVisitor.prototype.visitWhileStatement = function (node) { };
    EmptyVisitor.prototype.visitVoidStatement = function (node) { };
    EmptyVisitor.prototype.visitComment = function (node) { };
    EmptyVisitor.prototype.visitDecoratorNode = function (node) { };
    EmptyVisitor.prototype.visitParameter = function (node) { };
    return EmptyVisitor;
}());
exports.EmptyVisitor = EmptyVisitor;
