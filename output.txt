
> assemblyscript@0.0.0 test:compiler C:\Users\Joshua Tenner\projects\assemblyscript
> node --experimental-wasi-unstable-preview1 tests/compiler "builtins"

# compiler/builtins

- compile untouched
  SUCCESS (2217.399 ms)

- compare fixture
--- expected
+++ actual
@@ -2,12 +2,14 @@
  (type $i32_=>_i32 (func (param i32) (result i32)))
  (type $none_=>_none (func))
  (type $i32_i32_=>_i32 (func (param i32 i32) (result i32)))
  (type $i32_i32_i32_=>_i32 (func (param i32 i32 i32) (result i32)))
  (type $i32_i32_i32_i32_=>_none (func (param i32 i32 i32 i32)))
+ (type $i32_=>_none (func (param i32)))
+ (type $i32_i32_f64_f64_f64_f64_f64_=>_none (func (param i32 i32 f64 f64 f64 f64 f64)))
+ (type $none_=>_i32 (func (result i32)))
  (type $i32_i32_i32_i32_i32_=>_i32 (func (param i32 i32 i32 i32 i32) (result i32)))
- (type $i32_i32_f64_f64_f64_f64_f64_=>_none (func (param i32 i32 f64 f64 f64 f64 f64)))
  (import "env" "abort" (func $~lib/builtins/abort (param i32 i32 i32 i32)))
  (import "env" "trace" (func $~lib/builtins/trace (param i32 i32 f64 f64 f64 f64 f64)))
  (global $builtins/b (mut i32) (i32.const 0))
  (global $builtins/l (mut i32) (i32.const 0))
  (global $builtins/v (mut i32) (i32.const 0))
@@ -50,13 +52,13 @@
  (global $~lib/builtins/f64.MIN_VALUE f64 (f64.const 5e-324))
  (global $~lib/builtins/f64.MAX_VALUE f64 (f64.const 1797693134862315708145274e284))
  (global $~lib/builtins/f64.MIN_SAFE_INTEGER f64 (f64.const -9007199254740991))
  (global $~lib/builtins/f64.MAX_SAFE_INTEGER f64 (f64.const 9007199254740991))
  (global $~lib/builtins/f64.EPSILON f64 (f64.const 2.220446049250313e-16))
- (global $~lib/memory/__data_end i32 (i32.const 1004))
- (global $~lib/memory/__stack_pointer (mut i32) (i32.const 17388))
- (global $~lib/memory/__heap_base i32 (i32.const 17388))
+ (global $~lib/memory/__data_end i32 (i32.const 1068))
+ (global $~lib/memory/__stack_pointer (mut i32) (i32.const 17452))
+ (global $~lib/memory/__heap_base i32 (i32.const 17452))
  (memory $0 1)
  (data (i32.const 12) "\1c\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
  (data (i32.const 44) "\1c\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\06\00\00\00a\00b\00c\00\00\00\00\00\00\00")
  (data (i32.const 76) ",\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\16\00\00\00b\00u\00i\00l\00t\00i\00n\00s\00.\00t\00s\00\00\00\00\00\00\00")
  (data (i32.const 124) "\1c\00\00\00\00\00\00\00\00\00\00\00\06\00\00\00\08\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00")
@@ -81,28 +83,41 @@
  (data (i32.const 828) "\1c\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\n\00\00\00u\00s\00i\00z\00e\00\00\00")
  (data (i32.const 860) "\1c\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\08\00\00\00v\00o\00i\00d\00\00\00\00\00")
  (data (i32.const 892) ",\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\14\00\00\00s\00o\00m\00e\00 \00v\00a\00l\00u\00e\00\00\00\00\00\00\00\00\00")
  (data (i32.const 940) "\1c\00\00\00\00\00\00\00\00\00\00\00\0b\00\00\00\08\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00")
  (data (i32.const 972) "\1c\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\08\00\00\00\03\00\00\00\00\00\00\00\00\00\00\00")
+ (data (i32.const 1004) "<\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00 \00\00\00a\00r\00g\00u\00m\00e\00n\00t\00s\00 \00l\00e\00n\00g\00t\00h\00\00\00\00\00\00\00\00\00\00\00\00\00")
  (table $0 4 funcref)
  (elem $0 (i32.const 1) $start:builtins~anonymous|0 $start:builtins~anonymous|1 $start:builtins~anonymous|2)
  (export "test" (func $builtins/test))
  (export "memory" (memory $0))
  (start $~start)
  (func $start:builtins~anonymous|0 (param $0 i32) (param $1 i32) (result i32)
+  (local $2 i32)
+  global.get $~argumentsLength
+  local.set $2
   local.get $0
   local.get $1
   i32.add
  )
  (func $~lib/function/Function<%28i32%2Ci32%29=>i32>#get:index (param $0 i32) (result i32)
+  (local $1 i32)
+  global.get $~argumentsLength
+  local.set $1
   local.get $0
   i32.load
  )
  (func $~lib/function/Function<%28i32%2Ci32%29=>i32>#get:name (param $0 i32) (result i32)
+  (local $1 i32)
+  global.get $~argumentsLength
+  local.set $1
   i32.const 32
  )
  (func $~lib/string/String#get:length (param $0 i32) (result i32)
+  (local $1 i32)
+  global.get $~argumentsLength
+  local.set $1
   local.get $0
   i32.const 20
   i32.sub
   i32.load offset=16
   i32.const 1
@@ -112,113 +127,119 @@
   (local $5 i32)
   (local $6 i32)
   (local $7 i32)
   (local $8 i32)
   (local $9 i32)
+  (local $10 i32)
+  global.get $~argumentsLength
+  local.set $5
   local.get $0
   local.get $1
   i32.const 1
   i32.shl
   i32.add
-  local.set $5
+  local.set $6
   local.get $2
   local.get $3
   i32.const 1
   i32.shl
   i32.add
-  local.set $6
+  local.set $7
   i32.const 0
   i32.const 2
   i32.lt_s
   drop
   local.get $4
   i32.const 4
   i32.ge_u
   if (result i32)
-   local.get $5
+   local.get $6
    i32.const 7
    i32.and
-   local.get $6
+   local.get $7
    i32.const 7
    i32.and
    i32.or
    i32.eqz
   else
    i32.const 0
   end
   if
    block $do-break|0
     loop $do-continue|0
-     local.get $5
-     i64.load
      local.get $6
      i64.load
+     local.get $7
+     i64.load
      i64.ne
      if
       br $do-break|0
      end
-     local.get $5
+     local.get $6
      i32.const 8
      i32.add
-     local.set $5
-     local.get $6
+     local.set $6
+     local.get $7
      i32.const 8
      i32.add
-     local.set $6
+     local.set $7
      local.get $4
      i32.const 4
      i32.sub
      local.set $4
      local.get $4
      i32.const 4
      i32.ge_u
-     local.set $7
-     local.get $7
+     local.set $8
+     local.get $8
      br_if $do-continue|0
     end
    end
   end
   loop $while-continue|1
    local.get $4
-   local.tee $7
+   local.tee $8
    i32.const 1
    i32.sub
    local.set $4
-   local.get $7
-   local.set $7
-   local.get $7
+   local.get $8
+   local.set $8
+   local.get $8
    if
-    local.get $5
-    i32.load16_u
-    local.set $8
     local.get $6
     i32.load16_u
     local.set $9
-    local.get $8
+    local.get $7
+    i32.load16_u
+    local.set $10
     local.get $9
+    local.get $10
     i32.ne
     if
-     local.get $8
      local.get $9
+     local.get $10
      i32.sub
      return
     end
-    local.get $5
+    local.get $6
     i32.const 2
     i32.add
-    local.set $5
-    local.get $6
+    local.set $6
+    local.get $7
     i32.const 2
     i32.add
-    local.set $6
+    local.set $7
     br $while-continue|1
    end
   end
   i32.const 0
  )
  (func $~lib/string/String.__eq (param $0 i32) (param $1 i32) (result i32)
   (local $2 i32)
+  (local $3 i32)
+  global.get $~argumentsLength
+  local.set $2
   local.get $0
   local.get $1
   i32.eq
   if
    i32.const 1
@@ -238,12 +259,12 @@
    i32.const 0
    return
   end
   local.get $0
   call $~lib/string/String#get:length
-  local.set $2
-  local.get $2
+  local.set $3
+  local.get $3
   local.get $1
   call $~lib/string/String#get:length
   i32.ne
   if
    i32.const 0
@@ -251,21 +272,30 @@
   end
   local.get $0
   i32.const 0
   local.get $1
   i32.const 0
-  local.get $2
+  local.get $3
   call $~lib/util/string/compareImpl
   i32.eqz
  )
  (func $~lib/function/Function<%28i32%2Ci32%29=>i32>#get:length (param $0 i32) (result i32)
+  (local $1 i32)
+  global.get $~argumentsLength
+  local.set $1
   i32.const 2
  )
  (func $~lib/function/Function<%28i32%2Ci32%29=>i32>#toString (param $0 i32) (result i32)
+  (local $1 i32)
+  global.get $~argumentsLength
+  local.set $1
   i32.const 176
  )
  (func $~lib/atomics/Atomics.isLockFree (param $0 i32) (result i32)
+  (local $1 i32)
+  global.get $~argumentsLength
+  local.set $1
   local.get $0
   i32.const 1
   i32.eq
   if (result i32)
    i32.const 1
@@ -281,85 +311,98 @@
    i32.const 4
    i32.eq
   end
  )
  (func $start:builtins~anonymous|1
-  nop
+  (local $0 i32)
+  global.get $~argumentsLength
+  local.set $0
  )
  (func $start:builtins~anonymous|2 (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32)
-  nop
+  (local $4 i32)
+  global.get $~argumentsLength
+  local.set $4
  )
  (func $builtins/max3 (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
   (local $3 i32)
   (local $4 i32)
   (local $5 i32)
+  (local $6 i32)
+  global.get $~argumentsLength
+  local.set $3
   local.get $0
-  local.tee $5
+  local.tee $6
   local.get $1
-  local.tee $3
+  local.tee $4
   local.get $2
-  local.tee $4
-  local.get $3
+  local.tee $5
   local.get $4
+  local.get $5
   i32.gt_s
   select
-  local.tee $3
-  local.get $5
-  local.get $3
+  local.tee $4
+  local.get $6
+  local.get $4
   i32.gt_s
   select
  )
  (func $builtins/min3 (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
   (local $3 i32)
   (local $4 i32)
   (local $5 i32)
+  (local $6 i32)
+  global.get $~argumentsLength
+  local.set $3
   local.get $0
-  local.tee $5
+  local.tee $6
   local.get $1
-  local.tee $3
+  local.tee $4
   local.get $2
-  local.tee $4
-  local.get $3
+  local.tee $5
   local.get $4
+  local.get $5
   i32.lt_s
   select
-  local.tee $3
-  local.get $5
-  local.get $3
+  local.tee $4
+  local.get $6
+  local.get $4
   i32.lt_s
   select
  )
  (func $builtins/rotl3 (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
   (local $3 i32)
   (local $4 i32)
   (local $5 i32)
+  (local $6 i32)
+  global.get $~argumentsLength
+  local.set $3
   local.get $0
   i32.extend8_s
-  local.tee $5
+  local.tee $6
   local.get $1
   i32.extend8_s
-  local.tee $3
+  local.tee $4
   local.get $2
-  local.tee $4
+  local.tee $5
   i32.const 7
   i32.and
   i32.shl
-  local.get $3
+  local.get $4
   i32.const 0
-  local.get $4
+  local.get $5
   i32.sub
   i32.const 7
   i32.and
   i32.shr_u
   i32.or
-  local.tee $3
+  local.tee $4
   i32.const 7
   i32.and
   i32.shl
-  local.get $5
+  local.get $6
   i32.const 0
-  local.get $3
+  local.get $4
   i32.sub
   i32.const 7
   i32.and
   i32.shr_u
   i32.or
@@ -367,73 +410,119 @@
  )
  (func $builtins/rotr3 (param $0 i32) (param $1 i32) (param $2 i32) (result i32)
   (local $3 i32)
   (local $4 i32)
   (local $5 i32)
+  (local $6 i32)
+  global.get $~argumentsLength
+  local.set $3
   local.get $0
   i32.extend8_s
-  local.tee $5
+  local.tee $6
   local.get $1
   i32.extend8_s
-  local.tee $3
+  local.tee $4
   local.get $2
-  local.tee $4
+  local.tee $5
   i32.const 7
   i32.and
   i32.shr_u
-  local.get $3
+  local.get $4
   i32.const 0
-  local.get $4
+  local.get $5
   i32.sub
   i32.const 7
   i32.and
   i32.shl
   i32.or
-  local.tee $3
+  local.tee $4
   i32.const 7
   i32.and
   i32.shr_u
-  local.get $5
+  local.get $6
   i32.const 0
-  local.get $3
+  local.get $4
   i32.sub
   i32.const 7
   i32.and
   i32.shl
   i32.or
   i32.extend8_s
  )
+ (func $~lib/builtins/arguments.get:length (result i32)
+  (local $0 i32)
+  global.get $~argumentsLength
+  local.set $0
+  local.get $0
+ )
  (func $builtins/test
-  nop
+  (local $0 i32)
+  global.get $~argumentsLength
+  local.set $0
  )
  (func $~start
+  (local $0 i32)
   call $start:builtins
  )
  (func $~stack_check
   global.get $~lib/memory/__stack_pointer
   global.get $~lib/memory/__data_end
   i32.lt_s
   if
-   i32.const 17408
-   i32.const 17456
+   i32.const 17472
+   i32.const 17520
    i32.const 1
    i32.const 1
    call $~lib/builtins/abort
    unreachable
   end
  )
+ (func $builtins/arglength1 (param $0 i32)
+  (local $1 i32)
+  (local $2 i32)
+  global.get $~lib/memory/__stack_pointer
+  i32.const 4
+  i32.sub
+  global.set $~lib/memory/__stack_pointer
+  call $~stack_check
+  global.get $~lib/memory/__stack_pointer
+  i32.const 0
+  i32.store
+  global.get $~argumentsLength
+  local.set $1
+  i32.const 1024
+  local.set $2
+  global.get $~lib/memory/__stack_pointer
+  local.get $2
+  i32.store
+  local.get $2
+  i32.const 2
+  call $~lib/builtins/arguments.get:length
+  f64.convert_i32_s
+  call $~lib/builtins/arguments.get:length
+  f64.convert_i32_s
+  f64.const 0
+  f64.const 0
+  f64.const 0
+  call $~lib/builtins/trace
+  global.get $~lib/memory/__stack_pointer
+  i32.const 4
+  i32.add
+  global.set $~lib/memory/__stack_pointer
+ )
  (func $start:builtins
   (local $0 i32)
   (local $1 i32)
-  (local $2 i64)
+  (local $2 i32)
   (local $3 i64)
-  (local $4 f32)
-  (local $5 f64)
-  (local $6 i32)
+  (local $4 i64)
+  (local $5 f32)
+  (local $6 f64)
   (local $7 i32)
   (local $8 i32)
   (local $9 i32)
+  (local $10 i32)
   global.get $~lib/memory/__stack_pointer
   i32.const 12
   i32.sub
   global.set $~lib/memory/__stack_pointer
   call $~stack_check
@@ -601,19 +690,19 @@
    i32.const 20
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 143
-  local.tee $0
+  local.tee $1
   i32.const 3
-  local.tee $1
+  local.tee $2
   i32.const 7
   i32.and
   i32.shl
-  local.get $0
+  local.get $1
   i32.const 0
-  local.get $1
+  local.get $2
   i32.sub
   i32.const 7
   i32.and
   i32.shr_u
   i32.or
@@ -631,19 +720,19 @@
    i32.const 34
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 170
+  local.tee $2
+  i32.const 1
   local.tee $1
-  i32.const 1
-  local.tee $0
   i32.const 7
   i32.and
   i32.shr_u
+  local.get $2
+  i32.const 0
   local.get $1
-  i32.const 0
-  local.get $0
   i32.sub
   i32.const 7
   i32.and
   i32.shl
   i32.or
@@ -678,34 +767,34 @@
   i32.const 1
   i32.const 1
   i32.rotr
   drop
   i32.const -42
-  local.tee $1
+  local.tee $2
   i32.const 31
   i32.shr_s
-  local.tee $0
+  local.tee $1
+  local.get $2
+  i32.add
   local.get $1
-  i32.add
-  local.get $0
   i32.xor
   drop
   i32.const 1
-  local.tee $0
+  local.tee $1
   i32.const 2
-  local.tee $1
-  local.get $0
+  local.tee $2
   local.get $1
+  local.get $2
   i32.gt_s
   select
   drop
   i32.const 1
+  local.tee $2
+  i32.const 2
   local.tee $1
-  i32.const 2
-  local.tee $0
+  local.get $2
   local.get $1
-  local.get $0
   i32.lt_s
   select
   drop
   i32.const 1
   i32.const 2
@@ -739,17 +828,17 @@
   i32.const 1
   i32.const 1
   i32.rotr
   global.set $builtins/i
   i32.const -42
-  local.tee $1
+  local.tee $2
   i32.const 31
   i32.shr_s
-  local.tee $0
+  local.tee $1
+  local.get $2
+  i32.add
   local.get $1
-  i32.add
-  local.get $0
   i32.xor
   global.set $builtins/i
   global.get $builtins/i
   i32.const 42
   i32.eq
@@ -761,15 +850,15 @@
    i32.const 20
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 1
-  local.tee $0
+  local.tee $1
   i32.const 2
-  local.tee $1
-  local.get $0
+  local.tee $2
   local.get $1
+  local.get $2
   i32.gt_s
   select
   global.set $builtins/i
   global.get $builtins/i
   i32.const 2
@@ -782,15 +871,15 @@
    i32.const 21
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 1
+  local.tee $2
+  i32.const 2
   local.tee $1
-  i32.const 2
-  local.tee $0
+  local.get $2
   local.get $1
-  local.get $0
   i32.lt_s
   select
   global.set $builtins/i
   global.get $builtins/i
   i32.const 1
@@ -884,17 +973,17 @@
   i64.const 1
   i64.const 1
   i64.rotr
   drop
   i64.const -42
-  local.tee $2
+  local.tee $3
   i64.const 63
   i64.shr_s
-  local.tee $3
-  local.get $2
+  local.tee $4
+  local.get $3
   i64.add
-  local.get $3
+  local.get $4
   i64.xor
   drop
   i64.const 1
   i64.clz
   global.set $builtins/I
@@ -911,17 +1000,17 @@
   i64.const 1
   i64.const 1
   i64.rotr
   global.set $builtins/I
   i64.const -42
-  local.tee $2
+  local.tee $3
   i64.const 63
   i64.shr_s
-  local.tee $3
-  local.get $2
+  local.tee $4
+  local.get $3
   i64.add
-  local.get $3
+  local.get $4
   i64.xor
   global.set $builtins/I
   global.get $builtins/I
   i64.const 42
   i64.eq
@@ -933,15 +1022,15 @@
    i32.const 20
    call $~lib/builtins/abort
    unreachable
   end
   i64.const 1
+  local.tee $4
+  i64.const 2
   local.tee $3
-  i64.const 2
-  local.tee $2
+  local.get $4
   local.get $3
-  local.get $2
   i64.gt_s
   select
   global.set $builtins/I
   global.get $builtins/I
   i64.const 2
@@ -954,15 +1043,15 @@
    i32.const 21
    call $~lib/builtins/abort
    unreachable
   end
   i64.const 1
-  local.tee $2
+  local.tee $3
   i64.const 2
-  local.tee $3
-  local.get $2
+  local.tee $4
   local.get $3
+  local.get $4
   i64.lt_s
   select
   global.set $builtins/I
   global.get $builtins/I
   i64.const 1
@@ -1073,54 +1162,54 @@
   drop
   f32.const 1.25
   f32.trunc
   drop
   f32.const 1.25
-  local.tee $4
-  local.get $4
+  local.tee $5
+  local.get $5
   f32.ne
   i32.const 0
   i32.eq
   drop
   f32.const nan:0x400000
-  local.tee $4
-  local.get $4
+  local.tee $5
+  local.get $5
   f32.ne
   i32.const 1
   i32.eq
   drop
   f32.const 1.25
-  local.tee $4
-  local.get $4
+  local.tee $5
+  local.get $5
   f32.sub
   f32.const 0
   f32.eq
   i32.const 1
   i32.eq
   drop
   f32.const inf
-  local.tee $4
-  local.get $4
+  local.tee $5
+  local.get $5
   f32.sub
   f32.const 0
   f32.eq
   i32.const 0
   i32.eq
   drop
   f32.const inf
   f32.neg
-  local.tee $4
-  local.get $4
+  local.tee $5
+  local.get $5
   f32.sub
   f32.const 0
   f32.eq
   i32.const 0
   i32.eq
   drop
   f32.const nan:0x400000
-  local.tee $4
-  local.get $4
+  local.tee $5
+  local.get $5
   f32.sub
   f32.const 0
   f32.eq
   i32.const 0
   i32.eq
@@ -1234,17 +1323,17 @@
   global.set $builtins/f
   f32.const 1.25
   f32.trunc
   global.set $builtins/f
   f32.const 1.25
-  local.tee $4
-  local.get $4
+  local.tee $5
+  local.get $5
   f32.ne
   global.set $builtins/b
   f32.const 1.25
-  local.tee $4
-  local.get $4
+  local.tee $5
+  local.get $5
   f32.sub
   f32.const 0
   f32.eq
   global.set $builtins/b
   f64.const nan:0x8000000000000
@@ -1300,54 +1389,54 @@
   drop
   f64.const 1.25
   f64.trunc
   drop
   f64.const 1.25
-  local.tee $5
-  local.get $5
+  local.tee $6
+  local.get $6
   f64.ne
   i32.const 0
   i32.eq
   drop
   f64.const nan:0x8000000000000
-  local.tee $5
-  local.get $5
+  local.tee $6
+  local.get $6
   f64.ne
   i32.const 1
   i32.eq
   drop
   f64.const 1.25
-  local.tee $5
-  local.get $5
+  local.tee $6
+  local.get $6
   f64.sub
   f64.const 0
   f64.eq
   i32.const 1
   i32.eq
   drop
   f64.const inf
-  local.tee $5
-  local.get $5
+  local.tee $6
+  local.get $6
   f64.sub
   f64.const 0
   f64.eq
   i32.const 0
   i32.eq
   drop
   f64.const inf
   f64.neg
-  local.tee $5
-  local.get $5
+  local.tee $6
+  local.get $6
   f64.sub
   f64.const 0
   f64.eq
   i32.const 0
   i32.eq
   drop
   f64.const nan:0x8000000000000
-  local.tee $5
-  local.get $5
+  local.tee $6
+  local.get $6
   f64.sub
   f64.const 0
   f64.eq
   i32.const 0
   i32.eq
@@ -1449,17 +1538,17 @@
   global.set $builtins/F
   f64.const 1.25
   f64.trunc
   global.set $builtins/F
   f64.const 1.25
-  local.tee $5
-  local.get $5
+  local.tee $6
+  local.get $6
   f64.ne
   global.set $builtins/b
   f64.const 1.25
-  local.tee $5
-  local.get $5
+  local.tee $6
+  local.get $6
   f64.sub
   f64.const 0
   f64.eq
   global.set $builtins/b
   f64.const 0
@@ -1766,15 +1855,15 @@
   end
   i32.const 5
   i32.const 2
   i32.const 3
   global.get $builtins/fn
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   call $~lib/function/Function<%28i32%2Ci32%29=>i32>#get:index
   call_indirect $0 (type $i32_i32_=>_i32)
   i32.eq
   i32.eqz
   if
@@ -1784,27 +1873,27 @@
    i32.const 1
    call $~lib/builtins/abort
    unreachable
   end
   global.get $builtins/fn
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=8
-  local.get $9
+  local.get $10
   call $~lib/function/Function<%28i32%2Ci32%29=>i32>#get:name
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 32
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -1812,15 +1901,15 @@
    i32.const 1
    call $~lib/builtins/abort
    unreachable
   end
   global.get $builtins/fn
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   call $~lib/function/Function<%28i32%2Ci32%29=>i32>#get:length
   i32.const 2
   i32.eq
   i32.eqz
   if
@@ -1830,15 +1919,15 @@
    i32.const 1
    call $~lib/builtins/abort
    unreachable
   end
   global.get $builtins/fn
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   call $~lib/function/Function<%28i32%2Ci32%29=>i32>#get:length
   i32.const 2
   i32.eq
   i32.eqz
   if
@@ -1848,27 +1937,27 @@
    i32.const 1
    call $~lib/builtins/abort
    unreachable
   end
   global.get $builtins/fn
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=8
-  local.get $9
+  local.get $10
   call $~lib/function/Function<%28i32%2Ci32%29=>i32>#toString
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 176
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -1972,61 +2061,61 @@
   f64.const nan:0x8000000000000
   f64.const nan:0x8000000000000
   f64.ne
   drop
   f32.const nan:0x400000
-  local.tee $4
-  local.get $4
+  local.tee $5
+  local.get $5
   f32.ne
   drop
   f64.const nan:0x8000000000000
-  local.tee $5
-  local.get $5
+  local.tee $6
+  local.get $6
   f64.ne
   drop
   f32.const nan:0x400000
-  local.tee $4
-  local.get $4
+  local.tee $5
+  local.get $5
   f32.sub
   f32.const 0
   f32.eq
   i32.eqz
   drop
   f32.const inf
-  local.tee $4
-  local.get $4
+  local.tee $5
+  local.get $5
   f32.sub
   f32.const 0
   f32.eq
   i32.eqz
   drop
   f64.const nan:0x8000000000000
-  local.tee $5
-  local.get $5
+  local.tee $6
+  local.get $6
   f64.sub
   f64.const 0
   f64.eq
   i32.eqz
   drop
   f64.const inf
-  local.tee $5
-  local.get $5
+  local.tee $6
+  local.get $6
   f64.sub
   f64.const 0
   f64.eq
   i32.eqz
   drop
   f32.const 0
-  local.tee $4
-  local.get $4
+  local.tee $5
+  local.get $5
   f32.sub
   f32.const 0
   f32.eq
   drop
   f64.const 0
-  local.tee $5
-  local.get $5
+  local.tee $6
+  local.get $6
   f64.sub
   f64.const 0
   f64.eq
   drop
   global.get $~lib/builtins/i8.MIN_VALUE
@@ -2496,62 +2585,62 @@
    i32.const 1
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 0
+  local.set $2
+  i32.const 0
   local.set $1
-  i32.const 0
-  local.set $0
   i32.const 23
-  local.set $6
-  i32.const 24
   local.set $7
   i32.const 24
   local.set $8
+  i32.const 24
+  local.set $9
   i32.const 256
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 5
+  local.get $2
+  f64.convert_i32_u
   local.get $1
   f64.convert_i32_u
-  local.get $0
-  f64.convert_i32_u
-  local.get $6
-  f64.convert_i32_u
   local.get $7
   f64.convert_i32_u
   local.get $8
   f64.convert_i32_u
+  local.get $9
+  f64.convert_i32_u
   call $~lib/builtins/trace
+  local.get $2
   local.get $1
-  local.get $0
   i32.eq
   i32.eqz
   if
    i32.const 304
    i32.const 96
    i32.const 510
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
-  local.get $1
-  local.get $6
+  local.get $2
+  local.get $7
   i32.ne
   i32.eqz
   if
    i32.const 0
    i32.const 96
    i32.const 511
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
-  local.get $6
+  local.get $7
   i32.const 23
   i32.eq
   i32.eqz
   if
    i32.const 0
@@ -2559,12 +2648,12 @@
    i32.const 512
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
-  local.get $7
   local.get $8
+  local.get $9
   i32.eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2572,21 +2661,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 352
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 352
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2594,21 +2683,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 352
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 352
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2616,21 +2705,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 400
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 400
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2638,21 +2727,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 432
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 432
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2660,21 +2749,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 464
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 464
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2682,21 +2771,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 496
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 496
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2704,21 +2793,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 528
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 528
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2726,21 +2815,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 560
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 560
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2748,21 +2837,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 592
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 592
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2770,21 +2859,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 624
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 624
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2792,21 +2881,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 656
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 656
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2814,21 +2903,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 688
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 688
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2836,21 +2925,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 720
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 720
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2858,21 +2947,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 752
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 752
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2880,21 +2969,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 784
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 784
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2902,21 +2991,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 816
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 816
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2924,21 +3013,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 848
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 848
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2946,21 +3035,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 880
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 880
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2968,21 +3057,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 432
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 432
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -2990,21 +3079,21 @@
    i32.const 3
    call $~lib/builtins/abort
    unreachable
   end
   i32.const 352
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store
-  local.get $9
+  local.get $10
   i32.const 352
-  local.set $9
+  local.set $10
   global.get $~lib/memory/__stack_pointer
-  local.get $9
+  local.get $10
   i32.store offset=4
-  local.get $9
+  local.get $10
   call $~lib/string/String.__eq
   i32.eqz
   if
    i32.const 0
    i32.const 96
@@ -3137,10 +3226,12 @@
    i32.const 585
    i32.const 1
    call $~lib/builtins/abort
    unreachable
   end
+  i32.const 1
+  call $builtins/arglength1
   global.get $~lib/memory/__stack_pointer
   i32.const 12
   i32.add
   global.set $~lib/memory/__stack_pointer
  )

  FAILURE (291.120 ms)

- compile optimized
  SUCCESS (8537.509 ms)

- instantiate untouched
  trace:  0, 0, 23, 24, 24
  trace:  2, 2
  SUCCESS (59.371 ms)

- instantiate optimized
  trace:  0, 0, 23, 24, 24
  trace:  2, 2
  SUCCESS (4.158 ms)

FAILURE: 1 compiler tests had failures:

  builtins 

Time: 13029 ms

