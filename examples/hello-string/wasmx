#!/usr/bin/env node

file=arg=process.argv[2]

backtrace=function (print=1){
	try{throw new Error()}catch(ex){if(print)console.error(trimStack(ex,1)); else return trimStack(ex)}
}

demangle=function (line){ // todo: proper cpp demangle lol
	return line
}

trimStack=function (ex,more=0) {
	// console.error(ex)
	let keep = true
	let stack = ex.stack?ex.stack.split("\n"):(ex.message||"").split("\n")
	let caller = trimStack.caller.name;
	ex.stack = stack.filter(x => {
		if(caller&&x.match(caller))return 0 
		if (x.match("Object.<anonymous>")) keep = false
		if (x.match("Module._compile")) keep = false
		if (x.match("modulus.exports")) keep = false// todo
		if(!keep && x.match("at "))more--
		return keep||more>0
	}).map(demangle).join("\n")//.replace(/at _/g,"at ")
	return ex
}


// console.log(file)
// console.log()
binary = require('fs').readFileSync(file)
module = new WebAssembly.Module(binary)

// memory = new WebAssembly.Memory({initial: 256, maximum: 256}); 
// table = new WebAssembly.Table({initial: 10, maximum:10, element: "anyfunc"});

memory = new WebAssembly.Memory({initial: 16384, maximum: 65536}); 
table = new WebAssembly.Table({initial: 256, element: "anyfunc"});
buffer=new Buffer(memory.buffer) // node only!

nop = x=>0
log = x => console.log(x)

if(typeof(TextDecoder)!='undefined'){// WEB
	const encoder = new TextDecoder('utf-16le');
	string =function toUTF16StringA(pointer, size) {
    let arr = new Uint8Array(heap.subarray(pointer, pointer + size));
    console.log(encoder.decode(arr));
	}
}else{ // NODE.js
	string = function(pointer,length=-1, encoding=0){ 
		if(length<=0)while(buffer[pointer+ ++length]); // auto determine length
		if(encoding) encoding='utf16le'
		else encoding='utf8' // todo better
		decoded = buffer.slice(pointer,pointer+length).toString(encoding)
		return decoded
	}
}

// logs = (x,len) => console.log(string(x,len)) 
logs = function(pointer,len,encoding){ console.log(string(pointer,len,encoding)) }
logc = x => process.stdout.write(x?String.fromCodePoint(x):"\n"),

imports={
	console:{log_char: c => process.stdout.write(String.fromCodePoint(c)),
			logc, _logc:logc, logs, _logs:logs, logi: log, _logi:log, log, _log:log,
		}, global:{NaN,Infinity},
		env: {memory,table,abort:nop, nullFunc_X: log, abortStackOverflow:nop, 
			DYNAMICTOP_PTR: 100, 
			// STACKTOP:0,STACK_MAX:1000,enlargeMemory:log,getTotalMemory:log,abortOnCannotGrowMemory:log,
			tempDoublePtr: 0, ABORT: 2, memoryBase: 0, tableBase: 0,
			logc, _logc:logc, logs, _logs:logs, logi: log, _logi:log, log, _log:log,
			logx: x => console.log(hex(x)),
			 _raise:x=>{throw new Error(string(x))},
			backtrace:x=>console.error(backtrace()),
		},
}
try{
	instance= new WebAssembly.Instance(module,imports)
	args=process.argv.slice(3,process.argv.length) 
	let main = instance.exports.main || instance.exports._main
	if(instance.exports.memory)
	buffer = new Buffer(instance.exports.memory.buffer) // node only
	if (main) console.log(">>>", result=main(process.argc,args)||0)
}catch(ex){console.error(trimStack(ex));}

// console.log(Module.getValue(buffer+i*nByte, 'i32'));